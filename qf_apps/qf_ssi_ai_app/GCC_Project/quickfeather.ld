OUTPUT_FORMAT ("elf32-littlearm", "elf32-bigarm", "elf32-littlearm")
/* Internal Memory Map*/
ENTRY(Reset_Handler)
MEMORY
{
	rom (rx)  : ORIGIN = 0x00000000, LENGTH = 0x00027000
	ram (rwx) : ORIGIN = 0x20027000, LENGTH = 0x0003c800
	spiram (rw) : ORIGIN = 0x20063800, LENGTH = 0x0000800
	HWA (rw)  : ORIGIN = 0x20064000, LENGTH = 0x00018000
	shm       : ORIGIN = 0x2007C000, LENGTH = 0x00004000
}

SECTIONS
{
	.text :
	{
		KEEP(*(.isr_vector))
		*(.text*)

		KEEP(*(.init))
		KEEP(*(.fini))

		/* .ctors */
		*crtbegin.o(.ctors)
		*crtbegin?.o(.ctors)
		*(EXCLUDE_FILE(*crtend?.o *crtend.o) .ctors)
		*(SORT(.ctors.*))
		*(.ctors)

		/* .dtors */
		*crtbegin.o(.dtors)
		*crtbegin?.o(.dtors)
		*(EXCLUDE_FILE(*crtend?.o *crtend.o) .dtors)
		*(SORT(.dtors.*))
		*(.dtors)

		*(.rodata*)

		KEEP(*(.eh_fram e*))
	} > rom

	.ARM.extab :
	{
		*(.ARM.extab* .gnu.linkonce.armextab.*)
	} > rom

	__exidx_start = .;
	.ARM.exidx :
	{
		*(.ARM.exidx* .gnu.linkonce.armexidx.*)
	} > rom
	__exidx_end = .;
	__etext = .;

	/* _sidata is used in coide startup code */
	_sidata = __etext;


	.data : 
	{
		__data_start__ = .;

		/* _sdata is used in coide startup code */
		_sdata = __data_start__;

		*(vtable)
		*(.data*)

		. = ALIGN(4);
		/* preinit data */
		PROVIDE_HIDDEN (__preinit_array_start = .);
		KEEP(*(.preinit_array))
		PROVIDE_HIDDEN (__preinit_array_end = .);

		. = ALIGN(4);
		/* init data */
		PROVIDE_HIDDEN (__init_array_start = .);
		KEEP(*(SORT(.init_array.*)))
		KEEP(*(.init_array))
		PROVIDE_HIDDEN (__init_array_end = .);

		. = ALIGN(4);
		/* finit data */
		PROVIDE_HIDDEN (__fini_array_start = .);
		KEEP(*(SORT(.fini_array.*)))
		KEEP(*(.fini_array))
		PROVIDE_HIDDEN (__fini_array_end = .);

		KEEP(*(.jcr*))
		. = ALIGN(4);
		/* All data end */
		__data_end__ = .;

		/* _edata is used in coide startup code */
		_edata = __data_end__;
	} > ram AT > rom

	.Hardware (NOLOAD) :
	{
	  __hwa_start__ = .;  /* create symbol for start of section */
	  *(*HWA*)            /* keep my variable even if not referenced */
	  __hwa_end__ = .;   /* create symbol for end of section */
	} > HWA

	.bss :
	{
		. = ALIGN(4);
		__bss_start__ = .;
		_sbss = __bss_start__;
		*(.bss*)
		*(COMMON)
		. = ALIGN(4);
		__bss_end__ = .;
		_ebss = __bss_end__;
	} > ram

    .rtos :
    {
        . = ALIGN(4);
        __rtos_start__ = .;
        *(.rtos*)
        . = ALIGN(4);
        __rtos_end__ = .;
        _ertos = __rtos_end__;
    } > ram

    /* SPI shared addresses are fixed: */
    .BLE_SPI_TX_LOCATION 0x20063800 (NOLOAD) :
    {
        . = ALIGN(4);
        KEEP(*(.BLE_SPI_TX_LOCATION)) /* keep it even if not referenced */
    } > spiram
    .BLE_SPI_RX_LOCATION  0x20063C00 (NOLOAD) :
    {
        . = ALIGN(4);
        KEEP(*(.BLE_SPI_RX_LOCATION)) /* keep it even if not referenced */
    } > spiram

	.heap (COPY):
	{
		__end__ = .;
		_end = __end__;
		end = __end__;
		__HeapBase = _end;
		*(.heap*)
		__HeapLimit = .;
	} > ram

	/* .stack_dummy section doesn't contains any symbols. It is only
	* used for linker to calculate size of stack sections, and assign
	* values to stack symbols later */
	.co_stack (NOLOAD):
	{
		. = ALIGN(8);
		*(.co_stack .co_stack.*)
	} > ram

	/* Set stack top to end of ram , and stack limit move down by
	* size of stack_dummy section */
	STACK_SIZE = 3K;
	__StackTop = ORIGIN(ram ) + LENGTH(ram );
	__StackLimit = __StackTop - STACK_SIZE;
	PROVIDE(__stack = __StackTop);

	/* Check if data + heap + stack exceeds ram  limit */
	ASSERT(__StackLimit >= __HeapLimit, "region ram  overflowed with stack")
}
