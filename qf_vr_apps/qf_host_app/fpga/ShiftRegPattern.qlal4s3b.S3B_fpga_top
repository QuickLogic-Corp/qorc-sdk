task get_wl_pat421; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x001000110000010x0110x01100011000;
	cfgsin1[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin2[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin3[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin4[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin5[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin6[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin7[0:44] =  45 'b0000010x0110x011000110000001x0110x01100011000;
// TR
	cfgsin15[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin14[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin13[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin12[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin11[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin10[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000000x0000x;
	cfgsin17[0:44] =  45 'bxxxxxxx00000000x0000xxxxxxxx00000000x0000xxxx;
	cfgsin18[0:44] =  45 'bxxxx00000000x0000xxxxxxxx00000000x0000xxxxxxx;
	cfgsin19[0:44] =  45 'bx00000000x0000xxxxxxxx00000000x0000xxxxxxxx00;
	cfgsin20[0:44] =  45 'b000000x0000xxxxxxxx00000000x0000xxxxxxxx00000;
	cfgsin21[0:44] =  45 'b000x0000xxxxxxxx00000000x0000xxxxxxxx00000000;
	cfgsin22[0:44] =  45 'bx0000xxxxxxxx00000000x0000xxxxxxxx00000000x00;
	cfgsin23[0:44] =  45 'b00xxxxxxxx00000000x0000xxxxxxxx00000000x0000x;
// BR
	cfgsin31[0:44] =  45 'bxxxxxxx00000000x0000xxxxxxxx00000000x0000xxxx;
	cfgsin30[0:44] =  45 'bxxxx00000000x0000xxxxxxxx00000000x0000xxxxxxx;
	cfgsin29[0:44] =  45 'bx00000000x0000xxxxxxxx00000000x0000xxxxxxxx00;
	cfgsin28[0:44] =  45 'b000000x0000xxxxxxxx00000000x0000xxxxxxxx00000;
	cfgsin27[0:44] =  45 'b000x0000xxxxxxxx00000000x0000xxxxxxxx00000000;
	cfgsin26[0:44] =  45 'bx0000xxxxxxxx00000000x0000xxxxxxxx00000000x00;
	cfgsin25[0:44] =  45 'b00xxxxxxxx00000000x0000xxxxxxxx00000000x0000x;
	cfgsin24[0:44] =  45 'bxxxxxxxxx00000000x0000xxxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat420; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx0010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin19[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin20[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin21[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin22[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin23[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
// BR
	cfgsin31[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin30[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin29[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin28[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin27[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin26[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin25[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x01100011000xxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat419; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000001000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000xxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat418; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat417; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxxx1010000100000001xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000001000001xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000001000001xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000001000001xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000001000001xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000001000001xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000001000001xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000001000001xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000001000001xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000001000001xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00001000001xx1xx1010000100000100xx1xx10100000;
	cfgsin28[0:44] =  45 'b01000001xx1xx1010000100000100xx1xx10100000010;
	cfgsin27[0:44] =  45 'b00001xx1xx1010000100000100xx1xx10100000010000;
	cfgsin26[0:44] =  45 'b01xx1xx1010000100000100xx1xx1010000100000010x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000001xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xxxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat416; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000100x01000010000100000100xx00;
	cfgsin1[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin2[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin3[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin5[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin6[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin7[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin14[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin13[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin12[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin10[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin9[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxxx1100000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000001000100xx1xx1100000001000100xx1xx11;
	cfgsin18[0:44] =  45 'b00000001000100xx1xx1100000001000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00001000100xx1xx1100000001000100xx1xx10100000;
	cfgsin20[0:44] =  45 'b01000100xx1xx1100000001000100xx1xx10100000010;
	cfgsin21[0:44] =  45 'b00100xx1xx1100000001000100xx1xx11000000010001;
	cfgsin22[0:44] =  45 'b00xx1xx1100000001000100xx1xx1010000001000100x;
	cfgsin23[0:44] =  45 'bx1xx1100000001000100xx1xx1010000001000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1100000001000100xx1xx1010000001000100xx1xx11;
	cfgsin30[0:44] =  45 'b00000001000100xx1xx1100000001000100xx1xx11000;
	cfgsin29[0:44] =  45 'b00001000100xx1xx1010000001000100xx1xx11000000;
	cfgsin28[0:44] =  45 'b01000100xx1xx1010000001000100xx1xx11000000010;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000001000100xx1xx11000000010001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1100000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xxxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat415; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000100000100xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000010000100000001x000;
	cfgsin17[0:44] =  45 'b00010000001000100x00000010000001000001x000000;
	cfgsin18[0:44] =  45 'b10000001000100x00000010000001000001x000000100;
	cfgsin19[0:44] =  45 'b00001000100x00000010000001000001x000000100000;
	cfgsin20[0:44] =  45 'b01000100x00000010000001000001x000000100000010;
	cfgsin21[0:44] =  45 'b00100x00000010000001000001x000000100000010001;
	cfgsin22[0:44] =  45 'b00x00000010000001000001x00000010000001000100x;
	cfgsin23[0:44] =  45 'b00000010000001000001x00000010000001000100x000;
// BR
	cfgsin31[0:44] =  45 'b00010000001000001x00000010000001000100x000000;
	cfgsin30[0:44] =  45 'b10000001000001x00000010000001000100x000000100;
	cfgsin29[0:44] =  45 'b00001000001x00000010000001000100x000000100000;
	cfgsin28[0:44] =  45 'b01000001x00000010000001000100x000000100000010;
	cfgsin27[0:44] =  45 'b00001x00000010000001000100x000000100000010000;
	cfgsin26[0:44] =  45 'b01x00000100000100000100x00000100000100000010x;
	cfgsin25[0:44] =  45 'b00000010000100000100x00000010000100000001x000;
	cfgsin24[0:44] =  45 'bxx00010000100000100x0000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat414; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000100000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000001000001xx0000001000001000001xx00000;
	cfgsin18[0:44] =  45 'b01000001000001xx0000001000001000010xx00000010;
	cfgsin19[0:44] =  45 'b00001000001xx0000001000001000001xx00000010000;
	cfgsin20[0:44] =  45 'b01000001xx0000001000001000100xx00000010000010;
	cfgsin21[0:44] =  45 'b00001xx0000001000001000100xx00000010000010000;
	cfgsin22[0:44] =  45 'b01xx0000001000001000001xx0000001000001000001x;
	cfgsin23[0:44] =  45 'bx0000001000001000100xx0000001000001000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000001000001xx0000001000001000001xx00000;
	cfgsin30[0:44] =  45 'b01000001000001xx0000001000001000001xx00000010;
	cfgsin29[0:44] =  45 'b00001000010xx0000001000001000001xx00000010000;
	cfgsin28[0:44] =  45 'b01000001xx0000001000001000001xx00000010000010;
	cfgsin27[0:44] =  45 'b00100xx0000001000001000001xx00000010000010001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000010xx0000001000100000010x;
	cfgsin25[0:44] =  45 'bx0000001000100000001xx0000001000100000001xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000001xx000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat413; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000100000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx00001000100000001x000;
	cfgsin17[0:44] =  45 'b00001000001000100x00000001000001000001x000000;
	cfgsin18[0:44] =  45 'b01000001000100x00000001000001000001x000000010;
	cfgsin19[0:44] =  45 'b00001000100x00000001000001000001x000000010000;
	cfgsin20[0:44] =  45 'b01000100x00000001000001000001x000000010000010;
	cfgsin21[0:44] =  45 'b00100x00000001000001000001x000000010000010001;
	cfgsin22[0:44] =  45 'b00x00000001000001000001x00000001000001000100x;
	cfgsin23[0:44] =  45 'b00000001000001000001x00000001000001000100x000;
// BR
	cfgsin31[0:44] =  45 'b00001000001000001x00000001000001000100x000000;
	cfgsin30[0:44] =  45 'b01000001000001x00000001000001000100x000000010;
	cfgsin29[0:44] =  45 'b00001000001x00000001000001000100x000000010000;
	cfgsin28[0:44] =  45 'b01000001x00000001000001000100x000000010000010;
	cfgsin27[0:44] =  45 'b00001x00000001000001000100x000000010000010000;
	cfgsin26[0:44] =  45 'b01x00000001000100000100x00000001000100000010x;
	cfgsin25[0:44] =  45 'b00000001000100000100x00000001000100000001x000;
	cfgsin24[0:44] =  45 'bxx00001000100000100x000xxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat412; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000100000100xx1000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000001000100000100x000;
	cfgsin17[0:44] =  45 'b00001000001000100x00000001000001000100x000000;
	cfgsin18[0:44] =  45 'b01000001000100x00000001000001000100x000000010;
	cfgsin19[0:44] =  45 'b00001000100x00000001000001000100x000000010000;
	cfgsin20[0:44] =  45 'b01000100x00000001000001000100x000000010000010;
	cfgsin21[0:44] =  45 'b00100x00000001000001000100x000000010000010001;
	cfgsin22[0:44] =  45 'b00x00000001000001000100x00000001000001000100x;
	cfgsin23[0:44] =  45 'b00000001000001000100x00000001000001000100x000;
// BR
	cfgsin31[0:44] =  45 'b00001000001000100x00000001000001000100x000000;
	cfgsin30[0:44] =  45 'b01000001000100x00000001000001000100x000000010;
	cfgsin29[0:44] =  45 'b00001000100x00000001000001000100x000000010000;
	cfgsin28[0:44] =  45 'b01000100x00000001000001000100x000000010000010;
	cfgsin27[0:44] =  45 'b00100x00000001000001000100x000000010000010001;
	cfgsin26[0:44] =  45 'b00x00000001000100000100x00000001000100000100x;
	cfgsin25[0:44] =  45 'b00000001000100000100x00000001000100000100x000;
	cfgsin24[0:44] =  45 'bxx00001000100000100x0000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat411; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000100000100xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx1000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx1000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx1000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx1000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx1000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx1000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx1000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx00001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000001000100xx0000001000001000100xx00000;
	cfgsin18[0:44] =  45 'b01000001000100xx0000001000001000100xx00000010;
	cfgsin19[0:44] =  45 'b00001000100xx0000001000001000100xx00000010000;
	cfgsin20[0:44] =  45 'b01000100xx0000001000001000100xx00000010000010;
	cfgsin21[0:44] =  45 'b00100xx0000001000001000100xx00000010000010001;
	cfgsin22[0:44] =  45 'b00xx0000001000001000100xx0000001000001000100x;
	cfgsin23[0:44] =  45 'bx0000001000001000100xx0000001000001000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000001000100xx0000001000001000100xx00000;
	cfgsin30[0:44] =  45 'b01000001000100xx0000001000001000100xx00000010;
	cfgsin29[0:44] =  45 'b00001000100xx0000001000001000100xx00000010000;
	cfgsin28[0:44] =  45 'b01000100xx0000001000001000100xx00000010000010;
	cfgsin27[0:44] =  45 'b00100xx0000001000001000100xx00000010000010001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx00xxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat410; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx1001000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1001000100000100xx0xx1001000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b01000100000100xx0xx1001000100000100xx1xx10010;
	cfgsin3[0:44] =  45 'b00100000100xx0xx1001000100000100xx1xx10010001;
	cfgsin4[0:44] =  45 'b00000100xx0xx1001000100000100xx1xx10010001000;
	cfgsin5[0:44] =  45 'b00100xx0xx1001000100000100xx1xx10010001000001;
	cfgsin6[0:44] =  45 'b00xx0xx1001000100000100xx1xx1001000100000100x;
	cfgsin7[0:44] =  45 'bx0xx1001000100000100xx1xx1001000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000001x01xx;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000001000100000001xx00;
	cfgsin17[0:44] =  45 'b00001000001000001xx0000001000001000001xx00000;
	cfgsin18[0:44] =  45 'b01000001000001xx0000001000001000010xx00000010;
	cfgsin19[0:44] =  45 'b00001000001xx0000001000001000001xx00000010000;
	cfgsin20[0:44] =  45 'b01000001xx0000001000001000100xx00000010000010;
	cfgsin21[0:44] =  45 'b00001xx0000001000001000001xx00000010000010000;
	cfgsin22[0:44] =  45 'b01xx0000001000001000001xx0000001000001000001x;
	cfgsin23[0:44] =  45 'bx0000001000001000100xx0000001000001000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000001000001xx0000001000001000001xx00000;
	cfgsin30[0:44] =  45 'b01000001000001xx0000001000001000001xx00000010;
	cfgsin29[0:44] =  45 'b00001000010xx0000001000001000001xx00000010000;
	cfgsin28[0:44] =  45 'b01000001xx0000001000001000001xx00000010000010;
	cfgsin27[0:44] =  45 'b00100xx0000001000001000001xx00000010000010000;
	cfgsin26[0:44] =  45 'b01xx0000001000100000010xx0000001000100000010x;
	cfgsin25[0:44] =  45 'bx0000001000100000001xx0000001000100000001xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000001xx000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat409; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000100x00xx1010000100000100x01x;
	cfgsin1[0:44] =  45 'bx1010000100000100x01xx1010000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx10100;
	cfgsin3[0:44] =  45 'b00100000100x01xx1010000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1010000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin6[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin7[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin14[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin13[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin12[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin11[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin10[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0010000100000001x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxxx1001000100000001x01x;
	cfgsin17[0:44] =  45 'bx1001000100000001x01xx1001000100000001x01xx10;
	cfgsin18[0:44] =  45 'b01000100000100x01xx1001000100000001x01xx10010;
	cfgsin19[0:44] =  45 'b00100000100x01xx1001000100000001x01xx10010001;
	cfgsin20[0:44] =  45 'b00000001x01xx1001000100000001x01xx10010001000;
	cfgsin21[0:44] =  45 'b00100x01xx1001000100000001x01xx10010001000001;
	cfgsin22[0:44] =  45 'b00x01xx1001000100000001x01xx1001000100000100x;
	cfgsin23[0:44] =  45 'b01xx1001000100000001x01xx1001000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1001000100000001x01xx1001000100000001x01xx10;
	cfgsin30[0:44] =  45 'b01000100000001x01xx1001000100000100x01xx10010;
	cfgsin29[0:44] =  45 'b00100000001x01xx1001000100000100x01xx10010001;
	cfgsin28[0:44] =  45 'b00000001x01xx1001000100000001x01xx10010001000;
	cfgsin27[0:44] =  45 'b00001x01xx1001000100000100x01xx10010001000000;
	cfgsin26[0:44] =  45 'b01x01xx1001000100000100x01xx1001000100000010x;
	cfgsin25[0:44] =  45 'b01xx1001000100000100x01xx1001000100000001x01x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100x01xxxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat408; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx1000010000100000100x000;
	cfgsin1[0:44] =  45 'b00010000100000100x00000010000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000000100;
	cfgsin3[0:44] =  45 'b00100000100x00000010000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000010000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin14[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin12[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin11[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin10[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00001010000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx0x1100000100000001x11x;
	cfgsin17[0:44] =  45 'bx1100000100000001x01xx1100000100000001x11xx11;
	cfgsin18[0:44] =  45 'b00000100000001x01xx1100000000001001x11xx11000;
	cfgsin19[0:44] =  45 'b00100000001x01xx1100000100000001x11xx11000001;
	cfgsin20[0:44] =  45 'b00000001x01xx1100000100000001x11xx11000001000;
	cfgsin21[0:44] =  45 'b00001x01xx1100000100000001x11xx11000001000000;
	cfgsin22[0:44] =  45 'b01x01xx1100000100000001x11xx1100000100000001x;
	cfgsin23[0:44] =  45 'b01xx1100000100000001x11xx1100000100000001x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000001x11xx1100000100000001x01xx11;
	cfgsin30[0:44] =  45 'b00000100000001x11xx1100000100000001x01xx11000;
	cfgsin29[0:44] =  45 'b00000001001x11xx1100000100000001x01xx11000001;
	cfgsin28[0:44] =  45 'b00000001x11xx1100000100000001x01xx11000001000;
	cfgsin27[0:44] =  45 'b00001x11xx1100000100000001x01xx11000001000000;
	cfgsin26[0:44] =  45 'b01x11xx1100000001000010x01xx1100000100000010x;
	cfgsin25[0:44] =  45 'b11xx1100000100000001x01xx1100000100000001x11x;
	cfgsin24[0:44] =  45 'bxxx1100000100000001x01x0xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat407; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx0000010000100000100x100;
	cfgsin1[0:44] =  45 'b00010000100000100x10000010000100000100x100001;
	cfgsin2[0:44] =  45 'b00000100000100x10000100000100000100x100000100;
	cfgsin3[0:44] =  45 'b00100000100x10000010000100000100x100001000001;
	cfgsin4[0:44] =  45 'b00000100x10000010000100000100x100001000001000;
	cfgsin5[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin6[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin7[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin14[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin13[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin12[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin11[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin10[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx00100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000000001100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00000001100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000010000001000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx00xxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat406; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000100000100000001xx00;
	cfgsin17[0:44] =  45 'b00010000100000001xx0000010000100000001xx00000;
	cfgsin18[0:44] =  45 'b10000100000001xx0000010000100000001xx00000100;
	cfgsin19[0:44] =  45 'b00100000001xx0000010000100000001xx00000100001;
	cfgsin20[0:44] =  45 'b00000001xx0000010000100000001xx00000100001000;
	cfgsin21[0:44] =  45 'b00001xx0000010000100000001xx00000100001000000;
	cfgsin22[0:44] =  45 'b01xx0000010000100000001xx0000010000100000001x;
	cfgsin23[0:44] =  45 'bx0000010000100000001xx0000010000100000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000100000001xx0000010000100000001xx00000;
	cfgsin30[0:44] =  45 'b10000100000001xx0000010000100000001xx00000100;
	cfgsin29[0:44] =  45 'b00100000001xx0000010000100000001xx00000100001;
	cfgsin28[0:44] =  45 'b00000001xx0000010000100000001xx00000100001000;
	cfgsin27[0:44] =  45 'b00001xx0000010000100000001xx00000100001000000;
	cfgsin26[0:44] =  45 'b01xx0000100000001000010xx0000100000100000010x;
	cfgsin25[0:44] =  45 'bx0000100000100000001xx0000100000100000001xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000001xx000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat405; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx00100000000001100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000000001100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000000001100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000000001100xx00000100001;
	cfgsin20[0:44] =  45 'b00000100xx0000010000000001100xx00000100001000;
	cfgsin21[0:44] =  45 'b00100xx0000010000000001100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000000001100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000000001100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000000001100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000000001100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00000001100xx0000100000100000100xx00001000000;
	cfgsin28[0:44] =  45 'b00001100xx0000100000100000100xx00001000000000;
	cfgsin27[0:44] =  45 'b01100xx0000100000100000100xx00001000000000011;
	cfgsin26[0:44] =  45 'b00xx0000100000001000100xx0000100000100000010x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000000001100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx00xxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat404; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000100000100000001x100;
	cfgsin17[0:44] =  45 'b00100000100000001x00000100000100000001x100001;
	cfgsin18[0:44] =  45 'b00000100000001x00000100000100000001x100001000;
	cfgsin19[0:44] =  45 'b00100000001x00000100000100000001x100000100001;
	cfgsin20[0:44] =  45 'b00000001x00000010000100000001x100000100001000;
	cfgsin21[0:44] =  45 'b00001x00000010000100000001x100001000001000000;
	cfgsin22[0:44] =  45 'b01x00000100000100000001x10000100000100000001x;
	cfgsin23[0:44] =  45 'b00000100000100000001x10000100000100000001x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000001x10000100000100000001x000001;
	cfgsin30[0:44] =  45 'b00000100000001x10000100000100000001x000001000;
	cfgsin29[0:44] =  45 'b00100000001x10000100000100000001x000001000001;
	cfgsin28[0:44] =  45 'b00000001x10000100000100000001x000001000001000;
	cfgsin27[0:44] =  45 'b00001x10000100000100000001x000001000001000000;
	cfgsin26[0:44] =  45 'b01x10000100000001000010x00000100000100000010x;
	cfgsin25[0:44] =  45 'b10000100000100000001x00000100000100000001x100;
	cfgsin24[0:44] =  45 'bxx00100000100000001x0000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat403; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100001000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin6[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000100000100x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100x00000001000100000100x000000;
	cfgsin14[0:44] =  45 'b01000100000100x00000001000100000100x000000010;
	cfgsin13[0:44] =  45 'b00100000100x00000001000100000100x000000010001;
	cfgsin12[0:44] =  45 'b00000100x00000001000100000100x000000010001000;
	cfgsin11[0:44] =  45 'b00100x00000001000100000100x000000010001000001;
	cfgsin10[0:44] =  45 'b00x00000001000100000100x00000001000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000100000100000010x000;
	cfgsin17[0:44] =  45 'b00100000100000001x00000100000100000010x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000010x000001000;
	cfgsin19[0:44] =  45 'b00100000001x00000100000100000010x000000100001;
	cfgsin20[0:44] =  45 'b00000001x00000010000100000010x000000100001000;
	cfgsin21[0:44] =  45 'b00001x00000010000100000010x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000010x00000100000100000001x;
	cfgsin23[0:44] =  45 'b00000100000100000010x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000010x00000100000100000001x000001;
	cfgsin30[0:44] =  45 'b00000100000010x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000010x00000100000100000001x000001000001;
	cfgsin28[0:44] =  45 'b00000010x00000100000100000001x000001000001000;
	cfgsin27[0:44] =  45 'b00010x00000100000100000001x000001000001000000;
	cfgsin26[0:44] =  45 'b10x00000100000001000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000001x00000100000100000010x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x0000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat402; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin7[0:44] =  45 'b01xx1010000100000100x01xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000100x01xx1001000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000100x01xx1001000100000100x01xx10010001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000100000100x01xx10010001000001;
	cfgsin10[0:44] =  45 'b00x01xx1001000100000100x01xx1001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx000100001000000010000;
	cfgsin17[0:44] =  45 'b001000001000000010000001000001000000010000001;
	cfgsin18[0:44] =  45 'b000000000010010000001000001000000010000001000;
	cfgsin19[0:44] =  45 'b001000000010000001000001000000010000000100001;
	cfgsin20[0:44] =  45 'b000000010000000100001000000010000000100001000;
	cfgsin21[0:44] =  45 'b000010000000100001000000010000001000000000010;
	cfgsin22[0:44] =  45 'b010000001000001000000010000001000001000000010;
	cfgsin23[0:44] =  45 'b000001000001000000010000001000001000000010000;
// BR
	cfgsin31[0:44] =  45 'b001000001000000010000001000001000000010000001;
	cfgsin30[0:44] =  45 'b000001000000010000001000000000010010000001000;
	cfgsin29[0:44] =  45 'b001000000010000001000001000000010000001000001;
	cfgsin28[0:44] =  45 'b000000010000001000001000000010000001000001000;
	cfgsin27[0:44] =  45 'b000010000001000001000000010000001000001000000;
	cfgsin26[0:44] =  45 'b010000001000000010000100000001000001000000100;
	cfgsin25[0:44] =  45 'b000001000001000000010000001000001000000010000;
	cfgsin24[0:44] =  45 'bxx001000001000000010000xxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat401; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000100xx0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin7[0:44] =  45 'b01xx1010000100000100x01xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000100x01xx1001000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000100x01xx1001000100000100x01xx10010001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000100000100x01xx10010001000001;
	cfgsin10[0:44] =  45 'b00x01xx1001000100000100x01xx1001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx0x10100001000001000x1x;
	cfgsin17[0:44] =  45 'bx11000001000001000x1xx11000001000001000x1xx11;
	cfgsin18[0:44] =  45 'b000001000001000x1xx11000001000001000x1xx11000;
	cfgsin19[0:44] =  45 'b001000001000x1xx11000001000001000x1xx10100001;
	cfgsin20[0:44] =  45 'b000001000x1xx10100001000001000x1xx10100001000;
	cfgsin21[0:44] =  45 'b001000x1xx10100001000001000x1xx11000001000001;
	cfgsin22[0:44] =  45 'b000x1xx11000001000001000x1xx11000001000001000;
	cfgsin23[0:44] =  45 'bx1xx11000001000001000x1xx11000001000001000x1x;
// BR
	cfgsin31[0:44] =  45 'bx11000001000001000x1xx11000001000001000x1xx11;
	cfgsin30[0:44] =  45 'b000001000001000x1xx11000001000001000x1xx11000;
	cfgsin29[0:44] =  45 'b001000001000x1xx11000001000001000x1xx11000001;
	cfgsin28[0:44] =  45 'b000001000x1xx11000001000001000x1xx11000001000;
	cfgsin27[0:44] =  45 'b001000x1xx11000001000001000x1xx11000001000001;
	cfgsin26[0:44] =  45 'b000x1xx11000001000001000x1xx10001001000001000;
	cfgsin25[0:44] =  45 'bx1xx11000001000001000x1xx11000001000001000x1x;
	cfgsin24[0:44] =  45 'bxxx11000001000001000x1x0xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat400; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxxx1001000100000001xx1x;
	cfgsin17[0:44] =  45 'bx1100000100000001xx1xx1100000100000001xx1xx11;
	cfgsin18[0:44] =  45 'b00000100000001xx1xx1100000100000001xx1xx11000;
	cfgsin19[0:44] =  45 'b00100000001xx1xx1100000100000001xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000001xx1xx1010000100000001xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00001xx1xx1010000100000001xx1xx11000001000000;
	cfgsin22[0:44] =  45 'b01xx1xx1100000100000001xx1xx1100000100000001x;
	cfgsin23[0:44] =  45 'bx1xx1100000100000001xx1xx1100000100000001xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000001xx1xx1100000100000001xx1xx11;
	cfgsin30[0:44] =  45 'b00000100000001xx1xx1100000100000001xx1xx11000;
	cfgsin29[0:44] =  45 'b00100000001xx1xx1100000100000001xx1xx11000001;
	cfgsin28[0:44] =  45 'b00000001xx1xx1100000100000001xx1xx11000001000;
	cfgsin27[0:44] =  45 'b00001xx1xx1100000100000001xx1xx11000001000000;
	cfgsin26[0:44] =  45 'b01xx1xx1100000100000010xx1xx1100000100000010x;
	cfgsin25[0:44] =  45 'bx1xx1000100100000001xx1xx1000100100000001xx1x;
	cfgsin24[0:44] =  45 'bxxx1000100100000001xx1xxxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat399; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000100000100000001xx00;
	cfgsin17[0:44] =  45 'b00100000100000001xx0000100000100000001xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000001xx00001000;
	cfgsin19[0:44] =  45 'b00100000001xx0000100000100000001xx00001000001;
	cfgsin20[0:44] =  45 'b00000001xx0000100000100000001xx00001000001000;
	cfgsin21[0:44] =  45 'b00001xx0000100000100000001xx00001000001000000;
	cfgsin22[0:44] =  45 'b01xx0000100000100000001xx0000100000100000001x;
	cfgsin23[0:44] =  45 'bx0000100000100000001xx0000100000100000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000001xx0000100000100000001xx00001;
	cfgsin30[0:44] =  45 'b00000100000001xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000001xx0000100000100000001xx00001000001;
	cfgsin28[0:44] =  45 'b00000001xx0000100000100000001xx00001000001000;
	cfgsin27[0:44] =  45 'b00001xx0000100000100000001xx00001000001000000;
	cfgsin26[0:44] =  45 'b01xx0000100000100000010xx0000000001100000010x;
	cfgsin25[0:44] =  45 'bx0000100000100000001xx0000100000100000001xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000001xx000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat398; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin1[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin2[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin3[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin4[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin5[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin6[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin7[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin14[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin13[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin12[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin11[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin10[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000100000100000001x000;
	cfgsin17[0:44] =  45 'b00100000100000001x00000100000100000001x000001;
	cfgsin18[0:44] =  45 'b00000100000001x00000100000100000001x000001000;
	cfgsin19[0:44] =  45 'b00100000001x00000100000100000001x000001000001;
	cfgsin20[0:44] =  45 'b00000001x00000100000100000001x000001000001000;
	cfgsin21[0:44] =  45 'b00001x00000100000100000001x000001000001000000;
	cfgsin22[0:44] =  45 'b01x00000100000100000001x00000100000100000001x;
	cfgsin23[0:44] =  45 'b00000100000100000001x00000100000100000001x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000001x00000100000100000001x000001;
	cfgsin30[0:44] =  45 'b00000100000001x00000100000100000001x000001000;
	cfgsin29[0:44] =  45 'b00100000001x00000100000100000001x000001000001;
	cfgsin28[0:44] =  45 'b00000001x00000100000100000001x000001000001000;
	cfgsin27[0:44] =  45 'b00001x00000100000100000001x000001000001000000;
	cfgsin26[0:44] =  45 'b01x00000100000100000010x00000100000100000010x;
	cfgsin25[0:44] =  45 'b00000100000100000001x00000100000100000001x000;
	cfgsin24[0:44] =  45 'bxx00100000100000001x0000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat397; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin1[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin2[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin3[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin4[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin5[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin6[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin7[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin14[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin13[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin12[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin11[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin10[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000100000xx100x001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx00100000xx001x001xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x001xx0000100000xx001x001xx00001;
	cfgsin18[0:44] =  45 'b00000xx010x001xx0000100000xx001x001xx00001000;
	cfgsin19[0:44] =  45 'b00xx100x001xx0000100000xx001x001xx0000100000x;
	cfgsin20[0:44] =  45 'bx100x001xx0000100000xx001x001xx0000100000xx10;
	cfgsin21[0:44] =  45 'b0x001xx0000100000xx001x001xx0000100000xx100x0;
	cfgsin22[0:44] =  45 'b01xx0000100000xx001x001xx0000100000xx100x001x;
	cfgsin23[0:44] =  45 'bx0000100000xx001x001xx0000100000xx100x001xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx001x001xx0000100000xx100x001xx00001;
	cfgsin30[0:44] =  45 'b00000xx001x001xx0000100000xx010x001xx00001000;
	cfgsin29[0:44] =  45 'b00xx001x001xx0000100000xx100x001xx0000100000x;
	cfgsin28[0:44] =  45 'bx001x001xx0000100000xx100x001xx0000100000xx00;
	cfgsin27[0:44] =  45 'b1x001xx0000100000xx100x001xx0000100000xx001x0;
	cfgsin26[0:44] =  45 'b01xx0000100000xx010x010xx0000100000xx010x010x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x001xx0000100000xx001x001xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x001xx00xxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat396; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000100000xx001x001x000;
	cfgsin17[0:44] =  45 'b00100000xx001x001x00000100000xx001x001x000001;
	cfgsin18[0:44] =  45 'b00000xx001x001x00000100000xx100x001x000001000;
	cfgsin19[0:44] =  45 'b00xx100x001x00000100000xx100x001x00000100000x;
	cfgsin20[0:44] =  45 'bx100x001x00000100000xx100x001x00000100000xx00;
	cfgsin21[0:44] =  45 'b1x001x00000100000xx001x001x00000100000xx010x0;
	cfgsin22[0:44] =  45 'b01x00000100000xx100x001x00000100000xx100x001x;
	cfgsin23[0:44] =  45 'b00000100000xx001x001x00000100000xx001x001x000;
// BR
	cfgsin31[0:44] =  45 'b00100000xx001x001x00000100000xx001x001x000001;
	cfgsin30[0:44] =  45 'b00000xx001x001x00000100000xx001x001x000001000;
	cfgsin29[0:44] =  45 'b00xx100x001x00000100000xx100x001x00000100000x;
	cfgsin28[0:44] =  45 'bx100x001x00000100000xx100x001x00000100000xx10;
	cfgsin27[0:44] =  45 'b0x001x00000100000xx001x001x00000100000xx001x0;
	cfgsin26[0:44] =  45 'b01x00000000001xx100x010x00000100000xx100x010x;
	cfgsin25[0:44] =  45 'b00000100000xx100x001x00000100000xx001x001x000;
	cfgsin24[0:44] =  45 'bxx00100000xx001x001x0000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat395; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000xxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat394; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x0110001101x;
	cfgsin1[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin2[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin3[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin4[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin5[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin6[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin7[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// TR
	cfgsin15[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin14[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin13[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin12[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin11[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin10[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat393; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin1[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin2[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin3[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin4[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin5[0:44] =  45 'b0000110000010x0110x011000110000010x0110x01100;
	cfgsin6[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin7[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
// TR
	cfgsin15[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin14[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin13[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin12[0:44] =  45 'bx101000101000010x0110x011000110000010x0110x01;
	cfgsin11[0:44] =  45 'b1000110000010x0110x101000101000010x0110x01100;
	cfgsin10[0:44] =  45 'b0110000010x0110x101000101000010x0110x00100010;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxx00000000x0000xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin19[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin20[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin21[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin22[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin23[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// BR
	cfgsin31[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin30[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin29[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin28[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin27[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin26[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xxxxxxxx00000000x0000xx;
end
endtask
task get_wl_pat392; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000001000001;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin19[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin20[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin21[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin22[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin23[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
// BR
	cfgsin31[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin30[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin29[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin28[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin27[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin26[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin25[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat391; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b100000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000010000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000010000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000100000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000010000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000000000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat390; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx00100001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx0010000100000100xx1xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000100000100xx1xx0010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx0010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx1010000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat389; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000001000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat388; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000001000100x01000010000100000100xx00;
	cfgsin1[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin2[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin3[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin5[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin6[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin7[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin14[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin13[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin12[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin10[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin9[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0100000100000100xx1xx;
end
endtask
task get_wl_pat387; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x01000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin19[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin20[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin21[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin22[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin23[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin30[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin29[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin28[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin27[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin26[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin25[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000100000100x0000;
end
endtask
task get_wl_pat386; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000001000100000001xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000100000001xx000;
end
endtask
task get_wl_pat385; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00001000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000100000100x000x;
end
endtask
task get_wl_pat384; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000001000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000100000100x0000;
end
endtask
task get_wl_pat383; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx1000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00010000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000100000100xx00x;
end
endtask
task get_wl_pat382; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx1001000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000001xx1000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000100000001xx000;
end
endtask
task get_wl_pat381; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000001x00xx1010000100000100x01x;
	cfgsin1[0:44] =  45 'bx1010000100000100x01xx1010000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx10100;
	cfgsin3[0:44] =  45 'b00100000100x01xx1010000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1010000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin6[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin7[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin14[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin13[0:44] =  45 'b00100000100x01xx1100000100000100x01xx01000001;
	cfgsin12[0:44] =  45 'b00000100x01xx0100000100000100x01xx11000001000;
	cfgsin11[0:44] =  45 'b00100x01xx0100000100000100x01xx01000001000001;
	cfgsin10[0:44] =  45 'b00x01xx0100000100000100x01xx0100000100000100x;
	cfgsin9[0:44] =  45 'b01xx0100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0010000100000001x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100x00xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000010x01xx;
end
endtask
task get_wl_pat380; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx1000010000100000100x000;
	cfgsin1[0:44] =  45 'b00010000100000100x00000010000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000000100;
	cfgsin3[0:44] =  45 'b00100000100x00000010000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000010000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin14[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000100000100000100x000011000001;
	cfgsin12[0:44] =  45 'b00000100x00001100000100000100x000001000001000;
	cfgsin11[0:44] =  45 'b00100x00001100000100000100x000011000001000001;
	cfgsin10[0:44] =  45 'b00x00001100000100000100x00001100000100000100x;
	cfgsin9[0:44] =  45 'b00001100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00001010000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000001x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin20[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin21[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
end
endtask
task get_wl_pat379; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000001xx0000010000100000100x100;
	cfgsin1[0:44] =  45 'b00010000100000100x10000010000100000100x100001;
	cfgsin2[0:44] =  45 'b00000100000100x10000100000100000100x100000100;
	cfgsin3[0:44] =  45 'b00100000100x10000010000100000100x100001000001;
	cfgsin4[0:44] =  45 'b00000100x10000010000100000100x100001000001000;
	cfgsin5[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin6[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin7[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin14[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin13[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin12[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin11[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin10[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin20[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin21[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001100000000001100xx00x;
end
endtask
task get_wl_pat378; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin18[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin19[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin20[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin21[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin22[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin23[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin30[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin29[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin28[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin27[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin26[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin25[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000100000100000001xx000;
end
endtask
task get_wl_pat377; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat376; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat375; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000001001000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin6[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000100000100x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100x00000001000100000100x000000;
	cfgsin14[0:44] =  45 'b01000100000100x00000001000100000100x000000010;
	cfgsin13[0:44] =  45 'b00100000100x00000001000100000100x000000010001;
	cfgsin12[0:44] =  45 'b00000100x00000001000100000100x000000010001000;
	cfgsin11[0:44] =  45 'b00100x00000001000100000100x000000010001000001;
	cfgsin10[0:44] =  45 'b00x00000001000100000100x00000001000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000000001001x0000;
end
endtask
task get_wl_pat374; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin7[0:44] =  45 'b01xx1010000100000100x01xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000100x01xx1001000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000100x01xx1001000100000100x01xx10010001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000100000100x01xx10010001000001;
	cfgsin10[0:44] =  45 'b00x01xx1001000100000100x01xx1001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000001001000010000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
end
endtask
task get_wl_pat373; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000001xx0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin7[0:44] =  45 'b01xx1010000100000100x01xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000100x01xx1001000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000100x01xx1001000100000100x01xx10010001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000100000100x01xx10010001000001;
	cfgsin10[0:44] =  45 'b00x01xx1001000100000100x01xx1001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x0xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
end
endtask
task get_wl_pat372; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1000010100000001xx0xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0000010100000001xx1xx;
end
endtask
task get_wl_pat371; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000010xx000;
end
endtask
task get_wl_pat370; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin1[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin2[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin3[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin4[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin5[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin6[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin7[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin14[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin13[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin12[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin11[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin10[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat369; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx001x001x00000100000xx100x1000x00;
	cfgsin1[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin2[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin3[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin4[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin5[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin6[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin7[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin14[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin13[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin12[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin11[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin10[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000100000xx100x001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin19[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin20[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin21[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin22[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin23[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin30[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin29[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin28[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin27[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin26[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
end
endtask
task get_wl_pat368; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000010000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x001x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin18[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin19[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin20[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin21[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin22[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin23[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin30[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin29[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin28[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin27[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin26[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin25[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx100x001x0000;
end
endtask
task get_wl_pat367; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat366; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x0110001101x;
	cfgsin1[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin2[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin3[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin4[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin5[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin6[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin7[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// TR
	cfgsin15[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin14[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin13[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin12[0:44] =  45 'bx1010001101xx110x0110x0110001101xx110x0110x01;
	cfgsin11[0:44] =  45 'b10001101xx110x0110x0110001011xx110x0110x01100;
	cfgsin10[0:44] =  45 'b01101xx110x0110x1010001011xx110x0110x10100011;
	cfgsin9[0:44] =  45 'b01xx110x0110x0110010101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x0001010011xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat365; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x010000110000010x0110x01100011000;
	cfgsin1[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin2[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin3[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin4[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin5[0:44] =  45 'b1000110000010x0110x101000101000010x0110x01100;
	cfgsin6[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin7[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
// TR
	cfgsin15[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin14[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin13[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin12[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin11[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin10[0:44] =  45 'b0110000010x0110x001000100000010x0110x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x00100010000;
	cfgsin8[0:44] =  45 'bxx0010x0110x001000100000101x1001x10010100100x;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin19[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin20[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin21[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin22[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin23[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// BR
	cfgsin31[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin30[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin29[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin28[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin27[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin26[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
end
endtask
task get_wl_pat364; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000001000001000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000001000001000;
	cfgsin8[0:44] =  45 'bxx000000000001000001000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin19[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin20[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin21[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin22[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin23[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
// BR
	cfgsin31[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin30[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin29[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin28[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin27[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin26[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin25[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat363; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000100000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000010000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000010000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000010000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000001000000000;
	cfgsin12[0:44] =  45 'b000000000000010000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000010000000000000000;
	cfgsin10[0:44] =  45 'b000000010000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000010100000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000000000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat362; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx0010000100000100xx1xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1010000100000100xx1xx0010000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx0010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1010000100000100xx0xx10100001;
	cfgsin12[0:44] =  45 'b00000100xx1xx0010000100000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx0xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx0010000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx0xx0010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0001000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat361; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000001000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat360; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000001000100x01000010000100000100xx00;
	cfgsin1[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin2[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin3[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin5[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin6[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin7[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin14[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin13[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin12[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin10[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin9[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001001000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat359; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x01000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin19[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin20[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin21[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin22[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin23[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin30[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin29[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin28[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin27[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin26[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin25[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000100000100x0000;
end
endtask
task get_wl_pat358; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000001000100000001xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000100000001xx000;
end
endtask
task get_wl_pat357; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00001000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000100000100x000x;
end
endtask
task get_wl_pat356; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000001000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000100000100x0000;
end
endtask
task get_wl_pat355; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx1000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00010000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000100000100xx00x;
end
endtask
task get_wl_pat354; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx1001000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000001xx1000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000100000001xx000;
end
endtask
task get_wl_pat353; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000001x00xx1010000100000100x01x;
	cfgsin1[0:44] =  45 'bx1010000100000100x01xx1010000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx10100;
	cfgsin3[0:44] =  45 'b00100000100x01xx1010000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1010000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx0100000100000100x01xx01000001000001;
	cfgsin6[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin7[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin14[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin13[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin12[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin11[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin10[0:44] =  45 'b00x01xx0100000100000100x01xx0100000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx0100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx0100000100000100x01xx0010000100000001x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100x00xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat352; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx1000010000100000100x000;
	cfgsin1[0:44] =  45 'b00010000100000100x00000010000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000000100;
	cfgsin3[0:44] =  45 'b00100000100x00000010000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000010000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00001100000100000100x000011000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin14[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin12[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin11[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin10[0:44] =  45 'b00x00010100000100000100x00001100000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00010100000100000100x000;
	cfgsin8[0:44] =  45 'bxx01100000100000100x00000010000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000001x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin20[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin21[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
end
endtask
task get_wl_pat351; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000001xx0000010000100000100x100;
	cfgsin1[0:44] =  45 'b00010000100000100x10000010000100000100x100001;
	cfgsin2[0:44] =  45 'b00000100000100x10000100000100000100x100000100;
	cfgsin3[0:44] =  45 'b00100000100x10000010000100000100x100001000001;
	cfgsin4[0:44] =  45 'b00000100x10000010000100000100x100001000001000;
	cfgsin5[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin6[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin7[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin14[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin13[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin12[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin11[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin10[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin20[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin21[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
end
endtask
task get_wl_pat350; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00010100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin18[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin19[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin20[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin21[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin22[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin23[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin30[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin29[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin28[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin27[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin26[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin25[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000100000100000001xx000;
end
endtask
task get_wl_pat349; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000000100100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat348; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000000001100x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat347; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000001001000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin6[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000100000100x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100x00000001000100000100x000000;
	cfgsin14[0:44] =  45 'b01000100000100x00000001000100000100x000000010;
	cfgsin13[0:44] =  45 'b00100000100x00000001000100000100x000000010001;
	cfgsin12[0:44] =  45 'b00000100x00000001000100000100x000000010001000;
	cfgsin11[0:44] =  45 'b00100x00000001000100000100x000000010001000001;
	cfgsin10[0:44] =  45 'b00x00000001000100000100x00000001000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000000100000010000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat346; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin7[0:44] =  45 'b01xx1010000100000100x01xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000100x01xx1001000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000100x01xx1001000100000100x01xx10010001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000100000100x01xx10010001000001;
	cfgsin10[0:44] =  45 'b00x01xx1001000100000100x01xx1001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000001001000010000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
end
endtask
task get_wl_pat345; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000001xx0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin7[0:44] =  45 'b01xx1010000100000100x01xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000100x01xx1001000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000100x01xx1001000100000100x01xx10010001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000100000100x01xx10010001000001;
	cfgsin10[0:44] =  45 'b00x01xx1001000100000100x01xx1001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x0xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
end
endtask
task get_wl_pat344; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000100xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1000010100000001xx0xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0000010100000001xx1xx;
end
endtask
task get_wl_pat343; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000100000100000010x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat342; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx001x001xx0000100000xx100x100xx00;
	cfgsin1[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin2[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin3[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin4[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin5[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin6[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin7[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin14[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin13[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin12[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin11[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin10[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000100000xx001x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat341; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx001x001x00000100000xx100x1000x00;
	cfgsin1[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin2[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin3[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin4[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin5[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin6[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin7[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin14[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin13[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin12[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin11[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin10[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000100000xx001x010x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin19[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin20[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin21[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin22[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin23[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin30[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin29[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin28[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin27[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin26[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
end
endtask
task get_wl_pat340; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x001x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin18[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin19[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin20[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin21[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin22[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin23[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin30[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin29[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin28[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin27[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin26[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin25[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx100x001x0000;
end
endtask
task get_wl_pat339; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000100000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000001000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat338; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x0110001101x;
	cfgsin1[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin2[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin3[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin4[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin5[0:44] =  45 'b10001101xx110x0110x1010001101xx110x0110x01100;
	cfgsin6[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin7[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// TR
	cfgsin15[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin14[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin13[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin12[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin11[0:44] =  45 'b10001101xx110x0110x0110001001xx110x0110x01100;
	cfgsin10[0:44] =  45 'b01101xx110x0110x1010001101xx110x0110x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x1010001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x1010001011xx001x1001x1001010001xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat337; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin1[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin2[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin3[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin4[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin5[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin6[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin7[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
// TR
	cfgsin15[0:44] =  45 'b0010x0110x101000101000010x0110x00100010000001;
	cfgsin14[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin13[0:44] =  45 'b110x011000110000010x0110x001000110000010x0110;
	cfgsin12[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin11[0:44] =  45 'b1000110000010x0110x011000110000010x0110x00100;
	cfgsin10[0:44] =  45 'b0100000010x0110x101000101000010x0110x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x101000101000101x1001x10000100100x;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin19[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin20[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin21[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin22[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin23[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// BR
	cfgsin31[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin30[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin29[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin28[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin27[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin26[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
end
endtask
task get_wl_pat336; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000001000001000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000010000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000001000;
	cfgsin10[0:44] =  45 'b001000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000100000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin19[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin20[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin21[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin22[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin23[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
// BR
	cfgsin31[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin30[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin29[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin28[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin27[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin26[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin25[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat335; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000001000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000010000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000001;
// TR
	cfgsin15[0:44] =  45 'b010000000000000000010100000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000010010000000000000000000010000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000010010000000000000000000010000000000000;
	cfgsin10[0:44] =  45 'b000000010000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b010010000000000000000000010000000000000000000;
	cfgsin8[0:44] =  45 'bxx0100000000000000000000000000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat334; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1010000100000100xx0xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1010000100000100xx0xx1010000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx0x;
// TR
	cfgsin15[0:44] =  45 'bx0010000100000100xx0xx0010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx0xx0010000100000100xx1xx00100001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx0xx0010000100000100xx1xx00100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx0010000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx0xx0010000100000100xx1xx0010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx0010000100000100xx1xx0010000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat333; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000001000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat332; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000001000100x01000010000100000100xx00;
	cfgsin1[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin2[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin3[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin5[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin6[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin7[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin14[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin13[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin12[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin10[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin9[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000001000100xx0xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
end
endtask
task get_wl_pat331; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000001000100x01000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin19[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin20[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin21[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin22[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin23[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin30[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin29[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin28[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin27[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin26[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin25[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
end
endtask
task get_wl_pat330; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000001000001000001xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
end
endtask
task get_wl_pat329; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00001000001000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
end
endtask
task get_wl_pat328; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100xx1000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000001000001000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
end
endtask
task get_wl_pat327; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx1000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx1000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx1000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx1000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx10000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00010000001000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
end
endtask
task get_wl_pat326; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx1001000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1001000100000100xx0xx1001000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b01000100000100xx0xx1001000100000100xx1xx10010;
	cfgsin3[0:44] =  45 'b00100000100xx0xx1001000100000100xx1xx10010001;
	cfgsin4[0:44] =  45 'b00000100xx0xx1001000100000100xx1xx10010001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1001000100000100xx0xx10010001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000010000001000001xx1000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
end
endtask
task get_wl_pat325; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000001x00xx1010000100000100x01x;
	cfgsin1[0:44] =  45 'bx1010000100000100x01xx1010000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx10100;
	cfgsin3[0:44] =  45 'b00100000100x01xx1010000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1010000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin6[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin7[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx0100000100000100x01xx0100000100000100x01xx01;
	cfgsin14[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin13[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin12[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin11[0:44] =  45 'b00100x01xx1100000100000100x01xx01000001000001;
	cfgsin10[0:44] =  45 'b00x01xx1100000100000100x01xx0100000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx0100000100000100x01xx1010000100000001x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100x00xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat324; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx1000010000100000100x000;
	cfgsin1[0:44] =  45 'b00010000100000100x00000010000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000000100;
	cfgsin3[0:44] =  45 'b00100000100x00000010000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000010000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b01100000100000100x00001100000100000100x000011;
	cfgsin14[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin12[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin11[0:44] =  45 'b00100x00000100000100000100x000101000001000001;
	cfgsin10[0:44] =  45 'b00x00000100000100000100x00001100000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx01100000100000100x00000010000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000001x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin20[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin21[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
end
endtask
task get_wl_pat323; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000001xx0000010000100000100x100;
	cfgsin1[0:44] =  45 'b00010000100000100x10000010000100000100x100001;
	cfgsin2[0:44] =  45 'b00000100000100x10000100000100000100x100000100;
	cfgsin3[0:44] =  45 'b00100000100x10000010000100000100x100001000001;
	cfgsin4[0:44] =  45 'b00000100x10000010000100000100x100001000001000;
	cfgsin5[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin6[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin7[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin14[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin13[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin12[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin11[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin10[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin20[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin21[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
end
endtask
task get_wl_pat322; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000001xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin18[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin19[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin20[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin21[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin22[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin23[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin30[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin29[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin28[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin27[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin26[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin25[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat321; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat320; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat319; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000001001000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin6[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000100000100x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100x00000001000100000100x000000;
	cfgsin14[0:44] =  45 'b01000100000100x00000001000100000100x000000010;
	cfgsin13[0:44] =  45 'b00100000100x00000001000100000100x000000010001;
	cfgsin12[0:44] =  45 'b00000100x00000001000100000100x000000010001000;
	cfgsin11[0:44] =  45 'b00100x00000001000100000100x000000010001000001;
	cfgsin10[0:44] =  45 'b00x00000001000100000100x00000001000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100x0000;
end
endtask
task get_wl_pat318; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin7[0:44] =  45 'b01xx1010000100000100x01xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000100x01xx1001000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000100x01xx1001000100000100x01xx10010001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000100000100x01xx10010001000001;
	cfgsin10[0:44] =  45 'b00x01xx1001000100000100x01xx1001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000001001000010000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
end
endtask
task get_wl_pat317; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000001xx0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin7[0:44] =  45 'b01xx1010000100000100x01xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000100x01xx1001000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000100x01xx1001000100000100x01xx10010001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000100000100x01xx10010001000001;
	cfgsin10[0:44] =  45 'b00x01xx1001000100000100x01xx1001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x0xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
end
endtask
task get_wl_pat316; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000001xx0xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
end
endtask
task get_wl_pat315; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat314; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx001x001xx0000100000xx100x100xx00;
	cfgsin1[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin2[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin3[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin4[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin5[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin6[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin7[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin14[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin13[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin12[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin11[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin10[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat313; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx001x001x00000100000xx100x1000x00;
	cfgsin1[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin2[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin3[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin4[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin5[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin6[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin7[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin14[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin13[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin12[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin11[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin10[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000100000xx001x001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin19[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin20[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin21[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin22[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin23[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin30[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin29[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin28[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin27[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin26[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx001x001xx00x;
end
endtask
task get_wl_pat312; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000100000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x001x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin18[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin19[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin20[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin21[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin22[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin23[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin30[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin29[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin28[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin27[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin26[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin25[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx001x001x0000;
end
endtask
task get_wl_pat311; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000010000000000000100000010000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000001000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000010000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat310; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x0110001101x;
	cfgsin1[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin2[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin3[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin4[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin5[0:44] =  45 'b10001100xx110x0110x0100001100xx110x0110x01100;
	cfgsin6[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin7[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// TR
	cfgsin15[0:44] =  45 'bx110x0110x0010001101xx110x0110x1010001101xx11;
	cfgsin14[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001011xx110x0;
	cfgsin13[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin12[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin11[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x10100;
	cfgsin10[0:44] =  45 'b01101xx110x0110x1010001011xx110x0110x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0010x0110010101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001011xx001x1001x0001110001xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat309; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x011000100000010x0110x01100011000;
	cfgsin1[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin2[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin3[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin4[0:44] =  45 'bx011000110000010x0110x001000110000010x0110x01;
	cfgsin5[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin6[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin7[0:44] =  45 'b0000010x0110x011000110000010x0110x00100011000;
// TR
	cfgsin15[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin14[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin13[0:44] =  45 'b110x011000110000010x0110x001000110000001x1010;
	cfgsin12[0:44] =  45 'bx011001010000010x0110x011000110000010x0110x01;
	cfgsin11[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin10[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x011000110000001x1000x10000100100x;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin19[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin20[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin21[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin22[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin23[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// BR
	cfgsin31[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin30[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin29[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin28[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin27[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin26[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
end
endtask
task get_wl_pat308; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000010000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000010000100000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin19[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin20[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin21[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin22[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin23[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
// BR
	cfgsin31[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin30[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin29[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin28[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin27[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin26[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin25[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat307; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000001001000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000001000;
	cfgsin2[0:44] =  45 'b000000000000000010000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000010000000000;
	cfgsin4[0:44] =  45 'b000000000010000000000001000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000010000000000000000;
	cfgsin6[0:44] =  45 'b000010000000000000000000001000000000000000000;
	cfgsin7[0:44] =  45 'b001000000000000000000000000000000001000000010;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000010000000000000000000010000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000010000000;
	cfgsin13[0:44] =  45 'b000000000000010000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000010000000000000;
	cfgsin11[0:44] =  45 'b000000010000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b010000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000010000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat306; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx0xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx0xx1010000100000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1010000100000100xx0xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx0xx1010000100000100xx1xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000100000100xx0xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx0xx1010000100000100xx0xx1010000100000100x;
	cfgsin7[0:44] =  45 'bx0xx1010000100000100xx1xx1010000100000100xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100xx0xx1010000100000100xx0xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx0xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx0xx1010000100000100xx1xx10100001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1010000100000100xx0xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx0xx1010000100000100xx1xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx0xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000010;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat305; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000001000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx0010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0100000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000001000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx00;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx00100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat304; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000001000100x01000010000100000100xx00;
	cfgsin1[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin2[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin3[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin5[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin6[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin7[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin14[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin13[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin12[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin10[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin9[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001010000100000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000001000100xx0xx1100000001000010xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0100000001000100xx1xx;
end
endtask
task get_wl_pat303; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000001001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0010001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000100000010xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000001000100x01000010000001000001xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin19[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin20[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin21[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin22[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin23[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin30[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin29[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin28[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin27[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin26[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin25[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
end
endtask
task get_wl_pat302; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000001001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000100000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000001000001000001xx0000001000001000001xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
end
endtask
task get_wl_pat301; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000001001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000100000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00001000010000100x00000001000001000001xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
end
endtask
task get_wl_pat300; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100xx1000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000001001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000001000001000100x00010001000001000001xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
end
endtask
task get_wl_pat299; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx1000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx1000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx1000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx1000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx1000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx1000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000001001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0001001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001001000100000010xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00010000001000100xx0000001000001000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
end
endtask
task get_wl_pat298; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx1001000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1001000100000100xx0xx1001000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b01000100000100xx0xx1001000100000100xx1xx10010;
	cfgsin3[0:44] =  45 'b00100000100xx0xx1001000100000100xx1xx10010001;
	cfgsin4[0:44] =  45 'b00000100xx0xx1001000100000100xx1xx10010001000;
	cfgsin5[0:44] =  45 'b00100xx0xx1001000100000100xx1xx10010001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1001000100000100xx0xx1001000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10001001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin11[0:44] =  45 'b00100xx1xx0001000100000100xx1xx10010001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000010000001000001xx1000001000001000010xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
end
endtask
task get_wl_pat297; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000001x00xx1010000100000100x01x;
	cfgsin1[0:44] =  45 'bx1010000100000100x01xx1010000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx10100;
	cfgsin3[0:44] =  45 'b00100000100x01xx1010000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1010000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin6[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin7[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin14[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin13[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin12[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin11[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin10[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000001000010x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100x00xx0001000000001001xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat296; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx1000010000100000100x000;
	cfgsin1[0:44] =  45 'b00010000100000100x00000010000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000000100;
	cfgsin3[0:44] =  45 'b00100000100x00000010000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000010000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin14[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin12[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin11[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin10[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00001010000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000010x01xx1100000010000001x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin20[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin21[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
end
endtask
task get_wl_pat295; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000001xx0000010000100000100x100;
	cfgsin1[0:44] =  45 'b00010000100000100x10000010000100000100x100001;
	cfgsin2[0:44] =  45 'b00000100000100x10000100000100000100x100000100;
	cfgsin3[0:44] =  45 'b00100000100x10000010000100000100x100001000001;
	cfgsin4[0:44] =  45 'b00000100x10000010000100000100x100001000001000;
	cfgsin5[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin6[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin7[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin14[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin13[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin12[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin11[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin10[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000001000010xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000001x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin20[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin21[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
end
endtask
task get_wl_pat294; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000010000010000001xx0000010000010000001x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin18[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin19[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin20[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin21[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin22[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin23[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin30[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin29[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin28[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin27[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin26[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin25[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat293; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000001000010x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00001000100000100xx0000100000010000001x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat292; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000001000010x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000000100100000001x00000100000010000001x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat291; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000001001000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin6[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000100000100x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100x00000001000100000100x000000;
	cfgsin14[0:44] =  45 'b01000100000100x00000001000100000100x000000010;
	cfgsin13[0:44] =  45 'b00100000100x00000001000100000100x000000010001;
	cfgsin12[0:44] =  45 'b00000100x00000001000100000100x000000010001000;
	cfgsin11[0:44] =  45 'b00100x00000001000100000100x000000010001000001;
	cfgsin10[0:44] =  45 'b00x00000001000100000100x00000001000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000000000010100000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000010000001x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat290; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin7[0:44] =  45 'b01xx1010000100000100x01xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000100x01xx1001000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000100x01xx1001000100000100x01xx10010001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000100000100x01xx10010001000001;
	cfgsin10[0:44] =  45 'b00x01xx1001000100000100x01xx1001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000001001000010000000001001x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000011000000000010010000x;
end
endtask
task get_wl_pat289; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000001xx0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin7[0:44] =  45 'b01xx1010000100000100x01xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000100x01xx1001000100000100x01xx00010001;
	cfgsin12[0:44] =  45 'b00000100x01xx0001000100000100x01xx10010001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000100000100x01xx10010001000001;
	cfgsin10[0:44] =  45 'b00x01xx1001000100000100x01xx1001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000010xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x0xx1100000100000001x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
end
endtask
task get_wl_pat288; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001xx1000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00011000001;
	cfgsin12[0:44] =  45 'b00000100xx0001100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000010xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000001xx0xx1010000100000001x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
end
endtask
task get_wl_pat287; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000100000100000010x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx1000100000100000001xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat286; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx001x001xx0000100000xx100x100xx00;
	cfgsin1[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin2[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin3[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin4[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin5[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin6[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin7[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin14[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin13[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin12[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin11[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin10[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000100000xx001x010xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001x00000100000100000001xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat285; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx100x001x00000100000xx100x1000x00;
	cfgsin1[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin2[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin3[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin4[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin5[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin6[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin7[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin14[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin13[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin12[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin11[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin10[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000001000xx100x010x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx010x001xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin19[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin20[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin21[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin22[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin23[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin30[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin29[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin28[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin27[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin26[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
end
endtask
task get_wl_pat284; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x001x00000100000xx001x0101x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin18[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin19[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin20[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin21[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin22[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin23[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin30[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin29[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin28[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin27[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin26[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin25[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx010x001x0000;
end
endtask
task get_wl_pat283; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000010000000000000100000010000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000010000000;
	cfgsin12[0:44] =  45 'b000000000000010000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000001000100000000010000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat282; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x0110001101x;
	cfgsin1[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin2[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin3[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin4[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin5[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin6[0:44] =  45 'b01100xx110x0110x0100001100xx110x0110x01100011;
	cfgsin7[0:44] =  45 'b01xx110x0110x0110001011xx110x0110x0110001101x;
// TR
	cfgsin15[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin14[0:44] =  45 'b0x0101x0110001101xx110x0110x0110001101xx110x0;
	cfgsin13[0:44] =  45 'b110x0110001101xx110x0110x1010001101xx001x1010;
	cfgsin12[0:44] =  45 'bx0110001101xx010x0110x0110001101xx110x0110x01;
	cfgsin11[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin10[0:44] =  45 'b01101xx110x0110x0110001011xx110x0110x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001001xx001x1001x0001010011xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat281; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x000000110000010x0110x01100011000;
	cfgsin1[0:44] =  45 'b0010x0110x011000110000010x0110x00100011000001;
	cfgsin2[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin3[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin4[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin5[0:44] =  45 'b1000010000010x0110x011000110000010x0101x01010;
	cfgsin6[0:44] =  45 'b0110000010x0101x000100110000010x0110x00100011;
	cfgsin7[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
// TR
	cfgsin15[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin14[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin13[0:44] =  45 'b110x011000110000010x0110x001000110000010x0110;
	cfgsin12[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin11[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin10[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x011000110000000x1000x10000100100x;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin19[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin20[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin21[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin22[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin23[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// BR
	cfgsin31[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin30[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin29[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin28[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin27[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin26[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
end
endtask
task get_wl_pat280; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000010000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000001000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000001000010000100000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin19[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin20[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin21[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin22[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin23[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
// BR
	cfgsin31[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin30[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin29[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin28[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin27[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin26[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin25[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat279; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000001100000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000001000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000001000000001000000000001000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000010000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000010000000000001000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000010000000000000000000010000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b010000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat278; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10001000010001;
	cfgsin6[0:44] =  45 'b00xx1xx1010000001000100xx0xx1010000001000100x;
	cfgsin7[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100xx0xx1010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx0xx1010000100000100xx0xx10100001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx0xx1010000100000100xx0xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx0xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat277; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000001000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1010000100000100xx0xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000100000100xx1xx11000000010000;
	cfgsin6[0:44] =  45 'b01xx1xx1001000001000001xx0xx1010000001000001x;
	cfgsin7[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx0010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx1xx00100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0000100001000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat276; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000001000100x01000010000100000100xx00;
	cfgsin1[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin2[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin3[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin5[0:44] =  45 'b00100xx0000010000100000100xx00000010000010000;
	cfgsin6[0:44] =  45 'b01xx0000100000001000001xx1000100000001000001x;
	cfgsin7[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b01010000100000100xx0000010000100000100xx00000;
	cfgsin14[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin13[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin12[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000100000100xx00010100001000001;
	cfgsin10[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin9[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001100000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
end
endtask
task get_wl_pat275; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx10000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010000010000;
	cfgsin6[0:44] =  45 'b01xx0000001000001000001xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x00000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin19[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin20[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin21[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin22[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin23[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin30[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin29[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin28[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin27[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin26[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin25[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
end
endtask
task get_wl_pat274; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000000100010000;
	cfgsin6[0:44] =  45 'b01xx0000001000001000001xx0000000010001000001x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000100000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000001000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
end
endtask
task get_wl_pat273; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010000010001;
	cfgsin6[0:44] =  45 'b00xx0000001000001000100xx0000001000001000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000010000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000001000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
end
endtask
task get_wl_pat272; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100xx1000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010000010001;
	cfgsin6[0:44] =  45 'b00xx0000001000001000100xx0000001000001000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00100;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0001001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx10;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000001000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
end
endtask
task get_wl_pat271; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx1000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx1000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx10000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00011000000010000;
	cfgsin6[0:44] =  45 'b01xx0010001000001000001xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001000001100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00010000001000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
end
endtask
task get_wl_pat270; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx1001000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1001000100000100xx0xx1001000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b01000100000100xx0xx1001000100000100xx1xx10010;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1001000100000100xx0xx10010001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1001000100000100xx1xx00000011000000;
	cfgsin6[0:44] =  45 'b01xx1xx0001000100000001xx1xx1100000100000001x;
	cfgsin7[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx00;
	cfgsin14[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1001000100000100xx1xx0001000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx0x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000010000001000100xx1000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
end
endtask
task get_wl_pat269; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000001x00xx1010000100000100x01x;
	cfgsin1[0:44] =  45 'bx1010000100000100x01xx1010000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx10100;
	cfgsin3[0:44] =  45 'b00100000100x01xx1010000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1010000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000000;
	cfgsin6[0:44] =  45 'b10x10xx1001000100000001x10xx1100000100000010x;
	cfgsin7[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin14[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin13[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin12[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin11[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin10[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0000001100000001x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100x00xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat268; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx1000010000100000100x000;
	cfgsin1[0:44] =  45 'b00010000100000100x00000010000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000000100;
	cfgsin3[0:44] =  45 'b00100000100x00000010000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000010000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000100000001x01000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin14[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin12[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin11[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin10[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000001x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin20[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin21[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
end
endtask
task get_wl_pat267; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000001xx0000010000100000100x100;
	cfgsin1[0:44] =  45 'b00010000100000100x10000010000100000100x100001;
	cfgsin2[0:44] =  45 'b00000100000100x10000100000100000100x100000100;
	cfgsin3[0:44] =  45 'b00100000100x10000010000100000100x100001000001;
	cfgsin4[0:44] =  45 'b00000100x10000010000100000100x100001000001000;
	cfgsin5[0:44] =  45 'b00100x10000100000100000100x100000100000000100;
	cfgsin6[0:44] =  45 'b01x10000010000100000001x10000010000000010001x;
	cfgsin7[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin14[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin13[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin12[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin11[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin10[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin20[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin21[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
end
endtask
task get_wl_pat266; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010001000001;
	cfgsin6[0:44] =  45 'b00x11000000100100000001x00000100000100000001x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000000001000100100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin18[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin19[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin20[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin21[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin22[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin23[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin30[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin29[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin28[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin27[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin26[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin25[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat265; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010000001000;
	cfgsin6[0:44] =  45 'b01x00000000100000001001x00001000001010000001x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000010x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat264; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010001000000;
	cfgsin6[0:44] =  45 'b01x00000001000100000001x00000100000100000001x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000000001100x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat263; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000001001000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000011000000000010;
	cfgsin6[0:44] =  45 'b01x00100010000100000001x01000100000100000001x;
	cfgsin7[0:44] =  45 'b00000010000100000100x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100x00000001000100000100x000000;
	cfgsin14[0:44] =  45 'b01000100000100x00000001000100000100x000000010;
	cfgsin13[0:44] =  45 'b00100000100x00000001000100000100x000000010001;
	cfgsin12[0:44] =  45 'b00000100x00000001000100000100x000000010001000;
	cfgsin11[0:44] =  45 'b00100x00000001000100000100x000000010001000001;
	cfgsin10[0:44] =  45 'b00x00000001000100000100x00000001000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000000010001000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat262; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx00100000100001;
	cfgsin6[0:44] =  45 'b00x00xx1010000100000100x00xx0010000010000010x;
	cfgsin7[0:44] =  45 'b01xx1010000100000100x01xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000100x01xx1001000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000100x01xx1001000100000100x01xx10010001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000100000100x01xx10010001000001;
	cfgsin10[0:44] =  45 'b00x01xx1001000100000100x01xx1001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000000100x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000001000000010000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
end
endtask
task get_wl_pat261; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000001xx0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1100000100000100x00xx11000001000;
	cfgsin5[0:44] =  45 'b00100x00xx1010000100000100x01xx10100000001000;
	cfgsin6[0:44] =  45 'b10x00xx1010000001000010x00xx1010000000001100x;
	cfgsin7[0:44] =  45 'b01xx1010000100000100x01xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000100x01xx1001000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000100x01xx1001000100000100x01xx10010001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000100000100x01xx10010001000001;
	cfgsin10[0:44] =  45 'b00x01xx1001000100000100x01xx1001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x1xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
end
endtask
task get_wl_pat260; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000100000100xx10001000001000;
	cfgsin5[0:44] =  45 'b00100xx1000100000100000100xx00000001000100000;
	cfgsin6[0:44] =  45 'b01xx0000100000100000001xx1000010000010000001x;
	cfgsin7[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000001xx0xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
end
endtask
task get_wl_pat259; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00000000011000000;
	cfgsin6[0:44] =  45 'b01xx0000010000100000001xx0000000100100000001x;
	cfgsin7[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000001000100000010x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat258; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx001x001xx0000100000xx100x100xx00;
	cfgsin1[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin2[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin3[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin4[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin5[0:44] =  45 'b0x100xx0000100000xx100x100xx0000010000xx001x0;
	cfgsin6[0:44] =  45 'b01xx1000100000xx100x001xx0000010000xx001x001x;
	cfgsin7[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin14[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin13[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin12[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin11[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin10[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000100000xx001x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat257; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx001x001x00000100000xx100x1000x00;
	cfgsin1[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin2[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin3[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin4[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin5[0:44] =  45 'b0x1000x0000100000xx100x1000x0000010000xx001x0;
	cfgsin6[0:44] =  45 'b101x0000000001xx001x1001x0000000001xx001x1001;
	cfgsin7[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin14[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin13[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin12[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin11[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin10[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000000001xx010x100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin19[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin20[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin21[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin22[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin23[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin30[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin29[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin28[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin27[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin26[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
end
endtask
task get_wl_pat256; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000100000000000001000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000001000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000001000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000100000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x001x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin18[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin19[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin20[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin21[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin22[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin23[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin30[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin29[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin28[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin27[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin26[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin25[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx001x001x0000;
end
endtask
task get_wl_pat255; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000010000000000000100000010000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000101100000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000010000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat254; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x0110001101x;
	cfgsin1[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin2[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin3[0:44] =  45 'b110x0110001100xx110x0110x0100001100xx110x0110;
	cfgsin4[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin5[0:44] =  45 'b10001101xx110x0110x0100001101xx110x0010x01100;
	cfgsin6[0:44] =  45 'b10101xx110x0000x0010010101xx110x0010x01100011;
	cfgsin7[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// TR
	cfgsin15[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin14[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin13[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin12[0:44] =  45 'bx0110010001xx110x0110x0110001101xx110x0110x01;
	cfgsin11[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin10[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0010x0110001011xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x0001010011xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat253; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00xx00xxx00xxx00xx00x00xx00xxx10xxx00xx00x;
	cfgsin1[0:44] =  45 'b00xx00xxx10xxx10xx10x00xx00xxx10xxx10xx10x00x;
	cfgsin2[0:44] =  45 'bx00xxx00xxx00xx10x00xx00xxx00xxx00xx10x00xx00;
	cfgsin3[0:44] =  45 'bxxx10xxx10xx10x00xx00xxx10xxx10xx10x00xx00xxx;
	cfgsin4[0:44] =  45 'b00xxx00xx10x00xx00xxx10xxx10xx10x00xx00xxx00x;
	cfgsin5[0:44] =  45 'bxx00xx10x10xx00xxx00xxx00xx10x10xx10xxx00xxx0;
	cfgsin6[0:44] =  45 'b0xx10x10xx10xxx00xxx00xx10x10xx00xxx00xxx00xx;
	cfgsin7[0:44] =  45 'b10x10xx00xxx00xxx00xx10x10xx10xxx00xxx00xx10x;
// TR
	cfgsin15[0:44] =  45 'b10xx10xxx00xxx10xx00x10xx10xxx00xxx10xx00x10x;
	cfgsin14[0:44] =  45 'bx10xxx00xxx10xx00x10xx10xxx00xxx10xx00x10xx10;
	cfgsin13[0:44] =  45 'bxxx00xxx10xx00x10xx10xxx00xxx10xx00x10xx10xxx;
	cfgsin12[0:44] =  45 'b00xxx10xx00x10xx10xxx00xxx10xx00x10xx10xxx00x;
	cfgsin11[0:44] =  45 'bxx10xx00x10xx10xxx00xxx10xx00x10xx10xxx00xxx1;
	cfgsin10[0:44] =  45 'b0xx00x10xx10xxx00xxx10xx00x10xx10xxx00xxx10xx;
	cfgsin9[0:44] =  45 'b00x00xx00xxx00xxx00xx00x00xx00xxx00xxx00xx00x;
	cfgsin8[0:44] =  45 'bxx00xx00xxx00xxx00xx00x00xx00xxx10xxx00xx00xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin19[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin20[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin21[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin22[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin23[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// BR
	cfgsin31[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin30[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin29[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin28[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin27[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin26[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
end
endtask
task get_wl_pat252; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x010000010000010x0110x01100011000;
	cfgsin1[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin2[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin3[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin4[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x10;
	cfgsin5[0:44] =  45 'b1000101000010x0110x011000110000010x0100x01100;
	cfgsin6[0:44] =  45 'b1010000010x1010x001001010000001x0110x01100101;
	cfgsin7[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
// TR
	cfgsin15[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin14[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin13[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin12[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin11[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin10[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x011000110000001x1000x10000100100x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin19[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin20[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin21[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin22[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin23[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
// BR
	cfgsin31[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin30[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin29[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin28[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin27[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin26[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin25[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat251; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000001000010000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat250; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000100010001000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000001000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000010000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000010000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000010000000000000000000000010000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000001000000001000000;
	cfgsin6[0:44] =  45 'b000000000000000001000000010000000000000000000;
	cfgsin7[0:44] =  45 'b001000000000000000000010000000000000000000001;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000010000;
	cfgsin14[0:44] =  45 'b000000000000000010000000000000000000010000000;
	cfgsin13[0:44] =  45 'b000000000000001000000000000000000010000000000;
	cfgsin12[0:44] =  45 'b000000000010000000000000000000010000000000000;
	cfgsin11[0:44] =  45 'b000000010000000000000000000010000000000000000;
	cfgsin10[0:44] =  45 'b000010000000000000000000010000000000000000000;
	cfgsin9[0:44] =  45 'b010000000000000000000000000000000000000000010;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat249; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx0xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx0xx1010000100000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx0xx1010000100000100xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx0xx1010000100000100xx1xx00100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000100000100xx0xx11000000010001;
	cfgsin6[0:44] =  45 'b00xx1xx1010000100000100xx0xx1100000010000100x;
	cfgsin7[0:44] =  45 'bx0xx1000100001000100xx0xx1010000100000100xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx0xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx0xx1010000100000100xx0xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx0xx1010000100000100xx0xx10100001;
	cfgsin12[0:44] =  45 'b00000100xx0xx1010000100000100xx0xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx0xx1010000100000100xx0xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx0xx1010000100000100xx0xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx0xx1010000100000100xx1xx1010000100000100xx0x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0000010100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat248; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000001000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000100000100xx1xx00100000010000;
	cfgsin6[0:44] =  45 'b10xx1xx0010000100000010xx1xx0001000001000010x;
	cfgsin7[0:44] =  45 'bx1xx1100000001000010xx0xx1010000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx0010000100000100xx0xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx0xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
end
endtask
task get_wl_pat247; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000001000100x01000010000100000100xx00;
	cfgsin1[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin2[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin3[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin5[0:44] =  45 'b00100xx0000010000100000100xx00011000000010000;
	cfgsin6[0:44] =  45 'b10xx0001100000100000010xx0001010000010000010x;
	cfgsin7[0:44] =  45 'bx0000010000000001001xx0100010000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin14[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin13[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin12[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin10[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin9[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0010;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x00000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin19[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin20[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin21[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin22[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin23[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin30[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin29[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin28[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin27[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin26[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin25[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
end
endtask
task get_wl_pat246; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000000;
	cfgsin6[0:44] =  45 'b10xx0000000100010000010xx0000001000100000001x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0010001000100000100xx1000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000000100000001001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
end
endtask
task get_wl_pat245; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000000100000010;
	cfgsin6[0:44] =  45 'b10xx0000000100001000010xx0000000100000001100x;
	cfgsin7[0:44] =  45 'bx0000010000001000001xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000000010001000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
end
endtask
task get_wl_pat244; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000000100001001;
	cfgsin6[0:44] =  45 'b00xx0000001000000010100xx0000000100000100010x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000000010100x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
end
endtask
task get_wl_pat243; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00001000000010001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx1000100000000100100x;
	cfgsin7[0:44] =  45 'bx0000001000001000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx1000000001001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
end
endtask
task get_wl_pat242; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx1000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010000100000;
	cfgsin6[0:44] =  45 'b10xx0000001000100000010xx0000000100000001010x;
	cfgsin7[0:44] =  45 'bx0000100000001000001xx0000001000100000100xx10;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001000100000100001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
end
endtask
task get_wl_pat241; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx1001000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010000010000;
	cfgsin6[0:44] =  45 'b10xx1xx1001000001000010xx0xx1001000001000010x;
	cfgsin7[0:44] =  45 'bx1xx1001000010000010xx1xx1001000100000100xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx0xx0001000001000100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100x01xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat240; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000001x00xx1010000100000100x01x;
	cfgsin1[0:44] =  45 'bx1010000100000100x01xx1010000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx10100;
	cfgsin3[0:44] =  45 'b00100000100x01xx1010000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1010000100000100x01xx01000001000;
	cfgsin5[0:44] =  45 'b00100x01xx0100000100000100x01xx10000100010001;
	cfgsin6[0:44] =  45 'b00x10xx1001000001000001x00xx1001000001000100x;
	cfgsin7[0:44] =  45 'b01xx1001000100000010x00xx1100000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin14[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin13[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin12[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin11[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin10[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0010000001000001x01x0;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000100x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin20[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin21[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
end
endtask
task get_wl_pat239; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx1000010000100000100x000;
	cfgsin1[0:44] =  45 'b00010000100000100x00000010000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000000100;
	cfgsin3[0:44] =  45 'b00100000100x00000010000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000010000100000100x000011000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000100000010000;
	cfgsin6[0:44] =  45 'b01x00000010000001000100x00000010000001000001x;
	cfgsin7[0:44] =  45 'b10000100000000001100x00100100000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin14[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin12[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin11[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin10[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00001010000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin20[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin21[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
end
endtask
task get_wl_pat238; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000001xx0000010000100000100x100;
	cfgsin1[0:44] =  45 'b00010000100000100x10000010000100000100x100001;
	cfgsin2[0:44] =  45 'b00000100000100x10000100000100000100x100000100;
	cfgsin3[0:44] =  45 'b00100000100x10000010000100000100x100001000001;
	cfgsin4[0:44] =  45 'b00000100x10000010000100000100x100001000001000;
	cfgsin5[0:44] =  45 'b00100x10001100000100000100x100001000000010000;
	cfgsin6[0:44] =  45 'b10x10000000010001000010x10100000010001000010x;
	cfgsin7[0:44] =  45 'b10000010000000010001x10000100000100000100x100;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin14[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin13[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin12[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin11[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin10[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000010000010xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin18[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin19[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin20[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin21[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin22[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin23[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin30[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin29[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin28[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin27[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin26[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin25[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat237; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000000010010000;
	cfgsin6[0:44] =  45 'b01x01000000001100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000010000001x00000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat236; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010000010000;
	cfgsin6[0:44] =  45 'b10x00000001000001000001x00000100000001000100x;
	cfgsin7[0:44] =  45 'b10000001000000100010x10000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000000001001000010x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat235; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000000100010001;
	cfgsin6[0:44] =  45 'b00x00000001000001000100x00000100000001000001x;
	cfgsin7[0:44] =  45 'b00000100000100000010x10000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000001000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100x0000;
end
endtask
task get_wl_pat234; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000001001000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000000100000010000;
	cfgsin6[0:44] =  45 'b10x00000100000001000010x00000010000001000010x;
	cfgsin7[0:44] =  45 'b00100100000000001001x00100010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100x00000001000100000100x000000;
	cfgsin14[0:44] =  45 'b01000100000100x00000001000100000100x000000010;
	cfgsin13[0:44] =  45 'b00100000100x00000001000100000100x000000010001;
	cfgsin12[0:44] =  45 'b00000100x00000001000100000100x000000010001000;
	cfgsin11[0:44] =  45 'b00100x00000001000100000100x000000010001000001;
	cfgsin10[0:44] =  45 'b00x00000001000100000100x00000001000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x010011000000010001000001x;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100000000010000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
end
endtask
task get_wl_pat233; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1010000010000001x01xx1010000100000100x;
	cfgsin7[0:44] =  45 'b00xx1010000010000100x00xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000100x01xx1001000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000100x01xx1001000100000100x01xx10010001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000100000100x01xx10010001000001;
	cfgsin10[0:44] =  45 'b00x01xx1001000100000100x01xx1001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x00xx00001001000000100x0x0;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x1xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
end
endtask
task get_wl_pat232; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000001xx0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx01000000010000;
	cfgsin6[0:44] =  45 'b01x01xx0010000000001100x01xx0100000000100001x;
	cfgsin7[0:44] =  45 'b01xx0010000010000010x01xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000100x01xx1001000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000100x01xx1001000100000100x01xx10010001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000100000100x01xx10010001000001;
	cfgsin10[0:44] =  45 'b00x01xx1001000100000100x01xx1001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x00xx0100000100000001xx0xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100xx1xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
end
endtask
task get_wl_pat231; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00010010001000000;
	cfgsin6[0:44] =  45 'b10xx0010000001010000010xx0000000100100000010x;
	cfgsin7[0:44] =  45 'bx0000010000010000001xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx1001100000100000001xx100;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat230; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00000100000000100;
	cfgsin6[0:44] =  45 'b10xx0000001000100000010xx0000001000000010010x;
	cfgsin7[0:44] =  45 'bx0000001000100000001xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000000010100000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat229; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx001x001xx0000100000xx100x100xx00;
	cfgsin1[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin2[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin3[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin4[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin5[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx001x0;
	cfgsin6[0:44] =  45 'b10xx0000010000xx010x010xx0001100000xx100x001x;
	cfgsin7[0:44] =  45 'bx0010010000xx001x001xx0000100000xx100x100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin14[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin13[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin12[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin11[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin10[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000000100xx100x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin19[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin20[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin21[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin22[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin23[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin30[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin29[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin28[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin27[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin26[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
end
endtask
task get_wl_pat228; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin1[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin2[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin3[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin4[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin5[0:44] =  45 'b0x1000x0000100000xx100x1000x0000000001xx010x1;
	cfgsin6[0:44] =  45 'b001x0000000001xx010x1001x0000000001xx010x0011;
	cfgsin7[0:44] =  45 'bx0001010000xx001x0101x0000100000xx100x1000x00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin14[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin13[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin12[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin11[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin10[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000100000xx100x001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin18[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin19[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin20[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin21[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin22[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin23[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin30[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin29[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin28[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin27[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin26[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin25[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx001x001x0000;
end
endtask
task get_wl_pat227; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000001000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000100100000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000100001000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000100000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000001000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000010000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000010000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000001000x;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat226; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000010000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000001000000000000100000010;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000010000100000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat225; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x0110001101x;
	cfgsin1[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin2[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin3[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin4[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin5[0:44] =  45 'b10001011xx110x0110x0110001001xx110x1010x01100;
	cfgsin6[0:44] =  45 'b01011xx110x1010x0100000101xx001x1010x01010011;
	cfgsin7[0:44] =  45 'b01xx010x0100x0100001100xx110x0110x0100001100x;
// TR
	cfgsin15[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin14[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin13[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin12[0:44] =  45 'bx0100001101xx110x0110x0110001101xx110x0110x01;
	cfgsin11[0:44] =  45 'b10001101xx110x0110x0110010001xx110x0110x01100;
	cfgsin10[0:44] =  45 'b01101xx110x0110x0110000101xx110x0110x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0110x0110001011xx110x0110x0110000101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001011xx001x1001x0001000001xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin19[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin20[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin21[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin22[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin23[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// BR
	cfgsin31[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin30[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin29[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin28[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin27[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin26[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
end
endtask
task get_wl_pat224; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x000000110000010x0110x01100011000;
	cfgsin1[0:44] =  45 'b0010x0110x001000110000010x0110x01100011000001;
	cfgsin2[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin3[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin4[0:44] =  45 'bx011000110000010x0110x011000110000010x0101x01;
	cfgsin5[0:44] =  45 'b0100110000010x0110x001000101000010x0110x01100;
	cfgsin6[0:44] =  45 'b0110000010x1010x011000110000010x0100x00000011;
	cfgsin7[0:44] =  45 'b0000000x0110x011000110000010x0110x00100011000;
// TR
	cfgsin15[0:44] =  45 'b0010x0110x101000101000010x0110x01100011000001;
	cfgsin14[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin13[0:44] =  45 'b110x001000110000010x0110x011000110000010x0110;
	cfgsin12[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin11[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin10[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x001000100000010x0110x01010011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x001000100000000x1000x10010100100x;
// BL
	cfgsin16[0:44] =  45 'bxxx00xx00xxx00xxx00xx00x10xx00xxx00xxx00xx00x;
	cfgsin17[0:44] =  45 'b00xx00xxx00xxx00xx00x00xx00xxx00xxx00xx00x00x;
	cfgsin18[0:44] =  45 'bx00xxx00xxx00xx00x00xx00xxx00xxx00xx00x00xx00;
	cfgsin19[0:44] =  45 'bxxx00xxx00xx00x00xx00xxx00xxx00xx00x10xx10xxx;
	cfgsin20[0:44] =  45 'b00xxx00xx00x10xx10xxx00xxx00xx00x10xx10xxx00x;
	cfgsin21[0:44] =  45 'bxx00xx00x10xx10xxx00xxx00xx00x00xx00xxx00xxx0;
	cfgsin22[0:44] =  45 'b0xx00x00xx00xxx00xxx00xx00x00xx00xxx00xxx00xx;
	cfgsin23[0:44] =  45 'b00x00xx00xxx00xxx00xx00x00xx00xxx00xxx00xx00x;
// BR
	cfgsin31[0:44] =  45 'b00xx00xxx00xxx00xx00x00xx00xxx00xxx00xx00x00x;
	cfgsin30[0:44] =  45 'bx00xxx00xxx00xx00x00xx00xxx00xxx00xx00x00xx00;
	cfgsin29[0:44] =  45 'bxxx00xxx00xx00x00xx00xxx00xxx00xx00x00xx00xxx;
	cfgsin28[0:44] =  45 'b00xxx00xx00x00xx00xxx00xxx00xx00x00xx00xxx00x;
	cfgsin27[0:44] =  45 'bxx00xx00x00xx00xxx00xxx00xx00x00xx00xxx00xxx0;
	cfgsin26[0:44] =  45 'b0xx00x00xx00xxx00xxx00xx00x00xx00xxx00xxx00xx;
	cfgsin25[0:44] =  45 'b00x00xx00xxx00xxx00xx00x00xx00xxx00xxx00xx00x;
	cfgsin24[0:44] =  45 'bxx00xx00xxx00xxx00xx00x00xx00xxx00xxx00xx00xx;
end
endtask
task get_wl_pat223; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000001000000000010000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000010000100000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000010000000;
	cfgsin13[0:44] =  45 'b000010000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000001000001000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000001000001000000000010000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin19[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin20[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin21[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin22[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin23[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
// BR
	cfgsin31[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin30[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin29[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin28[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin27[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin26[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin25[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat222; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000001100000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000001000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000001000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000010000000000000;
	cfgsin5[0:44] =  45 'b000000000010000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000010000000000001000000;
	cfgsin7[0:44] =  45 'b010000100000000000000000010000000001000000010;
// TR
	cfgsin15[0:44] =  45 'b010000000000000000010000000000000000000010000;
	cfgsin14[0:44] =  45 'b000000000000000010010000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000010010000000000000000010000000000;
	cfgsin12[0:44] =  45 'b000000000001010000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000001010000000000000000010000000000000000;
	cfgsin10[0:44] =  45 'b000010010000000000000000010000000000000000000;
	cfgsin9[0:44] =  45 'b010010000000000000000010000000000000000000001;
	cfgsin8[0:44] =  45 'bxx0000000000000000000100110000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat221; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx1010000100000100xx0xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx11000000;
	cfgsin4[0:44] =  45 'b01000001xx1xx1010000100000100xx0xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx0xx0010000100000100xx1xx10010001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1010000001000100xx0xx1010000001000100x;
	cfgsin7[0:44] =  45 'bx0xx1010000001000100xx1xx0010000000010100xx0x;
// TR
	cfgsin15[0:44] =  45 'bx0010000100000100xx0xx1010000100000100xx0xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx0xx0010000100000100xx0xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx0xx0010000100000100xx0xx10100001;
	cfgsin12[0:44] =  45 'b00000100xx0xx0010000001000001xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx0xx0010000100000100xx0xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx0xx0010000100000100xx0xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx0xx0010000100000100xx0xx1010000100000100xx0x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx0xx0010000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000010000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat220; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100000;
	cfgsin4[0:44] =  45 'b01000001xx1xx1010000100000100xx1xx00100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10010001000001;
	cfgsin6[0:44] =  45 'b00xx0xx1000010001000001xx0xx1001000001000001x;
	cfgsin7[0:44] =  45 'bx0xx0100000001000001xx0xx0100000001000010xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx1xx0010000100000100xx1xx10100001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1100000001000001xx1xx00100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx0010000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx0010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0100000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100000;
	cfgsin20[0:44] =  45 'b01000001xx1xx1010000100000100xx1xx10100000000;
	cfgsin21[0:44] =  45 'b10100xx1xx1010000100000100xx0xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000001000001xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat219; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000100x01000010000100000100xx00;
	cfgsin1[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin2[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin3[0:44] =  45 'b00100000100xx0000010000100000100xx00000100000;
	cfgsin4[0:44] =  45 'b01000100xx0000010000100000100xx00010100001000;
	cfgsin5[0:44] =  45 'b00100xx0000010000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0100100000001000001xx0100100000100000001x;
	cfgsin7[0:44] =  45 'bx0101010000001000001xx1001010000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin14[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin13[0:44] =  45 'b00100000100xx0001010000100000100xx00000100001;
	cfgsin12[0:44] =  45 'b00000100xx0000000100100000100xx00010100001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin10[0:44] =  45 'b00xx0001010000100000100xx0000010000100000100x;
	cfgsin9[0:44] =  45 'bx0000010000100000100xx0001010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001000010100000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100000;
	cfgsin20[0:44] =  45 'b01000001xx1xx1010000100000100xx1xx11000001000;
	cfgsin21[0:44] =  45 'b00010xx1xx1100000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000001000001xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
end
endtask
task get_wl_pat218; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000100xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00001000000;
	cfgsin4[0:44] =  45 'b01000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000001000001xx0000001000001000010x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0000001000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000000100001000010xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000010xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x00000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin19[0:44] =  45 'b00100000100xx0000010000100000100xx00000100000;
	cfgsin20[0:44] =  45 'b01000100xx0000010000100000100xx00000100001000;
	cfgsin21[0:44] =  45 'b00001xx0000010000100000100xx00000100001000001;
	cfgsin22[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin23[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin30[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin29[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin28[0:44] =  45 'b00000100xx0000010000001000100xx00000100001000;
	cfgsin27[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin26[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin25[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
end
endtask
task get_wl_pat217; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00010000100000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00001000000;
	cfgsin4[0:44] =  45 'b01000001xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000001xx0000001000000010001x;
	cfgsin7[0:44] =  45 'bx0000001000010000001xx0000000010001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000001000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00001000000;
	cfgsin20[0:44] =  45 'b01000100xx0000001000100000100xx00000010000100;
	cfgsin21[0:44] =  45 'b00100xx0000001000010000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000001000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
end
endtask
task get_wl_pat216; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00001000000;
	cfgsin4[0:44] =  45 'b00001001xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000001000001xx0000010000000010001x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0000010000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000001000001xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00001000000;
	cfgsin20[0:44] =  45 'b01000001xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000001000001xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
end
endtask
task get_wl_pat215; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx1000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx10000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00001000000;
	cfgsin4[0:44] =  45 'b00001001xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000001000100xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0010001000001000100xx0000001000001000100xx10;
// TR
	cfgsin15[0:44] =  45 'b01001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000001000010xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001001000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00001000000;
	cfgsin20[0:44] =  45 'b01000001xx0000001000100000100xx00000100001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000000100100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000001000001xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
end
endtask
task get_wl_pat214; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx1000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx1000001000100000100xx00010010;
	cfgsin3[0:44] =  45 'b00100000100xx1000001000100000100xx00000001000;
	cfgsin4[0:44] =  45 'b00001001xx1000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx1000001000100000100xx00010010001000001;
	cfgsin6[0:44] =  45 'b00xx1000001000000001001xx0001100000001000010x;
	cfgsin7[0:44] =  45 'bx1000100000001000001xx0000001000001000010xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0001001000100000100xx10000;
	cfgsin14[0:44] =  45 'b01000100000100xx1000001000100000100xx10000010;
	cfgsin13[0:44] =  45 'b00100000100xx1000001000100000100xx10000010001;
	cfgsin12[0:44] =  45 'b00000100xx0001100000001000010xx01000010001000;
	cfgsin11[0:44] =  45 'b00100xx1000001000100000100xx00010010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0001001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000010xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00001000000;
	cfgsin20[0:44] =  45 'b01000001xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000001000001xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
end
endtask
task get_wl_pat213; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000100x00xx1001000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1001000100000100xx0xx1001000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b01000100000100xx0xx1001000100000100xx0xx00010;
	cfgsin3[0:44] =  45 'b00100000100xx0xx1001000100000100xx1xx11000001;
	cfgsin4[0:44] =  45 'b00000100xx0xx1001000100000100xx1xx10010001000;
	cfgsin5[0:44] =  45 'b00100xx0xx1001000100000100xx1xx00010001000001;
	cfgsin6[0:44] =  45 'b00xx0xx1100000010000001xx1xx0000100001000100x;
	cfgsin7[0:44] =  45 'bx0xx0000100010000001xx1xx1001000000010001xx0x;
// TR
	cfgsin15[0:44] =  45 'bx0001000100000100xx1xx0001000100000100xx0xx10;
	cfgsin14[0:44] =  45 'b01000100000100xx0xx1001000100000100xx0xx10010;
	cfgsin13[0:44] =  45 'b00100000100xx0xx1001000100000100xx0xx10010001;
	cfgsin12[0:44] =  45 'b00000100xx1xx0100000100000100xx0xx10010001000;
	cfgsin11[0:44] =  45 'b00100xx0xx1001000100000100xx1xx00010001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin9[0:44] =  45 'bx1xx0001000100000100xx1xx1001000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0001000000100100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00001000000;
	cfgsin20[0:44] =  45 'b01000001xx0000001000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00010xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000001000001xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
end
endtask
task get_wl_pat212; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000100x01xx1010000100000100x01x;
	cfgsin1[0:44] =  45 'bx1010000100000100x01xx1010000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx10100;
	cfgsin3[0:44] =  45 'b00100000100x01xx1010000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000001xx1xx1010000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx0100000100000100x01xx01000001000001;
	cfgsin6[0:44] =  45 'b00x01xx1000100010000100x00xx1001000000100010x;
	cfgsin7[0:44] =  45 'b00xx1100000010000100x00xx1100000100000010x00x;
// TR
	cfgsin15[0:44] =  45 'bx0100000100000100x01xx0100000100000100x01xx11;
	cfgsin14[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin13[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin12[0:44] =  45 'b00000100x00xx1100000100000001xx0xx11000001000;
	cfgsin11[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin10[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin9[0:44] =  45 'b01xx0100000100000100x01xx0100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx0100000100000100x01xx1010000100000001x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100x01xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx11000001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010000000;
	cfgsin21[0:44] =  45 'b01100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1100000100000100xx1xx10010001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat211; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000010000100000100x000;
	cfgsin1[0:44] =  45 'b00010000100000100x00000010000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000000100;
	cfgsin3[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00001100000100000100x000011000001000001;
	cfgsin6[0:44] =  45 'b00x00000010000010000010x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00100100000010000010x00100100000010000100x010;
// TR
	cfgsin15[0:44] =  45 'b01100000100000100x00001100000100000100x000001;
	cfgsin14[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin12[0:44] =  45 'b00000100x01000100000000001100xx01001000001000;
	cfgsin11[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin10[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin9[0:44] =  45 'b00010100000100000100x00001100000100000100x000;
	cfgsin8[0:44] =  45 'bxx10100000100000100x00000000100001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000100x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin20[0:44] =  45 'b00000001xx1xx1100000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00010x00xx1010000100000010x00xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000001xx1xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
end
endtask
task get_wl_pat210; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx0000010000100000100x100;
	cfgsin1[0:44] =  45 'b00010000100000100x10000010000100000100x100001;
	cfgsin2[0:44] =  45 'b00000100000100x10000100000100000100x100000100;
	cfgsin3[0:44] =  45 'b00100000100x10000010000100000100x100000100001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000100000100x100001000001000;
	cfgsin5[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin6[0:44] =  45 'b00x10000010000100000001x10000010000000001001x;
	cfgsin7[0:44] =  45 'b10000010000100000001x10000010000000001001x100;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin14[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin13[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin12[0:44] =  45 'b00000100x10000010000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin10[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000000100001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100x000001000000001;
	cfgsin21[0:44] =  45 'b00100x00000001000100000100x010001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
end
endtask
task get_wl_pat209; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000001xx0000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010001000001;
	cfgsin6[0:44] =  45 'b00x00000001000010000001x11000100000001000001x;
	cfgsin7[0:44] =  45 'b10000001000000001001x10000001000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000001xx00000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000000100100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin18[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin19[0:44] =  45 'b00100000100x10000100000100000100x100000100001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100x100001000000000;
	cfgsin21[0:44] =  45 'b01001x10000100000000001001x100001000001000001;
	cfgsin22[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin23[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin30[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin29[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin28[0:44] =  45 'b00000100x10000010000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin26[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin25[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat208; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000000;
	cfgsin4[0:44] =  45 'b01000100xx0000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010001000001;
	cfgsin6[0:44] =  45 'b00x00000001000000001001x00000001000000100001x;
	cfgsin7[0:44] =  45 'b01000100000000100001x00000100000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000000001100xx00000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000000100000001001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000001xx0000010000100000100x000001000001000;
	cfgsin21[0:44] =  45 'b00100x01000100000000001100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000001xx00001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat207; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x010001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000000;
	cfgsin4[0:44] =  45 'b00100100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010001000001;
	cfgsin6[0:44] =  45 'b00x00000001000010000100x00000100000001000100x;
	cfgsin7[0:44] =  45 'b00010000010010000010x00000001000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000000001100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000010000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100xx0000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000001000010x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat206; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100001000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x01000100000100000100x000000010001;
	cfgsin4[0:44] =  45 'b00000100000000100000100000100x000011000001000;
	cfgsin5[0:44] =  45 'b00100x00001010000100000100x000000100001000001;
	cfgsin6[0:44] =  45 'b00x00000010000001000001x00101100000010000001x;
	cfgsin7[0:44] =  45 'b00000000001000001001x01000100000000001001x000;
// TR
	cfgsin15[0:44] =  45 'b00000100100000100x00000001000100000100x000000;
	cfgsin14[0:44] =  45 'b01000100000100x00000001000100000100x000000010;
	cfgsin13[0:44] =  45 'b00100000100x00000001000100000100x000000010001;
	cfgsin12[0:44] =  45 'b00000100x000000000101000001000000000001001000;
	cfgsin11[0:44] =  45 'b00100x00000001000100000100x000000010001000001;
	cfgsin10[0:44] =  45 'b00x00000001000100000100x00000001000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000000001000100000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000010x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat205; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x00xx11000;
	cfgsin3[0:44] =  45 'b00100000100x00xx1100000100000100x01xx11000000;
	cfgsin4[0:44] =  45 'b100000010x1xx1100000100000100x01xx01000001000;
	cfgsin5[0:44] =  45 'b00100x01xx0010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1100000100000010x00xx0001000010000100x;
	cfgsin7[0:44] =  45 'b00xx0100000001000100x00xx1010000010000001x01x;
// TR
	cfgsin15[0:44] =  45 'bx1000100100000100x01xx1001000100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000100x01xx1001000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000100x01xx10000101000000100x1xx10001001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000100000100x01xx10010001000001;
	cfgsin10[0:44] =  45 'b00x01xx1001000100000100x01xx1001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx00001001000001000x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100000000010000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100000000010000100000100x000001000000000;
	cfgsin21[0:44] =  45 'b01100x00000100000000001100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x000001000001000001000000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
end
endtask
task get_wl_pat204; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000100xx1xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000000;
	cfgsin4[0:44] =  45 'b10000010x11xx1100000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1000001100000100x01xx1010000010000010x;
	cfgsin7[0:44] =  45 'b01xx1010000001000010x01xx1010000010000001x01x;
// TR
	cfgsin15[0:44] =  45 'bx1000100100000100x01xx1001000100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000100x01xx1001000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000100x01xx1000010000001001x11xx10001001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000100000100x01xx10010001000001;
	cfgsin10[0:44] =  45 'b00x01xx1001000100000100x01xx1001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x1xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b000000010x1xx1010000100000100x01xx10100000100;
	cfgsin21[0:44] =  45 'b00100x01xx1010000001000001x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx11000001000000010x1xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
end
endtask
task get_wl_pat203; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx0000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00000100000;
	cfgsin4[0:44] =  45 'b10000100x10000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000000001100000001xx0000000001000100001x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0000010000010000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100x100001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000010xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100xx1xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000001x11xx1010000100000100x01xx10100000010;
	cfgsin21[0:44] =  45 'b00100x01xx1010000001000010x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000001x11xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
end
endtask
task get_wl_pat202; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00000100000;
	cfgsin4[0:44] =  45 'b10000010x10000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000000100001000001xx0000001000100000001x;
	cfgsin7[0:44] =  45 'bx0000100000010000001xx0000010000100000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000001x100001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000001x10000100000100000100xx00000010000010;
	cfgsin21[0:44] =  45 'b00100xx0000001000001000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000001x100001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat201; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin1[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin2[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin3[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin4[0:44] =  45 'bx001x001x10000100000xx100x100xx0000100000xx10;
	cfgsin5[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin6[0:44] =  45 'b00xx0000100000xx001x001xx0000001000xx010x100x;
	cfgsin7[0:44] =  45 'bx0000001000xx100x001xx0000010000xx010x001xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin14[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin13[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin12[0:44] =  45 'bx100x100xx0000000010xx001x010x10000100000xx10;
	cfgsin11[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin10[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000000001xx001x100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000001x10000100000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000001x100001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat200; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin1[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin2[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin3[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000010000x;
	cfgsin4[0:44] =  45 'bx001x100x10000100000xx100x1000x0000100000xx10;
	cfgsin5[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin6[0:44] =  45 'b000x0000000001xx010x1001x0000000001xx001x1001;
	cfgsin7[0:44] =  45 'bx0000000100xx001x0101x0000010000xx001x0101x00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin14[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin13[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin12[0:44] =  45 'bx100x1000x0000100000xx001x100x10000100000xx10;
	cfgsin11[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin10[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000100000xx001x100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin19[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin20[0:44] =  45 'bx001x001x10000100000xx100x100xx0000001000xx01;
	cfgsin21[0:44] =  45 'b0x100xx0000001000xx100x100xx0000100000xx100x1;
	cfgsin22[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin23[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin30[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin29[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin28[0:44] =  45 'bx100x100xx0000100000xx001x001x10000100000xx10;
	cfgsin27[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin26[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
end
endtask
task get_wl_pat199; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000100000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000100000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000100000000100000000001000000000100;
	cfgsin7[0:44] =  45 'b000000001000000000000000000001000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000010000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000100;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b001000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000010000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin18[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin19[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin20[0:44] =  45 'bx001x100x10000100000xx100x1000x0000001000xx10;
	cfgsin21[0:44] =  45 'b0x0101x0000001000xx100x0101x0000100000xx100x1;
	cfgsin22[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin23[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin30[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin29[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin28[0:44] =  45 'bx100x1000x0000100000xx001x100x10000100000xx10;
	cfgsin27[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin26[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin25[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx100x001x0000;
end
endtask
task get_wl_pat198; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000010000000000;
	cfgsin4[0:44] =  45 'b000000000001000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000001000000000000000001;
	cfgsin7[0:44] =  45 'b001000000000000000000000000000000000000001010;
// TR
	cfgsin15[0:44] =  45 'b000000000001000000010000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000010000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b100000010000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000001000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000010000010000100000000000000010000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000001000010;
	cfgsin21[0:44] =  45 'b000000000000001000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat197; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin1[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin2[0:44] =  45 'b0x0110x0101001101xx110x0110x0110001101xx110x0;
	cfgsin3[0:44] =  45 'b110x0110001101xx110x0110x0100001100xx110x0110;
	cfgsin4[0:44] =  45 'bx0101001100xx110x0110x0110001101xx110x0101x01;
	cfgsin5[0:44] =  45 'b10010101xx110x0110x1000010101xx110x0110x01100;
	cfgsin6[0:44] =  45 'b01101xx101x0010x0110000100xx110x0010x01100000;
	cfgsin7[0:44] =  45 'b00xx110x0010x0110001101xx110x0010x0110001000x;
// TR
	cfgsin15[0:44] =  45 'bx110x0110x0010001100xx110x0100x0110001101xx11;
	cfgsin14[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin13[0:44] =  45 'b110x0110010101xx110x0110x0101001101xx110x0010;
	cfgsin12[0:44] =  45 'bx0110001100xx110x0110x0110001101xx110x0110x01;
	cfgsin11[0:44] =  45 'b00001010xx110x0110x0110001101xx110x0110x01100;
	cfgsin10[0:44] =  45 'b01001xx110x0110x0110001101xx110x0110x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0110x0010001101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0010001001xx001x1001x0001010001xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat196; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x010000100000010x0110x01100011000;
	cfgsin1[0:44] =  45 'b0010x0110x011000110000010x0110x10100010100001;
	cfgsin2[0:44] =  45 'b0x0110x011000110000010x0110x001000110000010x0;
	cfgsin3[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin4[0:44] =  45 'bx011000110000010x0110x011000100000010x0110x01;
	cfgsin5[0:44] =  45 'b1000110000010x0110x001000110000010x0100x01000;
	cfgsin6[0:44] =  45 'b0110000000x0100x000000110000010x0100x00000011;
	cfgsin7[0:44] =  45 'b0000010x0110x001000101000010x0010x01100010000;
// TR
	cfgsin15[0:44] =  45 'b0010x0100x010000110000010x0110x01100011000001;
	cfgsin14[0:44] =  45 'b0x0110x101000101000010x0110x001000100000010x0;
	cfgsin13[0:44] =  45 'b110x001000110000010x1010x011001010000010x0110;
	cfgsin12[0:44] =  45 'bx001000110000010x0110x011000110000010x0101x00;
	cfgsin11[0:44] =  45 'b0100110000010x0110x011000110000010x0110x01100;
	cfgsin10[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x00100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x000100100000001x1000x10010100100x;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin19[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin20[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0010x00;
	cfgsin21[0:44] =  45 'b10001101xx110x0010x0110001101xx110x0110x01100;
	cfgsin22[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin23[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// BR
	cfgsin31[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin30[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin29[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin28[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin27[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin26[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
end
endtask
task get_wl_pat195; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000010000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000010000000000000000000000010;
	cfgsin6[0:44] =  45 'b000000000000010001010000000000000001000010000;
	cfgsin7[0:44] =  45 'b000000000000001000000000000001000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000010000100000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000001000001000000000;
	cfgsin13[0:44] =  45 'b000010000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000010;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000001000000000;
	cfgsin8[0:44] =  45 'bxx000000000001000001000100000010000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin19[0:44] =  45 'b110x011000110000010x0110x011000110000010x0010;
	cfgsin20[0:44] =  45 'bx011000000000001x1001x010101010000010x1001x01;
	cfgsin21[0:44] =  45 'b0101010000010x0110x011000110000010x0110x01100;
	cfgsin22[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin23[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
// BR
	cfgsin31[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin30[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin29[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin28[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin27[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin26[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin25[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat194; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000001001000000000000000000001;
	cfgsin1[0:44] =  45 'b000000000000000000001010000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000010000000000001000000010000000;
	cfgsin3[0:44] =  45 'b000000000000010000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000010000000000000000001010000000000000;
	cfgsin5[0:44] =  45 'b000000010000000000000000000000000000001000000;
	cfgsin6[0:44] =  45 'b000010000100000000000000010000000000001000000;
	cfgsin7[0:44] =  45 'b010010000000000000000001000000000000000000110;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000010000000000000000000001010;
	cfgsin14[0:44] =  45 'b000000000000000010000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000010000000000;
	cfgsin12[0:44] =  45 'b010000000010010000000000000000000010000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000010000000000000000;
	cfgsin10[0:44] =  45 'b000010010000000000000000001010000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000001000000000000000000001;
	cfgsin8[0:44] =  45 'bxx0100000000000000000000000000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000100;
	cfgsin20[0:44] =  45 'b000000010000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat193; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100xx0xx1010000100000100xx0x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx0xx0010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx0xx1010000100000100xx0xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx0xx1010000100000100xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx0xx1010000100000100xx0xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx0xx1010000100000100xx1xx10010000010001;
	cfgsin6[0:44] =  45 'b00xx0xx1001000001000100xx0xx1010000001000100x;
	cfgsin7[0:44] =  45 'bx0xx0100000010000100xx0xx1010000000010100xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100xx0xx1010000100000100xx0xx00;
	cfgsin14[0:44] =  45 'b10000100000100xx0xx1010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1010000001000100xx0xx10100000;
	cfgsin12[0:44] =  45 'b01000010xx0xx0010000100000100xx1xx00100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx0xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx0xx0010000100000100xx0xx0010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx0xx1010000100000100xx0x;
	cfgsin8[0:44] =  45 'bxxx0010000100000100xx1xx0010000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000100000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000010000000000000000000010000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat192; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx0010000100000100xx1xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx0010000100000100xx1xx11000000010000;
	cfgsin6[0:44] =  45 'b01xx0xx0100000001000001xx1xx1100000001000001x;
	cfgsin7[0:44] =  45 'bx0xx0010000001000010xx0xx1100000001000010xx1x;
// TR
	cfgsin15[0:44] =  45 'bx0010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx0xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx0xx1100000001000001xx1xx00100000;
	cfgsin12[0:44] =  45 'b10000010xx1xx1010000100000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx0010000100000100xx1xx1010000100000100xx0x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0000010001000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx11000000;
	cfgsin20[0:44] =  45 'b01000100xx1xx1100000001000100xx1xx11000001000;
	cfgsin21[0:44] =  45 'b00100xx0xx1010000001000100xx0xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat191; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000100000100x01000010000100000100xx00;
	cfgsin1[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin2[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin3[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin4[0:44] =  45 'b00000100xx0001010000100000100xx00000100001000;
	cfgsin5[0:44] =  45 'b00100xx0001010000100000100xx00000100000010000;
	cfgsin6[0:44] =  45 'b01xx0000001000001000001xx0000010000001000001x;
	cfgsin7[0:44] =  45 'bx0101010000010000010xx1000010000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b01010000100000100xx0000010000100000100xx00000;
	cfgsin14[0:44] =  45 'b10000100000100xx0000010000100000100xx10000100;
	cfgsin13[0:44] =  45 'b00100000100xx1000010000001000010xx00011000000;
	cfgsin12[0:44] =  45 'b01000100xx0000010000100000100xx00000100001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin10[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin9[0:44] =  45 'bx0001010000100000100xx0000010000100000100xx10;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx00100000;
	cfgsin20[0:44] =  45 'b01000001xx1xx0010000001000001xx1xx00010001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1100000001000001xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
end
endtask
task get_wl_pat190; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000100000100xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010000010000;
	cfgsin6[0:44] =  45 'b01xx0010001000001000001xx0000000010001000100x;
	cfgsin7[0:44] =  45 'bx0000000010100000001xx0000001000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000000010001000010xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000000001001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x00000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin19[0:44] =  45 'b00100000100xx0000010000100000100xx00100100000;
	cfgsin20[0:44] =  45 'b01000001xx0001001000001000001xx00011000001000;
	cfgsin21[0:44] =  45 'b00100xx0000010000001000001xx00000100001000001;
	cfgsin22[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin23[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin30[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin29[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin28[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin27[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin26[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin25[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
end
endtask
task get_wl_pat189; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000100000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010000010000;
	cfgsin6[0:44] =  45 'b01xx1000001000001000001xx0000001000100000001x;
	cfgsin7[0:44] =  45 'bx0000001000000001010xx0000001000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000001000001xx00000010000;
	cfgsin12[0:44] =  45 'b00100001xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000000010001000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000001000;
	cfgsin20[0:44] =  45 'b00001001xx0000001000000001100xx00000010000100;
	cfgsin21[0:44] =  45 'b00010xx0000001000010000001xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
end
endtask
task get_wl_pat188; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000100000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010000010000;
	cfgsin6[0:44] =  45 'b10xx0000001000001000001xx0000001000000100001x;
	cfgsin7[0:44] =  45 'bx0000001000000100010xx0000010000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000000010001000001xx00001000000;
	cfgsin12[0:44] =  45 'b10000010xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000000010100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010000;
	cfgsin20[0:44] =  45 'b00001001xx0000000100000001001xx00000010000001;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000001xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
end
endtask
task get_wl_pat187; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000100000100xx1000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010000010001;
	cfgsin6[0:44] =  45 'b00xx0000001000001000100xx0010100000001000100x;
	cfgsin7[0:44] =  45 'bx0000010000010000100xx0000001000001000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000001000100xx00001000000;
	cfgsin12[0:44] =  45 'b00010100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx10;
	cfgsin8[0:44] =  45 'bxx01001000100000100xx0000001000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000001000;
	cfgsin20[0:44] =  45 'b01000001xx0000000100000100001xx00100001000010;
	cfgsin21[0:44] =  45 'b00100xx0000001000001000001xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
end
endtask
task get_wl_pat186; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000100000100xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx10000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx10000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx10000010001000;
	cfgsin5[0:44] =  45 'b00100xx0001001000100000100xx10001000000010000;
	cfgsin6[0:44] =  45 'b01xx0001000010001000001xx1000000100001000001x;
	cfgsin7[0:44] =  45 'bx0000100000000001010xx1000001000001000010xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx10010;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000001000001xx00000010000;
	cfgsin12[0:44] =  45 'b01000010xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0101001000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010000;
	cfgsin20[0:44] =  45 'b01000100xx0000100000000100100xx00000100001000;
	cfgsin21[0:44] =  45 'b00001xx0000001000001000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
end
endtask
task get_wl_pat185; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx1001000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b01000100000100xx1xx1001000100000100xx0xx10010;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1001000100000100xx0xx10010001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1001000100000100xx0xx10010001000;
	cfgsin5[0:44] =  45 'b00100xx1xx0001000100000100xx0xx10010001000000;
	cfgsin6[0:44] =  45 'b01xx1xx0100000100000001xx0xx0010000100000001x;
	cfgsin7[0:44] =  45 'bx1xx1000100001000010xx0xx1001000001000001xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx0xx00;
	cfgsin14[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1001000000010001xx1xx10001000;
	cfgsin12[0:44] =  45 'b01000010xx1xx1001000100000100xx1xx10010001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx0x;
	cfgsin8[0:44] =  45 'bxxx0001000100000100xx0xx0001000100000100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010000;
	cfgsin20[0:44] =  45 'b00001001xx0001000100000001001xx00000010000000;
	cfgsin21[0:44] =  45 'b01100xx0000001000001000001xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
end
endtask
task get_wl_pat184; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000100x00xx1010000100000100x01x;
	cfgsin1[0:44] =  45 'bx1010000100000100x01xx0010000100000100x01xx01;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx10100;
	cfgsin3[0:44] =  45 'b00100000100x01xx1010000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1010000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1100000100000100x01xx11000000000010;
	cfgsin6[0:44] =  45 'b10x00xx1100000100000010x00xx1000010100000010x;
	cfgsin7[0:44] =  45 'b00xx0001000001000001x00xx0100000100000010x01x;
// TR
	cfgsin15[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx01;
	cfgsin14[0:44] =  45 'b00000100000100x01xx0100000100000100x01xx01000;
	cfgsin13[0:44] =  45 'b00100000100x01xx1100000100000010x01xx11000000;
	cfgsin12[0:44] =  45 'b01000100x00xx1100000100000100x00xx11000001000;
	cfgsin11[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin10[0:44] =  45 'b00x01xx1100000100000100x00xx1100000100000100x;
	cfgsin9[0:44] =  45 'b00xx1100000100000100x00xx1100000100000100x00x;
	cfgsin8[0:44] =  45 'bxxx0100000100000100x01xx0010000100000001x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100x01xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx11000001;
	cfgsin20[0:44] =  45 'b00000001xx1xx0001000010000001xx1xx01000000100;
	cfgsin21[0:44] =  45 'b00010xx1xx1100000100000001xx1xx10010001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat183; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx1000010000100000100x000;
	cfgsin1[0:44] =  45 'b00010000100000100x00001010000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000000100;
	cfgsin3[0:44] =  45 'b00100000100x00000010000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000010000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000001001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x00000001000100000100x;
	cfgsin7[0:44] =  45 'b00001010000001000100x01001000010010000100x000;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x00000100000100000100x000011;
	cfgsin14[0:44] =  45 'b00000100000100x00001100000100000100x000011000;
	cfgsin13[0:44] =  45 'b00100000100x00000100000001000100x000000100000;
	cfgsin12[0:44] =  45 'b01000001x10100100000100000100x010001000001000;
	cfgsin11[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin10[0:44] =  45 'b00x00000100000100000100x01000100000100000100x;
	cfgsin9[0:44] =  45 'b01000100000100000100x01000100000100000100x001;
	cfgsin8[0:44] =  45 'bxx10100000100000100x00000010000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000100x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10001001;
	cfgsin20[0:44] =  45 'b00000001x01xx1100000010000001x00xx10100000000;
	cfgsin21[0:44] =  45 'b01100x00xx1001000100000010x00xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
end
endtask
task get_wl_pat182; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx0000010000100000100x100;
	cfgsin1[0:44] =  45 'b00010000100000100x10000010000100000100x100011;
	cfgsin2[0:44] =  45 'b00000100000100x10000100000100000100x100000100;
	cfgsin3[0:44] =  45 'b00100000100x10000010000100000100x100001000001;
	cfgsin4[0:44] =  45 'b00000100x10000010000100000100x100001000001000;
	cfgsin5[0:44] =  45 'b00100x10000100000100000100x100000100000010000;
	cfgsin6[0:44] =  45 'b01x10000010000000100001x10000010000010000001x;
	cfgsin7[0:44] =  45 'b10000000010001000010x10000010000000001001x100;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin14[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin13[0:44] =  45 'b00100000100x10000010000000001001x100001000000;
	cfgsin12[0:44] =  45 'b01000010x10000100000100000100x100001000001000;
	cfgsin11[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin10[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000010000010x000000000100010;
	cfgsin21[0:44] =  45 'b00010x00000000010100000100x010001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
end
endtask
task get_wl_pat181; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010001000000;
	cfgsin6[0:44] =  45 'b01x01000000100100000001x01000100000000001100x;
	cfgsin7[0:44] =  45 'b11000100000100000100x10000001000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000001000001x000001000000;
	cfgsin12[0:44] =  45 'b01000001x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00010100000000001100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin18[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin19[0:44] =  45 'b00100000100x10000100000100000100x100000100000;
	cfgsin20[0:44] =  45 'b10000010x10000010000100000100x100000010001000;
	cfgsin21[0:44] =  45 'b00001x10100010000000001001x100001000001000001;
	cfgsin22[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin23[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin30[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin29[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin28[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin27[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin26[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin25[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat180; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010000001000;
	cfgsin6[0:44] =  45 'b01x00000000100001000100x10000000010000100100x;
	cfgsin7[0:44] =  45 'b01001100000000100100x00000100000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000100000000100001x000000100001;
	cfgsin12[0:44] =  45 'b00000010x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000000001100000010x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x10000010000010000100x110001000000100;
	cfgsin21[0:44] =  45 'b00001x10000100000000001100x100001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat179; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000100x000000010001000000;
	cfgsin6[0:44] =  45 'b01x00000001000100000100x10000001000001000010x;
	cfgsin7[0:44] =  45 'b00000001000001000001x00000001000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00010010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000010000001x000000100000;
	cfgsin12[0:44] =  45 'b01000010x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000000100010000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000001000000;
	cfgsin20[0:44] =  45 'b00010100x00000010000010000100x000000100000010;
	cfgsin21[0:44] =  45 'b00001x00001010000001000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat178; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100001000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000001000000000010;
	cfgsin6[0:44] =  45 'b01x00100100000000001001x00001100000000001010x;
	cfgsin7[0:44] =  45 'b00000100000001000100x01000100000000001001x000;
// TR
	cfgsin15[0:44] =  45 'b01001000100000100x00000000010100000100x000000;
	cfgsin14[0:44] =  45 'b01000100000100x00000001000100000100x000000010;
	cfgsin13[0:44] =  45 'b00100000100x00000100000000001010x000000000100;
	cfgsin12[0:44] =  45 'b01000100x00000001000100000100x000010010001000;
	cfgsin11[0:44] =  45 'b00100x00001001000100000100x000000010001000001;
	cfgsin10[0:44] =  45 'b00x00000001000100000100x00000001000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000001000001000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000001x00000100000001000001x000000100000000;
	cfgsin21[0:44] =  45 'b10100x00000010000100000010x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100x0000;
end
endtask
task get_wl_pat177; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100000100001;
	cfgsin6[0:44] =  45 'b00x00xx1010000001000010x01xx0010000000001100x;
	cfgsin7[0:44] =  45 'b00xx0010000000001001x00xx1010000010000001x01x;
// TR
	cfgsin15[0:44] =  45 'bx0001000100000100x01xx0000010100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000100x01xx1010000010000001x01xx10100001;
	cfgsin12[0:44] =  45 'b00000010x01xx1001000100000100x01xx00010001000;
	cfgsin11[0:44] =  45 'b00100x01xx0001000100000100x01xx10010001000001;
	cfgsin10[0:44] =  45 'b00x01xx1001000100000100x01xx1001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000000100x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100000000010000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000001000000;
	cfgsin20[0:44] =  45 'b01000001x00001010000001000100x000000100000100;
	cfgsin21[0:44] =  45 'b00010x00000100000000001001x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
end
endtask
task get_wl_pat176; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000100xx0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100000100000;
	cfgsin6[0:44] =  45 'b10x01xx1010000001000100x01xx1010000000010001x;
	cfgsin7[0:44] =  45 'b00xx1000010000001010x00xx1010000010000001x01x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100x01xx1000010100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000100x01xx0001000010000001x01xx01000000;
	cfgsin12[0:44] =  45 'b00100001x01xx1001000100000100x01xx10010001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000100000100x01xx10010001000001;
	cfgsin10[0:44] =  45 'b00x01xx1001000100000100x01xx1001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x1xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100000;
	cfgsin20[0:44] =  45 'b10000010x01xx0100000100000100x01xx11000000010;
	cfgsin21[0:44] =  45 'b00001x01xx0010000010000010x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
end
endtask
task get_wl_pat175; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00000100000100000;
	cfgsin6[0:44] =  45 'b01xx0000010000001000001xx0000000100000001001x;
	cfgsin7[0:44] =  45 'bx0000010000000001010xx0000010000010000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0001010000010000001xx00000100000;
	cfgsin12[0:44] =  45 'b10000100xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100xx1xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx00100000;
	cfgsin20[0:44] =  45 'b10000100x01xx0010000000100001x01xx00100000010;
	cfgsin21[0:44] =  45 'b00100x01xx0010000010000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
end
endtask
task get_wl_pat174; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00000000011000000;
	cfgsin6[0:44] =  45 'b01xx0000000100100000001xx0000001000100000001x;
	cfgsin7[0:44] =  45 'bx0100000010100000010xx1000010000100000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000010000100000001xx00100000010;
	cfgsin12[0:44] =  45 'b00001010xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000010000100000010x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00100010000;
	cfgsin20[0:44] =  45 'b10000001xx0000000010100000010xx00000000010000;
	cfgsin21[0:44] =  45 'b10100xx0000001000010000001xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat173; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin1[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin2[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin3[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin4[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin5[0:44] =  45 'b0x100xx0000100000xx100x100xx0000010000xx001x0;
	cfgsin6[0:44] =  45 'b01xx0000001000xx001x001xx0000000001xx100x010x;
	cfgsin7[0:44] =  45 'bx0000001000xx100x100xx0000010000xx010x001xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin14[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin13[0:44] =  45 'b00xx100x100xx0000010000xx010x010xx0000000001x;
	cfgsin12[0:44] =  45 'bx100x001xx0000100000xx100x100xx0000100000xx10;
	cfgsin11[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin10[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000100000xx010x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00000001001;
	cfgsin20[0:44] =  45 'b00000001xx0000000001010000010xx00000001000000;
	cfgsin21[0:44] =  45 'b01100xx0010000100100000001xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat172; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin1[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin2[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin3[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin4[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin5[0:44] =  45 'b0x1000x0000100000xx100x1000x0000010000xx001x0;
	cfgsin6[0:44] =  45 'b101x0000001000xx001x0101x0000010000xx001x0101;
	cfgsin7[0:44] =  45 'bx0000000100xx010x0011x0000010000xx001x0101x00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin14[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin13[0:44] =  45 'b00xx100x1000x0000010000xx001x0101x0000000001x;
	cfgsin12[0:44] =  45 'bx010x1001x0000100000xx100x1000x0000100000xx10;
	cfgsin11[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin10[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000000010xx010x100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin19[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000010000x;
	cfgsin20[0:44] =  45 'bx010x001xx0001100000xx010x001xx0010001000xx10;
	cfgsin21[0:44] =  45 'b0x010xx0000010000xx001x001xx0000100000xx100x1;
	cfgsin22[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin23[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin30[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin29[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin28[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin27[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin26[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx001x001xx00x;
end
endtask
task get_wl_pat171; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000100000100100000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000010000000000000000001000000100100000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000100000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000100000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000100000000010000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000100000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000010000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin18[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin19[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000010000x;
	cfgsin20[0:44] =  45 'bx010x0011x0000100000xx010x0011x0001001000xx10;
	cfgsin21[0:44] =  45 'b0x0011x0000010000xx001x0101x0000100000xx100x1;
	cfgsin22[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin23[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin30[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin29[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin28[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin27[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin26[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin25[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx001x100x0000;
end
endtask
task get_wl_pat170; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000010000000000000000001010000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000100000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000010000000000000100100010000;
	cfgsin14[0:44] =  45 'b000000001000000000000000000001000001000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000010000100000000010000010000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat169; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x0110001101x;
	cfgsin1[0:44] =  45 'bx110x0110x0110001100xx110x0110x0110001000xx11;
	cfgsin2[0:44] =  45 'b0x0110x0110001101xx110x0110x0110010101xx110x0;
	cfgsin3[0:44] =  45 'b110x0110001101xx110x0110x0110010101xx110x0110;
	cfgsin4[0:44] =  45 'bx0110001101xx110x0110x0110010101xx110x0110x01;
	cfgsin5[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin6[0:44] =  45 'b01101xx110x0010x0100000101xx110x1010x01100101;
	cfgsin7[0:44] =  45 'b01xx110x0000x1010001101xx110x0010x0100000101x;
// TR
	cfgsin15[0:44] =  45 'bx110x0101x0110010100xx110x0101x1000000100xx11;
	cfgsin14[0:44] =  45 'b0x0110x0010001101xx110x0110x0010001001xx110x0;
	cfgsin13[0:44] =  45 'b110x0110001101xx100x1010x0110001101xx110x0110;
	cfgsin12[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0101x01;
	cfgsin11[0:44] =  45 'b10010101xx110x0010x0110001101xx110x0110x01100;
	cfgsin10[0:44] =  45 'b01101xx110x0010x0110000101xx110x0110x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0110x0101001101xx110x0010x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001001xx001x1000x0001010001xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000010000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat168; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0100x000000000000010x0110x00100011000;
	cfgsin1[0:44] =  45 'b0010x0110x001000110000010x0110x01100010000001;
	cfgsin2[0:44] =  45 'b0x0110x011000110000010x0110x010100110000010x0;
	cfgsin3[0:44] =  45 'b110x101000101000010x0110x011000010000010x0110;
	cfgsin4[0:44] =  45 'bx011000110000010x0110x101000101000010x0110x00;
	cfgsin5[0:44] =  45 'b1000100000010x0110x001000100000000x1000x01100;
	cfgsin6[0:44] =  45 'b1000000010x0000x011000000000010x0010x01101000;
	cfgsin7[0:44] =  45 'b0000010x0010x001001010000000x0010x01000011000;
// TR
	cfgsin15[0:44] =  45 'b0010x0110x011000110000010x0110x00100010100001;
	cfgsin14[0:44] =  45 'b0x0110x011000110000010x0110x001000100000000x0;
	cfgsin13[0:44] =  45 'b110x001000110000010x0110x011000100100010x1010;
	cfgsin12[0:44] =  45 'bx001001010000010x0110x011000110000010x0110x00;
	cfgsin11[0:44] =  45 'b1000110100010x0110x011000110000010x1010x01100;
	cfgsin10[0:44] =  45 'b1010100010x0110x001000100000010x0110x00100010;
	cfgsin9[0:44] =  45 'b0000010x0110x001000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0000x0110x011000110000000x1000x10010000000x;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin19[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x1010;
	cfgsin20[0:44] =  45 'bx0110001101xx001x1001x0101010101xx010x1001x01;
	cfgsin21[0:44] =  45 'b10010101xx110x0110x0110001101xx110x0110x01100;
	cfgsin22[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin23[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// BR
	cfgsin31[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin30[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin29[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin28[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin27[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin26[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
end
endtask
task get_wl_pat167; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000100100010100000000000001000000000;
	cfgsin1[0:44] =  45 'b000000000001000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000010000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000001;
	cfgsin5[0:44] =  45 'b000001000000000000000000001000000100000000000;
	cfgsin6[0:44] =  45 'b000000000000100000000010000000000100000000000;
	cfgsin7[0:44] =  45 'b000000000100000000000000000001000000100000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000010000000001000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000010000000100001000;
	cfgsin13[0:44] =  45 'b000010000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000001;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000001000000000000001000001;
	cfgsin9[0:44] =  45 'b000000000000010000000010000000000000000000000;
	cfgsin8[0:44] =  45 'bxx100100000000000000000000100010000000011000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin19[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin20[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin21[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin22[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin23[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
// BR
	cfgsin31[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin30[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin29[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin28[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin27[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin26[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin25[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat166; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx010000010000000000000000000000000000000001;
	cfgsin1[0:44] =  45 'b000000000000000000010000000000000000001010000;
	cfgsin2[0:44] =  45 'b000000000000000000010000000000000000000010000;
	cfgsin3[0:44] =  45 'b000000000000010000000000000000000010000000000;
	cfgsin4[0:44] =  45 'b000000000010100000000000000000010100000000000;
	cfgsin5[0:44] =  45 'b000000010000000000010000000010000000001000000;
	cfgsin6[0:44] =  45 'b000110000000001000000001010010000000000000010;
	cfgsin7[0:44] =  45 'b010100000000001000000010011000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000010000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000010010000000000000000010000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000001000010000000;
	cfgsin12[0:44] =  45 'b010000000010010000000000000000010010000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000010010000000000000;
	cfgsin10[0:44] =  45 'b000000010000000010000000010100000000000000000;
	cfgsin9[0:44] =  45 'b010000000000000000000000010000000000000000001;
	cfgsin8[0:44] =  45 'bxx0000000000000000000100000000000000000000010;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat165; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx0010000100000100xx1xx1010000100000100xx0x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx0xx1010000100000100xx0xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx0010000100000100xx1xx00100;
	cfgsin3[0:44] =  45 'b00100000100xx0xx1010000100000100xx0xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx0xx0001000100000100xx0xx00100001000;
	cfgsin5[0:44] =  45 'b00100xx0xx1010000001000100xx0xx10100000010001;
	cfgsin6[0:44] =  45 'b00xx0xx1010000000100100xx0xx0010000100000001x;
	cfgsin7[0:44] =  45 'bx0xx0000100001000010xx0xx0100000000010010xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1100000010000100xx0xx1010000100000100xx0xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx0xx0010000100000100xx0xx10100;
	cfgsin13[0:44] =  45 'b00001000010xx1xx1010000001000100xx0xx00100000;
	cfgsin12[0:44] =  45 'b01000100xx0xx0010000001000100xx0xx00100000010;
	cfgsin11[0:44] =  45 'b00010xx0xx1010000100000100xx0xx00100000010001;
	cfgsin10[0:44] =  45 'b00xx0xx0010000001000100xx0xx0010000100000100x;
	cfgsin9[0:44] =  45 'bx0xx1010000100000100xx0xx0010000100000100xx0x;
	cfgsin8[0:44] =  45 'bxxx0010000100000100xx0xx1010000100000100xx0xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat164; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx0xx1001000100000100xx0xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx0xx1100000001000001xx0xx01000000010000;
	cfgsin6[0:44] =  45 'b01xx1xx0100000000100100xx0xx0100000100000100x;
	cfgsin7[0:44] =  45 'bx0xx1010000001000001xx0xx0001000010000010xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1010000010000100xx0xx1010000100000100xx1xx00;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx0010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00001000001xx0xx1100000001000001xx0xx10000010;
	cfgsin12[0:44] =  45 'b01000001xx1xx1100000001000001xx1xx01000000010;
	cfgsin11[0:44] =  45 'b00001xx0xx0010000100000100xx1xx10100000010000;
	cfgsin10[0:44] =  45 'b01xx1xx1100000010000100xx0xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx0010000100000100xx0xx0010000100000100xx0x;
	cfgsin8[0:44] =  45 'bxxx0010000100000100xx1xx0100000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat163; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000100x01000010000100000100xx00;
	cfgsin1[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin2[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin3[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin4[0:44] =  45 'b00000100xx0100001000100000100xx01000100001000;
	cfgsin5[0:44] =  45 'b00100xx0100010000001000010xx01010100000010000;
	cfgsin6[0:44] =  45 'b10xx0010010000001000100xx0001100000000001010x;
	cfgsin7[0:44] =  45 'bx0000100000000001100xx0001000010000100001xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000010000100xx0100010000100000100xx00010;
	cfgsin14[0:44] =  45 'b10000100000100xx0001010000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00001000100xx1000010000001000001xx10001000000;
	cfgsin12[0:44] =  45 'b01000010xx0000010000001000001xx00010100000010;
	cfgsin11[0:44] =  45 'b00100xx1000010000100000100xx00001000000010000;
	cfgsin10[0:44] =  45 'b01xx0000010000001000010xx0100010000100000100x;
	cfgsin9[0:44] =  45 'bx0001010000100000100xx1000010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx01010000100000100xx0000000001001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
end
endtask
task get_wl_pat162; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000100000100xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000000010001000010xx00000000010010000;
	cfgsin6[0:44] =  45 'b01xx0000001000100000100xx0000001000001000010x;
	cfgsin7[0:44] =  45 'bx0100010000001000100xx0000000100100000100xx10;
// TR
	cfgsin15[0:44] =  45 'b00001000000010100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000000;
	cfgsin13[0:44] =  45 'b01001000100xx0000001000001000010xx00000000010;
	cfgsin12[0:44] =  45 'b01000100xx0000001000001000001xx00001000000010;
	cfgsin11[0:44] =  45 'b00010xx0010001000100000100xx00000000010010001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000010xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0010001000100000100xx10;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000010xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x00000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin19[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin20[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin21[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin22[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin23[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin30[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin29[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin28[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin27[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin26[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin25[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
end
endtask
task get_wl_pat161; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000100000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000000001001000100xx00000000100010000;
	cfgsin6[0:44] =  45 'b01xx0000000010001000100xx0100010000000001100x;
	cfgsin7[0:44] =  45 'bx0000000010000100001xx1000000010010000010xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000000001100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00001000001xx0000001000001000100xx00000000100;
	cfgsin12[0:44] =  45 'b01000010xx0000001000100000001xx00000010000010;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000000100010000;
	cfgsin10[0:44] =  45 'b10xx0000001000000100001xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0010001000001000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
end
endtask
task get_wl_pat160; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000001xx00000000010010000;
	cfgsin6[0:44] =  45 'b01xx0000001000000010100xx0100000010001000100x;
	cfgsin7[0:44] =  45 'bx0000001000000010001xx0000010000000001010xx00;
// TR
	cfgsin15[0:44] =  45 'b00000010100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00001000001xx0000001000001000001xx00000000011;
	cfgsin12[0:44] =  45 'b00000001xx0000001000001000001xx00000010001000;
	cfgsin11[0:44] =  45 'b00001xx0000001000100000100xx00000000010010000;
	cfgsin10[0:44] =  45 'b01xx0000100000010000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000100000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
end
endtask
task get_wl_pat159; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100xx1000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx10000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000001000100xx00000001000010001;
	cfgsin6[0:44] =  45 'b00xx0000001000000100010xx0000000100000100100x;
	cfgsin7[0:44] =  45 'bx0000100000001000100xx0000001000000001010xx10;
// TR
	cfgsin15[0:44] =  45 'b00001000010000100xx0010001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000001;
	cfgsin13[0:44] =  45 'b00001000100xx0000001000001000100xx00000010000;
	cfgsin12[0:44] =  45 'b01000100xx0000001000001000100xx00000010000010;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010000010001;
	cfgsin10[0:44] =  45 'b00xx0000100000000010100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000000010001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
end
endtask
task get_wl_pat158; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000100xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx1000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx1000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx1000001000100000100xx10000010001;
	cfgsin4[0:44] =  45 'b00000100xx1000001000100000100xx10000010001000;
	cfgsin5[0:44] =  45 'b00100xx1000100000001000001xx00000001000010000;
	cfgsin6[0:44] =  45 'b01xx1000001000010000100xx0000001000000010001x;
	cfgsin7[0:44] =  45 'bx0101001000001000010xx0001100000000001001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000000001100xx1000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx1000001000100000100xx00011000;
	cfgsin13[0:44] =  45 'b00001000001xx1001001000001000001xx00001000000;
	cfgsin12[0:44] =  45 'b01000001xx0000001000001000001xx10001000000010;
	cfgsin11[0:44] =  45 'b00001xx0001001000100000100xx00010010000010000;
	cfgsin10[0:44] =  45 'b01xx0000001000001000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0001001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx01001000100000100xx0001000010100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
end
endtask
task get_wl_pat157; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx1001000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1001000100000100xx0xx1001000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b01000100000100xx0xx1001000100000100xx0xx10010;
	cfgsin3[0:44] =  45 'b00100000100xx0xx1001000100000100xx0xx10010001;
	cfgsin4[0:44] =  45 'b00000100xx0xx1001000100000100xx0xx10010001000;
	cfgsin5[0:44] =  45 'b00100xx0xx1000100000010001xx1xx10001000000100;
	cfgsin6[0:44] =  45 'b01xx0xx1001000100000001xx0xx1001000000010100x;
	cfgsin7[0:44] =  45 'bx0xx0000100000100001xx1xx0000100001000100xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1001000010000100xx0xx0001000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b01000100000100xx0xx1001000100000100xx1xx00001;
	cfgsin13[0:44] =  45 'b00001000001xx0xx0000010100000001xx1xx10001000;
	cfgsin12[0:44] =  45 'b00001001xx1xx1000100100000001xx0xx10010000100;
	cfgsin11[0:44] =  45 'b00001xx1xx0001000100000100xx1xx00001001000000;
	cfgsin10[0:44] =  45 'b01xx1xx1001000001000100xx1xx1001000100000100x;
	cfgsin9[0:44] =  45 'bx1xx0001000100000100xx1xx1001000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx0001000100000100xx1xx0000100000100100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
end
endtask
task get_wl_pat156; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x0100000100000100x00xx0010000100000100x00x;
	cfgsin1[0:44] =  45 'bx1010000100000100x00xx1010000100000100x00xx11;
	cfgsin2[0:44] =  45 'b00000100000100x00xx1100000100000100x00xx00100;
	cfgsin3[0:44] =  45 'b00100000100x01xx0010000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx0010000100000100x01xx01000001000;
	cfgsin5[0:44] =  45 'b00100x01xx0100000100000010x01xx01000001000000;
	cfgsin6[0:44] =  45 'b10x00xx1010000100000010x00xx1010000001000001x;
	cfgsin7[0:44] =  45 'b00xx1000010000100100x00xx1000010001000100x00x;
// TR
	cfgsin15[0:44] =  45 'bx1010000010000001x00xx0100000100000100x00xx01;
	cfgsin14[0:44] =  45 'b00000100000100x01xx0100000100000100x01xx01000;
	cfgsin13[0:44] =  45 'b00001000100x00xx1100000001000001x01xx11000000;
	cfgsin12[0:44] =  45 'b10000100x00xx1100000100000001x00xx10001001000;
	cfgsin11[0:44] =  45 'b00010x00xx1100000100000100x01xx11000000100000;
	cfgsin10[0:44] =  45 'b01x01xx0010000010000010x01xx0100000100000100x;
	cfgsin9[0:44] =  45 'b01xx0100000100000100x01xx1100000100000100x00x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0000100010000001x00x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100x01xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat155; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx01100000100000100xx0001010000100000100x010;
	cfgsin1[0:44] =  45 'b00010000100000100x00100010000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x01000100000100000100x001010100;
	cfgsin3[0:44] =  45 'b00100000100x00001010000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00001010000100000100x000011000001000;
	cfgsin5[0:44] =  45 'b00100x00001100000010000100x100011000001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000001x00000000010010000010x;
	cfgsin7[0:44] =  45 'b00100000001000001010x00000010000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00001000010000010x00001100000100000100x010011;
	cfgsin14[0:44] =  45 'b00000100000100x00010100000100000100x000011000;
	cfgsin13[0:44] =  45 'b00001000010x00000000010100000001x100001000000;
	cfgsin12[0:44] =  45 'b01000010x10000001000100000001x000001000000100;
	cfgsin11[0:44] =  45 'b00100x10100100000100000100x000001000001000000;
	cfgsin10[0:44] =  45 'b01x10010000010100000001x10001100000100000100x;
	cfgsin9[0:44] =  45 'b00001100000100000100x00000100000100000100x010;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00001000010000100100xx01x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000100x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin20[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin21[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
end
endtask
task get_wl_pat154; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000100xx0000010000100000100x100;
	cfgsin1[0:44] =  45 'b00010000100000100x10000010000100000100x101001;
	cfgsin2[0:44] =  45 'b00000100000100x10000100000100000100x100000100;
	cfgsin3[0:44] =  45 'b00100000100x10000010000100000100x100001000001;
	cfgsin4[0:44] =  45 'b00000100x10000010000100000100x100001000001000;
	cfgsin5[0:44] =  45 'b00100x10000010000000001001x100000100000000010;
	cfgsin6[0:44] =  45 'b01x10000000010000001100x10000001000100000100x;
	cfgsin7[0:44] =  45 'b10000010000100000001x10000100000001000010x100;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x11000100000100000100x100001;
	cfgsin14[0:44] =  45 'b00000100000100x10000100000100000100x100000100;
	cfgsin13[0:44] =  45 'b00100000001x11000010000100000001x100000100001;
	cfgsin12[0:44] =  45 'b00000001x10000010000100000001x100000100000000;
	cfgsin11[0:44] =  45 'b01001x10000100000100000100x100000100001000000;
	cfgsin10[0:44] =  45 'b01x10000100000000001100x10000100000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000000001010xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin20[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin21[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
end
endtask
task get_wl_pat153; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx1000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000000100010x000000000101000000;
	cfgsin6[0:44] =  45 'b01x01000100000000001010x01000100000001000010x;
	cfgsin7[0:44] =  45 'b00000100000000100100x00100000010000100100x010;
// TR
	cfgsin15[0:44] =  45 'b00010000010000100x10000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00001000001x00000010000100000001x000000100000;
	cfgsin12[0:44] =  45 'b00100010x00100010000000001010x001000100000001;
	cfgsin11[0:44] =  45 'b00010x00000010000100000100x000000100001000000;
	cfgsin10[0:44] =  45 'b01x00000100000100000001x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000000100010xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin18[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin19[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin20[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin21[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin22[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin23[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin30[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin29[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin28[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin27[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin26[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin25[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat152; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000000001001x000000000101000000;
	cfgsin6[0:44] =  45 'b01x00000001000001000001x00000100000000001010x;
	cfgsin7[0:44] =  45 'b00000000010000010100x00000000010000010100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000001000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000001000;
	cfgsin13[0:44] =  45 'b00000100001x00000010000000001001x000001000000;
	cfgsin12[0:44] =  45 'b10000001x00000010000001000100x100000100000000;
	cfgsin11[0:44] =  45 'b01001x00000010000100000100x000001000001000000;
	cfgsin10[0:44] =  45 'b01x00000001000000001100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000000100001000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat151; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x010001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x010001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000000001001x000000000101000000;
	cfgsin6[0:44] =  45 'b01x00000001000100000010x00000100000000001001x;
	cfgsin7[0:44] =  45 'b00000100000010000001x01000001000001000010x000;
// TR
	cfgsin15[0:44] =  45 'b00010000010000001x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00010000001x00000100000000001001x000000100000;
	cfgsin12[0:44] =  45 'b00010001x00000100000100000010x000001000000000;
	cfgsin11[0:44] =  45 'b01001x00000010000100000100x000000100000000100;
	cfgsin10[0:44] =  45 'b01x00000010000000001100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000000010100000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat150; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000001001000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00100100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000000001010x000001000000000010;
	cfgsin6[0:44] =  45 'b01x00100010000000001100x00000010000000001010x;
	cfgsin7[0:44] =  45 'b00100010000001000100x00000001000001000001x001;
// TR
	cfgsin15[0:44] =  45 'b00001000010000100x00100001000100000100x000000;
	cfgsin14[0:44] =  45 'b01000100000100x00000001000100000100x000000100;
	cfgsin13[0:44] =  45 'b00001000010x00000001000000001010x000000010000;
	cfgsin12[0:44] =  45 'b01000100x00000000100000001001x000001000000000;
	cfgsin11[0:44] =  45 'b01010x00000001000100000100x000000010001000001;
	cfgsin10[0:44] =  45 'b00x01000010000000001010x00100001000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000000001000100000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat149; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x00xx11;
	cfgsin2[0:44] =  45 'b00000100000100x00xx1100000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00100000100x01xx1100000100000100x00xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1000010010000001x01xx10100000100000;
	cfgsin6[0:44] =  45 'b01x00xx1010000001000001x01xx1100000000001001x;
	cfgsin7[0:44] =  45 'b00xx1100000000010010x00xx1010000100000010x00x;
// TR
	cfgsin15[0:44] =  45 'bx1100000001000001x00xx1001000100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx11000;
	cfgsin13[0:44] =  45 'b00000010001x01xx1001000100000001x01xx11000001;
	cfgsin12[0:44] =  45 'b00000001x01xx1000100100000100x01xx10000100010;
	cfgsin11[0:44] =  45 'b00001x01xx1001000100000100x01xx10010001000000;
	cfgsin10[0:44] =  45 'b01x00xx1001000001000100x00xx1001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx00001001000000010x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100000000010000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
end
endtask
task get_wl_pat148; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000001xx0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00100000100x00xx1100000100000100x00xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1000100000100100x01xx00100000100000;
	cfgsin6[0:44] =  45 'b01x01xx0100000001000010x00xx1010000001000100x;
	cfgsin7[0:44] =  45 'b00xx1010000001000001x00xx0100000000100100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1000001001000010x00xx1001000100000100x00xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000001x01xx1001000010000001x01xx00100000;
	cfgsin12[0:44] =  45 'b00100010x01xx0000100100000010x01xx10100000100;
	cfgsin11[0:44] =  45 'b00100x01xx1001000100000100x01xx00010000001000;
	cfgsin10[0:44] =  45 'b01x01xx0100000001000001x01xx1001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x00xx0100000100000100xx0xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x1xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
end
endtask
task get_wl_pat147; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx1000100000100000100xx10001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000010000010000010xx00010100000100000;
	cfgsin6[0:44] =  45 'b01xx0000100000000010100xx0000100000001000010x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000000100100000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000001000100xx0100100000100000100xx10001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00000100;
	cfgsin13[0:44] =  45 'b00010000001xx0000100000100000010xx00011000001;
	cfgsin12[0:44] =  45 'b00000100xx0001010000100000001xx00000001000001;
	cfgsin11[0:44] =  45 'b00010xx0000100000100000100xx00011000001000001;
	cfgsin10[0:44] =  45 'b00xx0001001000001000010xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx1001001000100000010xx010;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100xx1xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
end
endtask
task get_wl_pat146; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000000100100000001xx00000100001000000;
	cfgsin6[0:44] =  45 'b01xx0010001000001000100xx1000000010001000100x;
	cfgsin7[0:44] =  45 'bx1000000001000100001xx1010001000000001010xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000001000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00000100;
	cfgsin13[0:44] =  45 'b00000001001xx0000100000100000001xx00000000010;
	cfgsin12[0:44] =  45 'b00001001xx0000000100100000001xx00000100001000;
	cfgsin11[0:44] =  45 'b00001xx0000100000100000100xx00000000011000000;
	cfgsin10[0:44] =  45 'b01xx0000100000001000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000010000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat145; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin1[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin2[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin3[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin4[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin5[0:44] =  45 'b0x100xx0000000010xx010x100xx0000010000xx010x0;
	cfgsin6[0:44] =  45 'b01xx0000001000xx001x100xx0000001000xx010x001x;
	cfgsin7[0:44] =  45 'bx0000000001xx100x010xx0000000010xx001x100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000xx100x100xx0000100000xx100x100xx00001;
	cfgsin14[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00000100;
	cfgsin13[0:44] =  45 'b00xx100x010xx0000000100xx010x100xx0000000001x;
	cfgsin12[0:44] =  45 'bx100x010xx0000100000xx010x001xx0000000010xx01;
	cfgsin11[0:44] =  45 'b0x100xx0000100000xx100x100xx0000000001xx100x0;
	cfgsin10[0:44] =  45 'b10xx0000001000xx010x001xx0000100000xx100x100x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000000001xx010x100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat144; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx001x001x00000100000xx100x1000x00;
	cfgsin1[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin2[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin3[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin4[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin5[0:44] =  45 'b0x1000x0000010000xx001x0101x0000010000xx001x0;
	cfgsin6[0:44] =  45 'b101x0010001000xx100x0101x0000001000xx100x0011;
	cfgsin7[0:44] =  45 'bx0000000001xx001x0101x0000010000xx010x1001x00;
// TR
	cfgsin15[0:44] =  45 'b01001000xx100x0011x0000100000xx100x1000x00001;
	cfgsin14[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00000000;
	cfgsin13[0:44] =  45 'b01xx001x1001x0000100000xx001x0101x0000000001x;
	cfgsin12[0:44] =  45 'bx001x1001x0000100000xx001x0101x0000000100xx00;
	cfgsin11[0:44] =  45 'b1x0101x0000100000xx100x1000x0000000001xx001x1;
	cfgsin10[0:44] =  45 'b001x0000001000xx100x0101x0000100000xx100x1000;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000000100xx010x100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin19[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin20[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin21[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin22[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin23[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin30[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin29[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin28[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin27[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin26[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
end
endtask
task get_wl_pat143; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000100000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000100000000000000000;
	cfgsin4[0:44] =  45 'b000100000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000001000100000100000000001000000000000;
	cfgsin7[0:44] =  45 'b000000001000000000000000010000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000100;
	cfgsin13[0:44] =  45 'b100000000000000010000000000000000000000000000;
	cfgsin12[0:44] =  45 'b001000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000010000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000100010000010000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin18[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin19[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin20[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin21[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin22[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin23[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin30[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin29[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin28[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin27[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin26[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin25[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx100x001x0000;
end
endtask
task get_wl_pat142; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000001000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000001000000000000000000001;
	cfgsin5[0:44] =  45 'b000000000000010000001000000010010000000000100;
	cfgsin6[0:44] =  45 'b000001000000000000000000000000000000001000000;
	cfgsin7[0:44] =  45 'b010000000010000000010010001000010100010000010;
// TR
	cfgsin15[0:44] =  45 'b001000010000000000001000000100001000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000010000000000010000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000100;
	cfgsin12[0:44] =  45 'b000000000010001000000000000000010000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000100000000;
	cfgsin10[0:44] =  45 'b000000000001000001000000000000000000001000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000001000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat141; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x1010001100xx110x0110x0110001101x;
	cfgsin1[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin2[0:44] =  45 'b0x0110x0100001101xx110x0110x0110001101xx110x0;
	cfgsin3[0:44] =  45 'b110x0010001101xx110x0110x0100001101xx110x0110;
	cfgsin4[0:44] =  45 'bx0100001101xx110x0110x0010001101xx110x0110x00;
	cfgsin5[0:44] =  45 'b10010101xx110x0001x0010001100xx010x0110x01000;
	cfgsin6[0:44] =  45 'b10100xx010x0000x0101000101xx110x0010x00010011;
	cfgsin7[0:44] =  45 'b00xx110x0000x0110000100xx000x0100x0000001100x;
// TR
	cfgsin15[0:44] =  45 'bx000x1000x0110001100xx110x0010x0010001101xx11;
	cfgsin14[0:44] =  45 'b0x0110x0110010101xx110x0110x0010001101xx000x0;
	cfgsin13[0:44] =  45 'b010x0110001101xx010x0110x0110001101xx110x0010;
	cfgsin12[0:44] =  45 'bx0010010100xx100x0110x0101001100xx110x0110x01;
	cfgsin11[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0010x01100;
	cfgsin10[0:44] =  45 'b01101xx110x0010x0010010101xx110x0110x00100101;
	cfgsin9[0:44] =  45 'b01xx110x0100x0110001101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x1010001101xx001x0001x0001000001xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat140; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x000000010000010x0110x00100011000;
	cfgsin1[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin2[0:44] =  45 'b0x0110x101000101000010x0110x011000110000010x0;
	cfgsin3[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin4[0:44] =  45 'bx011000110000010x0100x001000110000010x0100x01;
	cfgsin5[0:44] =  45 'b0000110000010x0000x010010100000010x0000x01000;
	cfgsin6[0:44] =  45 'b0110000000x0110x011010100000000x0000x01100011;
	cfgsin7[0:44] =  45 'b0100010x0000x101000110000001x0000x01000011000;
// TR
	cfgsin15[0:44] =  45 'b0010x0010x001001010000010x0100x00000011000001;
	cfgsin14[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin13[0:44] =  45 'b110x001000110000010x0110x011000110000010x0010;
	cfgsin12[0:44] =  45 'bx011000110000010x0110x011000110000010x0100x01;
	cfgsin11[0:44] =  45 'b0000110000010x0100x010000110000010x0010x01100;
	cfgsin10[0:44] =  45 'b0110000010x1010x011001010100000x0110x10100011;
	cfgsin9[0:44] =  45 'b0000010x0110x001000010000010x0110x00010011000;
	cfgsin8[0:44] =  45 'bxx0001x0110x011000110001001x1000x10010100000x;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin19[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin20[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin21[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin22[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin23[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// BR
	cfgsin31[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin30[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin29[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin28[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin27[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin26[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
end
endtask
task get_wl_pat139; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000100100010000000000000010000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000001100000000000000000010000;
	cfgsin5[0:44] =  45 'b100000010000000010000100000000000010010000100;
	cfgsin6[0:44] =  45 'b000010000100000000000000000000001000000000000;
	cfgsin7[0:44] =  45 'b000000000100000000000000000000100000100000001;
// TR
	cfgsin15[0:44] =  45 'b000000100000000000000000000010000100000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000100000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000010000;
	cfgsin11[0:44] =  45 'b100000000000000010000100000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000001000000000000000;
	cfgsin9[0:44] =  45 'b000000000000001000010000000000000001000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000010000000010000000001000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin19[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin20[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin21[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin22[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin23[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
// BR
	cfgsin31[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin30[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin29[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin28[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin27[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin26[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin25[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat138; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000010;
	cfgsin1[0:44] =  45 'b000000000000000000010000000000000000000010010;
	cfgsin2[0:44] =  45 'b000000000000000010000000000000000000010000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000010000000000000000000010000000000000;
	cfgsin5[0:44] =  45 'b000000000000001000000000000010000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000010000010001000000000;
	cfgsin7[0:44] =  45 'b000000000001000000000010000000001000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000010000000000000000000010000000000010;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000010000000;
	cfgsin13[0:44] =  45 'b000010000000010000000000000000000010000001000;
	cfgsin12[0:44] =  45 'b000000000010000000000000000000010000000000000;
	cfgsin11[0:44] =  45 'b000000010000000000000000000000000001000000000;
	cfgsin10[0:44] =  45 'b000010000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b010000000000000000000000000000000000000000001;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000000000000000000000010;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat137; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx0x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx0xx1010000100000100xx0xx00;
	cfgsin2[0:44] =  45 'b10000100000100xx0xx1010000001000100xx0xx10100;
	cfgsin3[0:44] =  45 'b00001000100xx1xx1010000001000100xx1xx10100000;
	cfgsin4[0:44] =  45 'b01000100xx0xx1001000001000100xx0xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx0xx1000001000001100xx0xx11000000010001;
	cfgsin6[0:44] =  45 'b00xx0xx1010000001000100xx0xx1100000000010100x;
	cfgsin7[0:44] =  45 'bx0xx1010000000100100xx0xx1100000001000010xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1100000001000100xx1xx1010000001000100xx1xx00;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx0xx10100;
	cfgsin13[0:44] =  45 'b00001000100xx0xx1010000100000100xx0xx00100000;
	cfgsin12[0:44] =  45 'b01000010xx0xx1010000100000100xx0xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx0xx1010000100000100xx1xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx0xx1010000001000100xx0xx1010000001000010x;
	cfgsin9[0:44] =  45 'bx0xx1010000100000100xx1xx1010000100000100xx0x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx0xx0010000100000100xx0xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat136; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000001000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx00;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx1100000001000001xx1xx01000;
	cfgsin3[0:44] =  45 'b00001000001xx1xx1100000001000001xx1xx11000000;
	cfgsin4[0:44] =  45 'b01000001xx1xx1100000001000001xx0xx00100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1100000001000100xx1xx00010000010000;
	cfgsin6[0:44] =  45 'b10xx0xx1100000001000001xx0xx1010000000100010x;
	cfgsin7[0:44] =  45 'bx0xx0010000001000010xx0xx0000100001000001xx0x;
// TR
	cfgsin15[0:44] =  45 'bx0010000001000010xx1xx0100000001000001xx1xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx0xx1010000100000100xx1xx00100;
	cfgsin13[0:44] =  45 'b00001000001xx1xx0010000100000100xx1xx00100000;
	cfgsin12[0:44] =  45 'b01000001xx1xx0010000100000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx1xx11000000010000;
	cfgsin10[0:44] =  45 'b10xx0xx0010000001000001xx1xx1010000001000010x;
	cfgsin9[0:44] =  45 'bx1xx0010000100000100xx0xx0010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat135; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000001000100x01000010000100000100xx00;
	cfgsin1[0:44] =  45 'b00010000100000100xx0000010000100000100xx00010;
	cfgsin2[0:44] =  45 'b10000100000100xx0000010000010000001xx00010100;
	cfgsin3[0:44] =  45 'b00010000001xx0000010000010000001xx00000100000;
	cfgsin4[0:44] =  45 'b10000001xx0000001000010000001xx01010100001000;
	cfgsin5[0:44] =  45 'b00100xx0000010000010000001xx00011000000000010;
	cfgsin6[0:44] =  45 'b01xx1000000100000001010xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0001100000010000010xx0101010000000100100xx10;
// TR
	cfgsin15[0:44] =  45 'b10010000001000010xx0001010000001000010xx00000;
	cfgsin14[0:44] =  45 'b10000100000100xx1000010000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00001000001xx0001010000100000100xx00011000000;
	cfgsin12[0:44] =  45 'b01000100xx0001010000100000100xx00000100001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000100000100xx00000010000010000;
	cfgsin10[0:44] =  45 'b01xx0000100000001000001xx0000100000001000100x;
	cfgsin9[0:44] =  45 'bx0001010000100000100xx0001010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001000100001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
end
endtask
task get_wl_pat134; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000001000001xx00000010;
	cfgsin3[0:44] =  45 'b00001000001xx0000001000001000001xx00000010000;
	cfgsin4[0:44] =  45 'b01000001xx0000001000001000001xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000010xx00000010000010000;
	cfgsin6[0:44] =  45 'b01xx0000000001001000100xx0000000010100000001x;
	cfgsin7[0:44] =  45 'bx1000001000100000001xx0000010000001000010xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000100000001000010xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00100010;
	cfgsin13[0:44] =  45 'b00001000100xx0000001000100000100xx00000010000;
	cfgsin12[0:44] =  45 'b01000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010000010000;
	cfgsin10[0:44] =  45 'b10xx0010000001001000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0100001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000000100001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x00000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin19[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin20[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin21[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin22[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin23[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin30[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin29[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin28[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin27[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin26[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin25[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
end
endtask
task get_wl_pat133; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000000001001000001xx00000010;
	cfgsin3[0:44] =  45 'b00001000001xx0000000001001000001xx00000010000;
	cfgsin4[0:44] =  45 'b01000001xx0000000001001000001xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000010000001xx00000010000010000;
	cfgsin6[0:44] =  45 'b01xx0000010000000100001xx1000001000010000100x;
	cfgsin7[0:44] =  45 'bx0000010000000100010xx0000000001100000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00000001000001010xx0000000001001000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00001000010xx0000001000100000100xx00000010000;
	cfgsin12[0:44] =  45 'b01000001xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010000100000;
	cfgsin10[0:44] =  45 'b01xx0100001000001000010xx0000001000001000010x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000000010001000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
end
endtask
task get_wl_pat132; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000001000001xx00100010;
	cfgsin3[0:44] =  45 'b00001000001xx0000001000001000001xx00100010000;
	cfgsin4[0:44] =  45 'b01000001xx0000001000001000001xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000000100001xx00000010000010000;
	cfgsin6[0:44] =  45 'b01xx0000001000100000001xx0000010000000001010x;
	cfgsin7[0:44] =  45 'bx0000001000001000010xx0000001000000001001xx00;
// TR
	cfgsin15[0:44] =  45 'b00000001010000010xx0000001000100000001xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00001000001xx0000001000100000100xx00000010000;
	cfgsin12[0:44] =  45 'b01000001xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010000000010;
	cfgsin10[0:44] =  45 'b01xx0000000010001000001xx0000001000000100010x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000000010100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
end
endtask
task get_wl_pat131; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000001000100xx00000010;
	cfgsin3[0:44] =  45 'b00001000010xx0000001000001000100xx00000010000;
	cfgsin4[0:44] =  45 'b01000010xx0000001000001000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000001000001xx00000010000010000;
	cfgsin6[0:44] =  45 'b10xx0000100000001000100xx0000000100000001100x;
	cfgsin7[0:44] =  45 'bx0000001000000100010xx0000001000000001010xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000010000100xx0000001000001000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00001000100xx0000001000100000100xx10000010000;
	cfgsin12[0:44] =  45 'b01000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010000100001;
	cfgsin10[0:44] =  45 'b00xx0000001000001000100xx0000100000010000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001001000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
end
endtask
task get_wl_pat130; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx1000001000100000100xx10;
	cfgsin1[0:44] =  45 'b00001000100000100xx1000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000001000010xx00000010;
	cfgsin3[0:44] =  45 'b00001000100xx1000001000001000010xx01000010000;
	cfgsin4[0:44] =  45 'b01000100xx1000001000001000010xx10010010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000010000010xx10011000000010001;
	cfgsin6[0:44] =  45 'b00xx0000000100001000001xx0101001000000001001x;
	cfgsin7[0:44] =  45 'bx0000001000000100100xx0001000010000001001xx00;
// TR
	cfgsin15[0:44] =  45 'b01001000000001010xx0001100000001000001xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0101001000100000100xx00000000;
	cfgsin13[0:44] =  45 'b10001000001xx1000001000100000100xx00001000000;
	cfgsin12[0:44] =  45 'b01000001xx1001001000100000100xx10000010001000;
	cfgsin11[0:44] =  45 'b00100xx1000001000100000100xx10001000000010000;
	cfgsin10[0:44] =  45 'b01xx1000001000001000001xx1000000010001000010x;
	cfgsin9[0:44] =  45 'bx1000001000100000100xx1000001000100000100xx10;
	cfgsin8[0:44] =  45 'bxx01001000100000100xx1000001000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
end
endtask
task get_wl_pat129; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx1001000100000100xx0x;
	cfgsin1[0:44] =  45 'bx1001000100000100xx0xx1001000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b01000100000100xx1xx1001000100000001xx1xx00010;
	cfgsin3[0:44] =  45 'b00100000001xx0xx1001000100000001xx0xx00010001;
	cfgsin4[0:44] =  45 'b00000001xx0xx1001000100000001xx0xx00010001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1000100000100100xx0xx00010000001000;
	cfgsin6[0:44] =  45 'b01xx1xx1000100000010010xx0xx0100000001000010x;
	cfgsin7[0:44] =  45 'bx1xx1000100001000001xx1xx0000001010000010xx1x;
// TR
	cfgsin15[0:44] =  45 'bx0000010001000010xx1xx0001000000010001xx1xx10;
	cfgsin14[0:44] =  45 'b01000100000100xx0xx0001000100000100xx1xx10001;
	cfgsin13[0:44] =  45 'b00100000001xx0xx1001000100000100xx0xx10010000;
	cfgsin12[0:44] =  45 'b01000001xx0xx0001000100000100xx0xx10010001000;
	cfgsin11[0:44] =  45 'b00100xx0xx1001000100000100xx0xx10010000010000;
	cfgsin10[0:44] =  45 'b01xx0xx1001000100000001xx0xx1001000001000010x;
	cfgsin9[0:44] =  45 'bx0xx1001000100000100xx0xx1001000100000100xx0x;
	cfgsin8[0:44] =  45 'bxxx0001000100000100xx0xx0001000100000100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
end
endtask
task get_wl_pat128; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000001x00xx1010000100000100x01x;
	cfgsin1[0:44] =  45 'bx1010000100000100x01xx1010000100000100x00xx01;
	cfgsin2[0:44] =  45 'b00000100000100x01xx0100000100000001x01xx10100;
	cfgsin3[0:44] =  45 'b00100000001x00xx1010000100000001x00xx11000001;
	cfgsin4[0:44] =  45 'b00000001x01xx1010000100000001x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000010000010x01xx10000100100001;
	cfgsin6[0:44] =  45 'b00x01xx1000010001000010x00xx1001000001000100x;
	cfgsin7[0:44] =  45 'b00xx1001000001000100x01xx1001000100000010x00x;
// TR
	cfgsin15[0:44] =  45 'bx1000010001000100x00xx1100000100000010x00xx11;
	cfgsin14[0:44] =  45 'b00000100000100x00xx1100000100000100x01xx11000;
	cfgsin13[0:44] =  45 'b00010000001x01xx1100000100000100x01xx10001000;
	cfgsin12[0:44] =  45 'b01000100x01xx1100000100000100x01xx11000001000;
	cfgsin11[0:44] =  45 'b00100x01xx1100000100000100x00xx10010001000000;
	cfgsin10[0:44] =  45 'b10x00xx1100000010000001x00xx1100000001000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x00xx1100000100000100x00x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x00xx0010000100000001x00x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100x01xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat127; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx1000010000100000100x000;
	cfgsin1[0:44] =  45 'b00010000100000100x00000010000100000100x001011;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000000010001x000000100;
	cfgsin3[0:44] =  45 'b00100000001x01000010000000010001x001001000001;
	cfgsin4[0:44] =  45 'b00000001x00000010000000010001x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000000010100000001x000001000000100000;
	cfgsin6[0:44] =  45 'b10x00000100000010000100x00000010000010000001x;
	cfgsin7[0:44] =  45 'b10000010000100000001x00000010000000100100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000001000001x01000100000010000100x110001;
	cfgsin14[0:44] =  45 'b00000100000100x00100100000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000001x10000100000100000100x000001000000;
	cfgsin12[0:44] =  45 'b01000010x00000100000100000100x000001000001000;
	cfgsin11[0:44] =  45 'b00100x00000100000100000100x010000100000100001;
	cfgsin10[0:44] =  45 'b00x00100100000100000001x11000010000001000001x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x001;
	cfgsin8[0:44] =  45 'bxx00100000100000100x01001000100100000100xx01x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000100x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin20[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin21[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
end
endtask
task get_wl_pat126; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000001xx0000010000100000100x100;
	cfgsin1[0:44] =  45 'b00010000100000100x10000010000100000100x100001;
	cfgsin2[0:44] =  45 'b00000100000100x10000010000100000001x100000100;
	cfgsin3[0:44] =  45 'b00100000001x10000010000100000001x100000100001;
	cfgsin4[0:44] =  45 'b00000001x10000010000100000001x100001000001000;
	cfgsin5[0:44] =  45 'b00100x10000010000000001100x100000100001000000;
	cfgsin6[0:44] =  45 'b01x10000010000100000001x10000000010001000010x;
	cfgsin7[0:44] =  45 'b10100000010001000010x10000010000000001001x100;
// TR
	cfgsin15[0:44] =  45 'b00100000001000010x10000010000000001001x100001;
	cfgsin14[0:44] =  45 'b00000100000100x10000100000100000100x100000100;
	cfgsin13[0:44] =  45 'b00100000001x10000100000100000100x100000100001;
	cfgsin12[0:44] =  45 'b00000001x10000100000100000100x100001000001000;
	cfgsin11[0:44] =  45 'b00100x10000100000100000100x100000100000000010;
	cfgsin10[0:44] =  45 'b01x10000010000100000001x10000100000001000010x;
	cfgsin9[0:44] =  45 'b10000100000100000100x11000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin20[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin21[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
end
endtask
task get_wl_pat125; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00010010000100000001x000000100;
	cfgsin3[0:44] =  45 'b00100000001x00000010000100000001x000000100001;
	cfgsin4[0:44] =  45 'b00000001x00000010000100000001x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000000001010x000000010000100000;
	cfgsin6[0:44] =  45 'b01x00000000100001000100x01000100000001000100x;
	cfgsin7[0:44] =  45 'b00000000010000010010x10000001000100000010x001;
// TR
	cfgsin15[0:44] =  45 'b00000010100000100x10000010000000100010x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000001x00000010000100000100x000000100000;
	cfgsin12[0:44] =  45 'b01000001x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100000000010;
	cfgsin10[0:44] =  45 'b10x00000010000100000001x00000100000001000010x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000010xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin18[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin19[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin20[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin21[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin22[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin23[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin30[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin29[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin28[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin27[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin26[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin25[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat124; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000001x000001000;
	cfgsin3[0:44] =  45 'b00100000001x00000100000100000001x000001000001;
	cfgsin4[0:44] =  45 'b00000001x00000100000100000001x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000000010001000100x100010010000000011;
	cfgsin6[0:44] =  45 'b00x10000000010000001100x00000001000000001010x;
	cfgsin7[0:44] =  45 'b00000100000000010010x00000001000000010010x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000000001001x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000001x00000010000100000100x000001000000;
	cfgsin12[0:44] =  45 'b00100001x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100000001001;
	cfgsin10[0:44] =  45 'b00x10000100000100000001x00000010000001000010x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000000100010000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat123; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000001x000001000;
	cfgsin3[0:44] =  45 'b00100000001x00000100000100000001x000001000001;
	cfgsin4[0:44] =  45 'b00000001x00000100000100000001x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00001010000000100010x000001000000100000;
	cfgsin6[0:44] =  45 'b01x01000001000000001001x00100000001001000010x;
	cfgsin7[0:44] =  45 'b00000100000001000100x00000000010001000100x000;
// TR
	cfgsin15[0:44] =  45 'b10010000001000001x00000100000000001001x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00000100001x00000010000100000100x000000100000;
	cfgsin12[0:44] =  45 'b10000001x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00001010000100000100x000001000000010000;
	cfgsin10[0:44] =  45 'b10x00000010000000010001x00000010000001000010x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat122; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000001001000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000000001001x000000001;
	cfgsin3[0:44] =  45 'b00000001001x00000100000000001001x000000001000;
	cfgsin4[0:44] =  45 'b00001001x00000100000000001001x000011000001000;
	cfgsin5[0:44] =  45 'b00100x00000001000000001001x000000100000100000;
	cfgsin6[0:44] =  45 'b01x00001100000000001010x00000001000001000001x;
	cfgsin7[0:44] =  45 'b01000000001001000010x00101100000001000001x000;
// TR
	cfgsin15[0:44] =  45 'b00000001001000100x00010100000000001010x000010;
	cfgsin14[0:44] =  45 'b01000100000100x00000001000100000100x000000010;
	cfgsin13[0:44] =  45 'b00100000100x00000001000100000100x000000100000;
	cfgsin12[0:44] =  45 'b01000010x00000001000100000100x000010010001000;
	cfgsin11[0:44] =  45 'b00100x00000001000100000100x000011000000000010;
	cfgsin10[0:44] =  45 'b10x00000001000100000100x00000010000001000001x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000000010000100000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat121; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000001x01xx11000;
	cfgsin3[0:44] =  45 'b00010000001x01xx1100000100000001x01xx11000000;
	cfgsin4[0:44] =  45 'b10000001x01xx1100000100000001x01xx01000001000;
	cfgsin5[0:44] =  45 'b00100x01xx0000100001000100x01xx01000001000000;
	cfgsin6[0:44] =  45 'b10x00xx0001000000100100x00xx1010000000001010x;
	cfgsin7[0:44] =  45 'b00xx1010000010000100x00xx0000010000010100x01x;
// TR
	cfgsin15[0:44] =  45 'bx0001000010000100x01xx0000010001000001x01xx00;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000001x01xx1001000100000100x01xx11000000;
	cfgsin12[0:44] =  45 'b01000001x01xx1001000100000100x01xx00010001000;
	cfgsin11[0:44] =  45 'b00100x01xx0001000100000100x01xx00100000001001;
	cfgsin10[0:44] =  45 'b00x01xx1001000100000001x01xx1001000000100010x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100000000010000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
end
endtask
task get_wl_pat120; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000001xx0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000001x01xx11000;
	cfgsin3[0:44] =  45 'b00010000001x01xx1100000100000001x01xx11000000;
	cfgsin4[0:44] =  45 'b10000001x01xx1100000100000001x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1100000001000010x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1000100000010001x00xx1100000000010100x;
	cfgsin7[0:44] =  45 'b01xx1100000010000001x01xx1010000100000010x01x;
// TR
	cfgsin15[0:44] =  45 'bx0100000100000001x00xx0010000010000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00000100001x01xx1001000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000001x01xx1001000100000100x01xx10010001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000100000100x01xx10001000001000;
	cfgsin10[0:44] =  45 'b01x01xx0001000000010001x01xx0100000100000010x;
	cfgsin9[0:44] =  45 'b00xx1100000100000100x00xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x1xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
end
endtask
task get_wl_pat119; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000001xx00000100;
	cfgsin3[0:44] =  45 'b00100000001xx0000100000100000001xx00000100001;
	cfgsin4[0:44] =  45 'b00000001xx0000100000100000001xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000000100010000001xx00000010000100000;
	cfgsin6[0:44] =  45 'b01xx0000000010000100010xx0000000100000001001x;
	cfgsin7[0:44] =  45 'bx0000000001000100010xx0000000001100000001xx00;
// TR
	cfgsin15[0:44] =  45 'b01000100010000010xx1000001000001000010xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00000100000;
	cfgsin12[0:44] =  45 'b10000001xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00000100000001000;
	cfgsin10[0:44] =  45 'b10xx0001100000100000100xx0000010000010000010x;
	cfgsin9[0:44] =  45 'bx1000100000100000100xx1000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001000001100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100xx1xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
end
endtask
task get_wl_pat118; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000001xx00000100;
	cfgsin3[0:44] =  45 'b00010000001xx0000100000100000001xx00000100000;
	cfgsin4[0:44] =  45 'b10000001xx0000100000100000001xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000001000001xx00000100000000010;
	cfgsin6[0:44] =  45 'b01xx0000001000100000001xx0100001000100000010x;
	cfgsin7[0:44] =  45 'bx0000100000001000010xx0000001000100000010xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000000010010xx0010010000100000001xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00000000;
	cfgsin13[0:44] =  45 'b01100000001xx0000100000100000100xx00000100000;
	cfgsin12[0:44] =  45 'b00001001xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00000010001000000;
	cfgsin10[0:44] =  45 'b10xx0000000001100000001xx0000010000000001010x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000100000100000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat117; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx001x001xx0000100000xx100x100xx00;
	cfgsin1[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin2[0:44] =  45 'b00000xx100x100xx0000100000xx010x001xx00000100;
	cfgsin3[0:44] =  45 'b00xx010x001xx0000100000xx010x001xx0000010000x;
	cfgsin4[0:44] =  45 'bx010x001xx0000100000xx010x001xx0000100000xx10;
	cfgsin5[0:44] =  45 'b0x100xx0000000100xx010x100xx0000100000xx001x0;
	cfgsin6[0:44] =  45 'b01xx0000000001xx010x100xx0000010000xx001x100x;
	cfgsin7[0:44] =  45 'bx0000100000xx010x100xx0000000100xx001x100xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000xx010x001xx0000000010xx010x100xx00001;
	cfgsin14[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00000000;
	cfgsin13[0:44] =  45 'b01xx100x010xx0000100000xx100x100xx0000010000x;
	cfgsin12[0:44] =  45 'bx100x010xx0000100000xx100x100xx0000100000xx10;
	cfgsin11[0:44] =  45 'b0x100xx0000100000xx100x100xx0000010000xx010x1;
	cfgsin10[0:44] =  45 'b00xx0000000001xx100x010xx0001010000xx100x001x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000000010xx100x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat116; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx001x001x00000100000xx100x1000x00;
	cfgsin1[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin2[0:44] =  45 'b00000xx100x1000x0000100000xx001x0101x00000100;
	cfgsin3[0:44] =  45 'b00xx001x0101x0000100000xx001x0101x0000010000x;
	cfgsin4[0:44] =  45 'bx001x0101x0000100000xx001x0101x0000100000xx10;
	cfgsin5[0:44] =  45 'b0x1000x0000001000xx100x0101x0000000001xx001x1;
	cfgsin6[0:44] =  45 'b001x0000010000xx001x1001x0001000001xx010x0011;
	cfgsin7[0:44] =  45 'bx0000000001xx010x1001x0000010000xx010x1001x00;
// TR
	cfgsin15[0:44] =  45 'b01010000xx010x0011x0000001000xx001x0101x00001;
	cfgsin14[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00000000;
	cfgsin13[0:44] =  45 'b01xx001x1001x0000100000xx100x1000x0000000001x;
	cfgsin12[0:44] =  45 'bx001x1001x0000100000xx100x1000x0000100000xx10;
	cfgsin11[0:44] =  45 'b0x1000x0000100000xx100x1000x0000000100xx001x0;
	cfgsin10[0:44] =  45 'b101x0000000001xx001x1001x0000000001xx010x1001;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000100000xx100x010x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin19[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin20[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin21[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin22[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin23[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin30[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin29[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin28[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin27[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin26[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
end
endtask
task get_wl_pat115; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000001000001000000100000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000001000000000000000000100000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000010000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin18[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin19[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin20[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin21[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin22[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin23[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin30[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin29[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin28[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin27[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin26[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin25[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx100x001x0000;
end
endtask
task get_wl_pat114; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b001000000000000000010000000000000000000010000;
	cfgsin2[0:44] =  45 'b000000010000000010000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000010000000001000000010001000000010000000;
	cfgsin6[0:44] =  45 'b010000010000000000000000000001000110010000000;
	cfgsin7[0:44] =  45 'b010000000000000000010000100100000000100000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000010000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000010000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000010000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000010000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000001000000000;
	cfgsin8[0:44] =  45 'bxx0000000000100000000000100000000100000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat113; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110010100xx110x0110x0110001101x;
	cfgsin1[0:44] =  45 'bx100x0110x0110010100xx110x0110x0110001100xx11;
	cfgsin2[0:44] =  45 'b0x0110x0010001100xx110x0110x0110001101xx110x0;
	cfgsin3[0:44] =  45 'b110x0110001101xx110x0110x1010101001xx110x0110;
	cfgsin4[0:44] =  45 'bx0110001101xx110x0110x0101001101xx110x0110x10;
	cfgsin5[0:44] =  45 'b10010100xx110x0100x0110100000xx110x0100x01100;
	cfgsin6[0:44] =  45 'b00100xx010x0001x0100001101xx000x0000x00100011;
	cfgsin7[0:44] =  45 'b00xx110x1000x0110000101xx000x0010x0100010101x;
// TR
	cfgsin15[0:44] =  45 'bx010x0110x0110001101xx110x1000x0110001101xx11;
	cfgsin14[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin13[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin12[0:44] =  45 'bx0110001101xx110x0110x0100001101xx110x0101x01;
	cfgsin11[0:44] =  45 'b10010101xx110x0101x0110000101xx110x0110x01100;
	cfgsin10[0:44] =  45 'b01101xx110x1010x0110001101xx001x0110x01010011;
	cfgsin9[0:44] =  45 'b01xx010x0110x0110001101xx110x0110x0010001101x;
	cfgsin8[0:44] =  45 'bxxx110x1010x0010001101xx001x1001x0001010011xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat112; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x010000000010010x0110x00100011000;
	cfgsin1[0:44] =  45 'b0010x0110x101000100000010x0110x00100011000001;
	cfgsin2[0:44] =  45 'b0x0100x100000101000010x0110x000000000000000x0;
	cfgsin3[0:44] =  45 'b010x011000010000000x0110x011000110000010x1010;
	cfgsin4[0:44] =  45 'bx011001010000010x0100x001000100000010x0110x01;
	cfgsin5[0:44] =  45 'b1000110000010x0110x011000110100010x0110x01100;
	cfgsin6[0:44] =  45 'b0110000010x0100x011000110000010x0000x01001010;
	cfgsin7[0:44] =  45 'b0000010x0110x001000110000000x0100x01101010000;
// TR
	cfgsin15[0:44] =  45 'b0010x0010x001000110000010x0110x01100011000000;
	cfgsin14[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin13[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin12[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin11[0:44] =  45 'b1000110000010x0110x011000110000010x0100x01100;
	cfgsin10[0:44] =  45 'b0110000010x0110x011000110100010x0110x01100011;
	cfgsin9[0:44] =  45 'b0100010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x011000110000000x1000x10000100100x;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin19[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin20[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin21[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin22[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin23[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// BR
	cfgsin31[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin30[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin29[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin28[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin27[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin26[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
end
endtask
task get_wl_pat111; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000100010000000000000010000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000010000000000000;
	cfgsin2[0:44] =  45 'b000010000100000010010000000000100000000001000;
	cfgsin3[0:44] =  45 'b100000000010000000100000000000000001000000000;
	cfgsin4[0:44] =  45 'b000000000000000000001001000001000000000000000;
	cfgsin5[0:44] =  45 'b000000001000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000001000000010000;
	cfgsin7[0:44] =  45 'b000000000000001000000000000100000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000100001000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000001;
	cfgsin8[0:44] =  45 'bxx000000000000000000001101000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin19[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin20[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin21[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin22[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin23[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
// BR
	cfgsin31[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin30[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin29[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin28[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin27[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin26[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin25[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat110; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000100000000000000000000010;
	cfgsin1[0:44] =  45 'b010000000000000001010000000000000000000010010;
	cfgsin2[0:44] =  45 'b000000000000000000000000000001000011000000000;
	cfgsin3[0:44] =  45 'b000000000000010100000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000010000000000000000010000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000010010000001000000000010000000001000000000;
	cfgsin7[0:44] =  45 'b001000000000000000000010000000001000000000010;
// TR
	cfgsin15[0:44] =  45 'b010000000000000000010000000000000000000010001;
	cfgsin14[0:44] =  45 'b000000000000000010000000000000000000010010000;
	cfgsin13[0:44] =  45 'b000000000000010000000000000000000010000000000;
	cfgsin12[0:44] =  45 'b000000000010000000000000000000010010000000000;
	cfgsin11[0:44] =  45 'b000000010000000000000000000010000000000100000;
	cfgsin10[0:44] =  45 'b000010000000000000000000000010000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000010000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000000000100001000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat109; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx0x;
	cfgsin1[0:44] =  45 'bx0010000100000100xx0xx1100000010000100xx0xx00;
	cfgsin2[0:44] =  45 'b00010001000100xx0xx0010000001000010xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx0xx0010000001000100xx0xx10100000;
	cfgsin4[0:44] =  45 'b01000100xx1xx0001000001000100xx0xx10100000010;
	cfgsin5[0:44] =  45 'b00100xx0xx1000001000001100xx0xx10100000010001;
	cfgsin6[0:44] =  45 'b00xx0xx0010000001000100xx0xx1000001100000010x;
	cfgsin7[0:44] =  45 'bx0xx1100000001000100xx0xx1100000000001010xx0x;
// TR
	cfgsin15[0:44] =  45 'bx0100000010000100xx0xx1010000100000100xx0xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx0xx1010000100000100xx0xx00100;
	cfgsin13[0:44] =  45 'b00100000100xx0xx1010000100000100xx0xx10100001;
	cfgsin12[0:44] =  45 'b00000100xx0xx1010000100000100xx0xx00100001000;
	cfgsin11[0:44] =  45 'b00100xx0xx1010000100000100xx0xx10100000010000;
	cfgsin10[0:44] =  45 'b10xx0xx1010000001000100xx0xx0010000100000100x;
	cfgsin9[0:44] =  45 'bx0xx1010000100000100xx0xx1010000100000100xx0x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx0xx0100000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat108; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000001000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1001000010000010xx0xx01;
	cfgsin2[0:44] =  45 'b00000001000001xx1xx1100000000010100xx0xx11000;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1100000001000001xx1xx11000000;
	cfgsin4[0:44] =  45 'b01000001xx1xx1100000001000001xx0xx01000000010;
	cfgsin5[0:44] =  45 'b00001xx1xx1010000000100010xx1xx11000000010000;
	cfgsin6[0:44] =  45 'b01xx1xx0100000001000001xx1xx1100000000001010x;
	cfgsin7[0:44] =  45 'bx0xx1100000001000001xx0xx1000100001000001xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000010000100xx0xx0010000100000100xx1xx00;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin12[0:44] =  45 'b00000100xx1xx0010000100000100xx1xx00100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx1xx11000000010000;
	cfgsin10[0:44] =  45 'b01xx1xx1010000001000001xx1xx1010000010000010x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx0010000100000100xx0x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0000100100000100xx0xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat107; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000001000100x01000010000100000100xx00;
	cfgsin1[0:44] =  45 'b00010000100000100xx0000000010010000010xx01010;
	cfgsin2[0:44] =  45 'b00010001000001xx0000000010001000010xx01000100;
	cfgsin3[0:44] =  45 'b00010000100xx0000000010000010001xx00000100000;
	cfgsin4[0:44] =  45 'b10000001xx0000001000010000001xx01010100001000;
	cfgsin5[0:44] =  45 'b00001xx0000100000010000001xx00000100000100000;
	cfgsin6[0:44] =  45 'b01xx0001010000001000001xx0000001000010000100x;
	cfgsin7[0:44] =  45 'bx1000010000001000001xx0000000001000100100xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000010000100xx0101010000100000100xx00010;
	cfgsin14[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin13[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin12[0:44] =  45 'b00000100xx0001010000100000100xx00010100001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000100000100xx00000000010010001;
	cfgsin10[0:44] =  45 'b00xx0000100000001000010xx0000100000100000010x;
	cfgsin9[0:44] =  45 'bx0000010000100000100xx0001010000100000100xx10;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001010000000010100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
end
endtask
task get_wl_pat106; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000000010010000100xx00000;
	cfgsin2[0:44] =  45 'b01000001000010xx0000000010001000001xx00000000;
	cfgsin3[0:44] =  45 'b10100000100xx0000001000001000001xx00000001000;
	cfgsin4[0:44] =  45 'b01000001xx0000001000001000001xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx0000000100100000100xx00000010000010000;
	cfgsin6[0:44] =  45 'b01xx0000001000001000001xx0000010000000100001x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0100010000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010000010000;
	cfgsin10[0:44] =  45 'b01xx0000000100001000100xx0000000100100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000000100000100010xx100;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x00000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin19[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin20[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin21[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin22[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin23[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin30[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin29[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin28[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin27[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin26[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin25[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
end
endtask
task get_wl_pat105; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000010000010xx00000;
	cfgsin2[0:44] =  45 'b00010001000001xx0000001000010000010xx00000000;
	cfgsin3[0:44] =  45 'b10100000100xx0000001000001000001xx00000001000;
	cfgsin4[0:44] =  45 'b01000001xx0000001000001000001xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx0000001000010000001xx00000000010010000;
	cfgsin6[0:44] =  45 'b01xx0000000001001000001xx0000001000000001010x;
	cfgsin7[0:44] =  45 'bx0000000001000001001xx0000000010010000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000000001100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010000010000;
	cfgsin10[0:44] =  45 'b01xx0000000001001000010xx0000001000100000001x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000100000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
end
endtask
task get_wl_pat104; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000000100010xx00000;
	cfgsin2[0:44] =  45 'b01000001000001xx0000010000000100010xx00000000;
	cfgsin3[0:44] =  45 'b10100000100xx0000000010001000001xx00100001000;
	cfgsin4[0:44] =  45 'b01000001xx0000001000001000001xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx0000100000000100010xx00100010000010000;
	cfgsin6[0:44] =  45 'b01xx0000001000001000001xx0000000010001000010x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0000001000000001001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000001000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010000010000;
	cfgsin10[0:44] =  45 'b01xx0000100000100000001xx0000000010100000010x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0010000001100000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
end
endtask
task get_wl_pat103; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0100010000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000001000100xx0000010000100000001xx00000001;
	cfgsin3[0:44] =  45 'b00100000010xx0000001000001000010xx00000010000;
	cfgsin4[0:44] =  45 'b01000010xx0000001000001000010xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx0001000100000010100xx00000010000010001;
	cfgsin6[0:44] =  45 'b00xx0000001000001000100xx0000000010100000010x;
	cfgsin7[0:44] =  45 'bx0100001000001000100xx0000000010000001010xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000010000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0010001000100000100xx00010010000010001;
	cfgsin10[0:44] =  45 'b00xx0000001000000010100xx0000001000000010100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000000001000001100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
end
endtask
task get_wl_pat102; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx1000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000000001010xx01000;
	cfgsin2[0:44] =  45 'b01000001000001xx1000001000001000100xx10010001;
	cfgsin3[0:44] =  45 'b00100000100xx1000001000001000100xx10000010000;
	cfgsin4[0:44] =  45 'b01000100xx1001001000001000100xx10000010000010;
	cfgsin5[0:44] =  45 'b00100xx1000001000010000010xx10000010000010000;
	cfgsin6[0:44] =  45 'b10xx1000000010001000001xx0001100000000010100x;
	cfgsin7[0:44] =  45 'bx0001001000001000001xx1000000100000001001xx01;
// TR
	cfgsin15[0:44] =  45 'b00001000000001100xx0100001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx1001001000100000100xx00010010;
	cfgsin13[0:44] =  45 'b00100000100xx1000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx1000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx1000001000100000100xx00001000000010000;
	cfgsin10[0:44] =  45 'b01xx1000100000001000001xx0000001000100000010x;
	cfgsin9[0:44] =  45 'bx1000001000100000100xx0000001000100000100xx10;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000000100001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
end
endtask
task get_wl_pat101; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx1001000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1001000100000100xx0xx1001000001000010xx0xx10;
	cfgsin2[0:44] =  45 'b01000100000001xx0xx1000100001000010xx0xx00010;
	cfgsin3[0:44] =  45 'b00100000001xx0xx1001000100000001xx0xx00010001;
	cfgsin4[0:44] =  45 'b00000001xx0xx0001000100000001xx0xx10010001000;
	cfgsin5[0:44] =  45 'b00010xx0xx0100000001000010xx0xx00010001000000;
	cfgsin6[0:44] =  45 'b01xx0xx1001000100000001xx1xx0001000001000001x;
	cfgsin7[0:44] =  45 'bx0xx0001000010000001xx0xx1001000100000100xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1000100100000100xx0xx1001000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b01000100000100xx0xx0001000100000100xx1xx00010;
	cfgsin13[0:44] =  45 'b00100000100xx0xx1001000100000100xx1xx10010001;
	cfgsin12[0:44] =  45 'b00000100xx0xx1001000100000100xx1xx10010001000;
	cfgsin11[0:44] =  45 'b00100xx0xx0001000100000100xx1xx00010000100000;
	cfgsin10[0:44] =  45 'b01xx0xx1001000000010001xx1xx1001000001000010x;
	cfgsin9[0:44] =  45 'bx0xx1001000100000100xx1xx1001000100000100xx0x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0000100010000100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
end
endtask
task get_wl_pat100; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000001x01xx1010000100000100x01x;
	cfgsin1[0:44] =  45 'bx0010000100000100x01xx0010000001000010x00xx00;
	cfgsin2[0:44] =  45 'b01000000010001x00xx1010000001000010x00xx00100;
	cfgsin3[0:44] =  45 'b00100000100x01xx1010000100000001x00xx11000001;
	cfgsin4[0:44] =  45 'b00000001x00xx0000100100000001x01xx01000001000;
	cfgsin5[0:44] =  45 'b00001x01xx1100000001000100x01xx11000001000000;
	cfgsin6[0:44] =  45 'b01x01xx1000010100000010x01xx1010000001000001x;
	cfgsin7[0:44] =  45 'b00xx1000010010000010x00xx1010000100000010x00x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000010x00xx1100000100000100x01xx11;
	cfgsin14[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin13[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin12[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin11[0:44] =  45 'b00100x01xx1100000100000100x01xx11000000100000;
	cfgsin10[0:44] =  45 'b10x01xx1100000010000100x01xx1100000001000010x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x00xx1100000100000100x00x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0010000100000001x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100x01xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat99; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000010000100000100x000;
	cfgsin1[0:44] =  45 'b01010000100000100x00001010000001000010x000011;
	cfgsin2[0:44] =  45 'b00000100000001x01000010000000001010x000000100;
	cfgsin3[0:44] =  45 'b00100000100x00000010000100000001x010001000001;
	cfgsin4[0:44] =  45 'b00000001x01010010000100000001x000001000000100;
	cfgsin5[0:44] =  45 'b00001x00000010000001000001x100001000000000100;
	cfgsin6[0:44] =  45 'b01x00000100000100000100x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000001000010000100x00000000010100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00000010100000001x00100100000100000100x000001;
	cfgsin14[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin12[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin11[0:44] =  45 'b00100x00000100000100000100x000001000000100001;
	cfgsin10[0:44] =  45 'b00x00000010000001000010x10000010000001000010x;
	cfgsin9[0:44] =  45 'b10000100000100000100x00000100000100000100x001;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00001000100010000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000100x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin20[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin21[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
end
endtask
task get_wl_pat98; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000001xx0000010000100000100x100;
	cfgsin1[0:44] =  45 'b00010000100000100x10000010000001000010x100000;
	cfgsin2[0:44] =  45 'b10000100000001x10000100000001000010x110000100;
	cfgsin3[0:44] =  45 'b00100000100x10000010000100000001x100000100001;
	cfgsin4[0:44] =  45 'b00000001x10000010000100000001x100000100001000;
	cfgsin5[0:44] =  45 'b00001x10000100000001000010x100000100001000000;
	cfgsin6[0:44] =  45 'b01x10000010000000010001x10000000010001000010x;
	cfgsin7[0:44] =  45 'b10000010000100000001x11000010000000001100x100;
// TR
	cfgsin15[0:44] =  45 'b00001000001000100x10000100000100000100x100001;
	cfgsin14[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin13[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin12[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin11[0:44] =  45 'b00100x10000100000100000100x100000100000000010;
	cfgsin10[0:44] =  45 'b01x10000010000100000001x10000100000001000010x;
	cfgsin9[0:44] =  45 'b10000100000100000100x11000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000000100010xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin20[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin21[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
end
endtask
task get_wl_pat97; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000001000100x101001;
	cfgsin2[0:44] =  45 'b00000100000001x00000010000000001010x000100100;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000001x000000100001;
	cfgsin4[0:44] =  45 'b00000001x00000010000100000001x000101000001000;
	cfgsin5[0:44] =  45 'b00001x00000100000001000100x000000100001000000;
	cfgsin6[0:44] =  45 'b01x00000001000000001001x00000000010000100001x;
	cfgsin7[0:44] =  45 'b01000100000000010010x10000000010100000100x010;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x10000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100000001000;
	cfgsin10[0:44] =  45 'b10x00000010000000100010x00000100000001000010x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000010000010xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin18[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin19[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin20[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin21[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin22[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin23[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin30[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin29[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin28[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin27[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin26[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin25[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat96; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000001000010x000001;
	cfgsin2[0:44] =  45 'b00000100000001x00010100000001000001x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000001x000001000001;
	cfgsin4[0:44] =  45 'b00000001x00000100000100000001x000000100001000;
	cfgsin5[0:44] =  45 'b00001x00000000010010000010x000000010001000000;
	cfgsin6[0:44] =  45 'b01x00000001000000100010x00000100000000001001x;
	cfgsin7[0:44] =  45 'b00001100000001000010x00000001000001000100x000;
// TR
	cfgsin15[0:44] =  45 'b00001000010000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000000;
	cfgsin10[0:44] =  45 'b01x00000100000010000001x00000010000001000010x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000000001100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat95; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000000001001000010x000011;
	cfgsin2[0:44] =  45 'b00000100000001x01000000100001000010x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000001x000001000001;
	cfgsin4[0:44] =  45 'b00000001x00000100000100000001x000000000101000;
	cfgsin5[0:44] =  45 'b00001x00000100000001000010x000000010001000000;
	cfgsin6[0:44] =  45 'b01x00000001000100000010x00100001000000001010x;
	cfgsin7[0:44] =  45 'b00000100000010000001x00000001000000100001x001;
// TR
	cfgsin15[0:44] =  45 'b00010000100000001x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000001000000100000;
	cfgsin10[0:44] =  45 'b01x00000010000001000001x00000010000001000010x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000000100001000010x0100;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat94; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000001001000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000001000001000010x000000;
	cfgsin2[0:44] =  45 'b00001000001100x00000100000000001010x001001000;
	cfgsin3[0:44] =  45 'b00000001100x00000100000000001001x000000000100;
	cfgsin4[0:44] =  45 'b00001001x00000100000000001001x000001000000000;
	cfgsin5[0:44] =  45 'b01001x00000010000001000100x000000100000000010;
	cfgsin6[0:44] =  45 'b01x00000100000000001001x00010100000000001010x;
	cfgsin7[0:44] =  45 'b00100100000000001001x00000000001000010001x000;
// TR
	cfgsin15[0:44] =  45 'b00000100100000100x00100001000100000100x000000;
	cfgsin14[0:44] =  45 'b01000100000100x00000001000100000100x000000010;
	cfgsin13[0:44] =  45 'b00100000100x00000001000100000100x000000010001;
	cfgsin12[0:44] =  45 'b00000100x00000001000100000100x000000010001000;
	cfgsin11[0:44] =  45 'b00100x00000001000100000100x000001000000000010;
	cfgsin10[0:44] =  45 'b01x00000001000001000100x00000001000001000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x010011000000100000100000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat93; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000001000001x01xx01;
	cfgsin2[0:44] =  45 'b00000010000001x00xx0100000000010100x00xx11000;
	cfgsin3[0:44] =  45 'b00001000100x01xx1100000100000001x01xx11000000;
	cfgsin4[0:44] =  45 'b10000001x01xx1100000100000001x01xx11000001000;
	cfgsin5[0:44] =  45 'b00001x01xx1010000100000010x01xx10100001000000;
	cfgsin6[0:44] =  45 'b01x01xx1010000010000100x00xx0010000000010001x;
	cfgsin7[0:44] =  45 'b00xx0000001010000100x01xx1010000000010100x00x;
// TR
	cfgsin15[0:44] =  45 'bx1000100001000010x00xx1001000100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000100x01xx1001000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000100x01xx1001000100000100x01xx10010001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000100000100x01xx10100000000010;
	cfgsin10[0:44] =  45 'b10x01xx1100000100000001x01xx1001000100000010x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x00xx00001001000000010x0x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100000000010000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
end
endtask
task get_wl_pat92; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000001xx0xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1000001000010100x11xx11;
	cfgsin2[0:44] =  45 'b00000010000001x01xx1000001100000001x01xx01000;
	cfgsin3[0:44] =  45 'b00001000100x01xx0100000100000001x01xx01000000;
	cfgsin4[0:44] =  45 'b10000001x01xx0100000100000001x01xx11000001000;
	cfgsin5[0:44] =  45 'b00001x01xx1100000000010001x01xx10100001000000;
	cfgsin6[0:44] =  45 'b01x01xx1010000010000010x01xx1001000001000100x;
	cfgsin7[0:44] =  45 'b01xx1010000010000010x01xx1100000000001010x00x;
// TR
	cfgsin15[0:44] =  45 'bx1100000001000001x00xx1001000100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000100x01xx1001000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000100x01xx1001000100000100x01xx10010001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000100000100x01xx10010000010001;
	cfgsin10[0:44] =  45 'b00x01xx1010000000010010x01xx1001000000010010x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x00xx0100000100000100xx0xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x1xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
end
endtask
task get_wl_pat91; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000000001001000010xx00000;
	cfgsin2[0:44] =  45 'b10000010000001xx0000100000000100100xx00100010;
	cfgsin3[0:44] =  45 'b00000100100xx0000100000000001001xx00010100001;
	cfgsin4[0:44] =  45 'b00000001xx0000100000001000001xx00001000000100;
	cfgsin5[0:44] =  45 'b00001xx0000000100100000100xx00001000001000000;
	cfgsin6[0:44] =  45 'b01xx0000010000010000001xx0000001000000001010x;
	cfgsin7[0:44] =  45 'bx0000010000010000001xx0000000001000100001xx00;
// TR
	cfgsin15[0:44] =  45 'b00000100001000100xx0100100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00000010000010000;
	cfgsin10[0:44] =  45 'b01xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001010000100000010xx010;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100xx1xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
end
endtask
task get_wl_pat90; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000001000100xx00000;
	cfgsin2[0:44] =  45 'b01000010000001xx0000010000100000010xx00000010;
	cfgsin3[0:44] =  45 'b00001000100xx0000100000100000001xx00000100000;
	cfgsin4[0:44] =  45 'b10000001xx0000100000100000001xx00001000001000;
	cfgsin5[0:44] =  45 'b00001xx0000000001000001010xx00001000001000000;
	cfgsin6[0:44] =  45 'b01xx0000001000100000001xx0000010000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000001xx0000100000001000100xx01;
// TR
	cfgsin15[0:44] =  45 'b00001000001000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00000100001000000;
	cfgsin10[0:44] =  45 'b01xx0000000001000001010xx0000000001100000010x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0100000100100000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat89; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx001x001xx0000100000xx100x100xx00;
	cfgsin1[0:44] =  45 'b00100000xx100x100xx0000010000xx001x001xx00001;
	cfgsin2[0:44] =  45 'b00000xx010x100xx0000000001xx010x001xx00000010;
	cfgsin3[0:44] =  45 'b00xx010x100xx0010100000xx010x001xx0000010000x;
	cfgsin4[0:44] =  45 'bx010x001xx0010100000xx010x001xx0000100000xx01;
	cfgsin5[0:44] =  45 'b0x001xx0000000001xx100x001xx0000100000xx010x0;
	cfgsin6[0:44] =  45 'b01xx0000010000xx001x001xx0000001000xx010x001x;
	cfgsin7[0:44] =  45 'bx0000010000xx001x001xx0000001000xx001x010xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000xx100x100xx0000100000xx100x100xx00001;
	cfgsin14[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin13[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin12[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin11[0:44] =  45 'b0x100xx0000100000xx100x100xx0000001000xx010x0;
	cfgsin10[0:44] =  45 'b01xx0000000001xx100x001xx0000000001xx100x001x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000000001xx010x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat88; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx001x001x00000100000xx100x1000x00;
	cfgsin1[0:44] =  45 'b00100000xx100x1000x0000001000xx010x0011x00000;
	cfgsin2[0:44] =  45 'b10000xx001x0101x0000001000xx100x0101x00000010;
	cfgsin3[0:44] =  45 'b00xx100x0101x0000100000xx001x0101x0000010000x;
	cfgsin4[0:44] =  45 'bx001x0101x0000100000xx001x0101x0000100000xx00;
	cfgsin5[0:44] =  45 'b1x0101x0000000001xx010x1001x0000100000xx001x0;
	cfgsin6[0:44] =  45 'b101x0000010000xx001x0101x0000001000xx100x0011;
	cfgsin7[0:44] =  45 'bx0000010000xx001x0101x0000001000xx100x0101x00;
// TR
	cfgsin15[0:44] =  45 'b01001000xx100x0011x0000100000xx100x1000x00001;
	cfgsin14[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin13[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin12[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin11[0:44] =  45 'b0x1000x0000100000xx100x1000x0000001000xx001x0;
	cfgsin10[0:44] =  45 'b101x0000000001xx001x1001x0000000001xx010x1001;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000000010xx001x100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin19[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin20[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin21[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin22[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin23[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin30[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin29[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin28[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin27[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin26[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
end
endtask
task get_wl_pat87; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000010000000000000000000000000;
	cfgsin2[0:44] =  45 'b000001000100000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000001000000100000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000100000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000001000000000000;
	cfgsin6[0:44] =  45 'b000000001000000000000000000001000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000010000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000100000000000000000000000000000000000001000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000100;
	cfgsin12[0:44] =  45 'b000000000000000000000000100000000000000010000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000100000000000;
	cfgsin9[0:44] =  45 'b000000000010000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin18[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin19[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin20[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin21[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin22[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin23[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin30[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin29[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin28[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin27[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin26[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin25[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx100x001x0000;
end
endtask
task get_wl_pat86; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000010000000000000000000001000000010000;
	cfgsin2[0:44] =  45 'b000000010000000000000000010000000000100101000;
	cfgsin3[0:44] =  45 'b000000000000000010000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000001000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000100000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000010000000010010000000;
	cfgsin7[0:44] =  45 'b010000000000000000000000010000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000100000010000001000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000001000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100010001000000110000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat85; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110010100xx110x0110x0110001101x;
	cfgsin1[0:44] =  45 'bx110x0101x0001001100xx110x0110x0010001100xx11;
	cfgsin2[0:44] =  45 'b0x0100x0000010101xx110x0100x1010001001xx000x1;
	cfgsin3[0:44] =  45 'b010x0101001101xx000x0100x0110001101xx110x1010;
	cfgsin4[0:44] =  45 'bx0110001101xx110x0110x0110001001xx110x0010x10;
	cfgsin5[0:44] =  45 'b10001101xx110x0110x0110000101xx100x0110x01010;
	cfgsin6[0:44] =  45 'b01101xx100x0110x0110001100xx100x0100x00100011;
	cfgsin7[0:44] =  45 'b00xx110x0110x0110001101xx001x0110x0101001101x;
// TR
	cfgsin15[0:44] =  45 'bx010x0100x0100001100xx110x0010x0101001101xx11;
	cfgsin14[0:44] =  45 'b0x0010x0110001101xx110x0110x0110001101xx100x0;
	cfgsin13[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0010;
	cfgsin12[0:44] =  45 'bx0110001101xx110x0110x0100001101xx110x0100x01;
	cfgsin11[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0101x01100;
	cfgsin10[0:44] =  45 'b01101xx110x0110x0110001101xx110x0010x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0100x0110001101xx110x0110x0010001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001101xx001x0001x0001000001xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat84; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x010000100010010x0110x00100010100;
	cfgsin1[0:44] =  45 'b0010x0110x011000110000000x0000x00000010000000;
	cfgsin2[0:44] =  45 'b1x0110x001000100000000x0010x001000100001001x0;
	cfgsin3[0:44] =  45 'b100x010000110000000x0000x000001010000001x0110;
	cfgsin4[0:44] =  45 'bx011000110000010x0100x011000100000001x0110x01;
	cfgsin5[0:44] =  45 'b1000110000000x0110x011000110100001x0010x10100;
	cfgsin6[0:44] =  45 'b0001000010x0100x100000101000010x0010x00000101;
	cfgsin7[0:44] =  45 'b0000010x1010x001001000000010x0000x00000010100;
// TR
	cfgsin15[0:44] =  45 'b0000x0110x011000110000010x0101x01010011010001;
	cfgsin14[0:44] =  45 'b0x0110x011000110000010x0100x010000110000010x0;
	cfgsin13[0:44] =  45 'b110x011000110100010x0110x010000110000010x0110;
	cfgsin12[0:44] =  45 'bx011000110000010x0100x010000110000010x0110x01;
	cfgsin11[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin10[0:44] =  45 'b0110100010x0110x011000110000010x0000x01000011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x011000110000000x1001x10000100100x;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin19[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin20[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin21[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin22[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin23[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// BR
	cfgsin31[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin30[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin29[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin28[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin27[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin26[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
end
endtask
task get_wl_pat83; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000100000100000000000100000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000010100010010010000001000;
	cfgsin2[0:44] =  45 'b000000000000000000001001000100000001001000000;
	cfgsin3[0:44] =  45 'b010000100000000000101010100100000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000010000000000100000000000000;
	cfgsin5[0:44] =  45 'b000000001001000000000000000000000001000000000;
	cfgsin6[0:44] =  45 'b100000000000010000100000000000001000001000000;
	cfgsin7[0:44] =  45 'b000000000000001000000100000000110001100000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000010000100000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000010000100000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000010000100000;
	cfgsin9[0:44] =  45 'b000000000000000000000000100000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000100100000000100000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin19[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin20[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin21[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin22[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin23[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
// BR
	cfgsin31[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin30[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin29[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin28[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin27[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin26[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin25[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat82; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000010000000000000000010;
	cfgsin1[0:44] =  45 'b000000000000000000010000000100000000001000000;
	cfgsin2[0:44] =  45 'b000000010000001010000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000010010000000000000000010010000000;
	cfgsin4[0:44] =  45 'b000000000001000000000000000000010000000000000;
	cfgsin5[0:44] =  45 'b000000000010000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000010000000000000000010010000000000010000;
	cfgsin7[0:44] =  45 'b001010000000000000000010010000000000000000010;
// TR
	cfgsin15[0:44] =  45 'b000010000000000000010000000000000000000000010;
	cfgsin14[0:44] =  45 'b000000000000000010000000000000000000010010000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000001000010010000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000010000000000;
	cfgsin11[0:44] =  45 'b000000010000000000000000000010010000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000010010001000000000000;
	cfgsin9[0:44] =  45 'b010000000000000000000010000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000100000000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat81; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx0100000001000010xx0x;
	cfgsin1[0:44] =  45 'bx1001000001000100xx0xx0001000001000100xx0xx10;
	cfgsin2[0:44] =  45 'b00010001000100xx0xx1001000001000100xx0xx01000;
	cfgsin3[0:44] =  45 'b00001000100xx0xx0000010001000010xx0xx00100000;
	cfgsin4[0:44] =  45 'b01000010xx0xx1010000001000100xx0xx10100000010;
	cfgsin5[0:44] =  45 'b00100xx0xx0010000001000100xx0xx10100000010001;
	cfgsin6[0:44] =  45 'b00xx1xx0010000001000010xx0xx0010000001000010x;
	cfgsin7[0:44] =  45 'bx0xx0010000001000100xx0xx0010000001000100xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1100000010000100xx0xx1010000001000100xx0xx00;
	cfgsin14[0:44] =  45 'b10000100000100xx0xx1010000100000100xx0xx01000;
	cfgsin13[0:44] =  45 'b00100000100xx0xx1010000001000010xx0xx00100000;
	cfgsin12[0:44] =  45 'b01000100xx1xx1010000001000100xx1xx00100001000;
	cfgsin11[0:44] =  45 'b00100xx0xx1010000001000100xx0xx00100000010001;
	cfgsin10[0:44] =  45 'b00xx0xx1010000100000100xx0xx0001000000001100x;
	cfgsin9[0:44] =  45 'bx0xx1010000100000100xx0xx0010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx0xx0000100100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat80; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000010000100xx0xx1000010001000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000001000001xx1xx1100000001000001xx1xx00;
	cfgsin2[0:44] =  45 'b10000000001001xx1xx1010000001000010xx0xx01000;
	cfgsin3[0:44] =  45 'b00001000001xx1xx0100000000001001xx1xx11000000;
	cfgsin4[0:44] =  45 'b01000100xx0xx1100000001000001xx1xx01000000010;
	cfgsin5[0:44] =  45 'b00001xx1xx0100000001000001xx1xx11000000010000;
	cfgsin6[0:44] =  45 'b01xx1xx1100000001000001xx1xx0100000001000001x;
	cfgsin7[0:44] =  45 'bx1xx0100000001000010xx1xx1001000001000001xx1x;
// TR
	cfgsin15[0:44] =  45 'bx0010000100000010xx1xx0001000001000001xx1xx00;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx0010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00000010100xx1xx1100000001000100xx1xx00001000;
	cfgsin12[0:44] =  45 'b01000001xx1xx1001000001000001xx0xx00100001000;
	cfgsin11[0:44] =  45 'b00100xx0xx0100000001000001xx1xx11000000010000;
	cfgsin10[0:44] =  45 'b01xx1xx1010000100000100xx1xx0010000001000010x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx0x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0100000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat79; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000010000100x01000010000000001001xx00;
	cfgsin1[0:44] =  45 'b00100000001000001xx0000001000010000001xx00001;
	cfgsin2[0:44] =  45 'b00000010000001xx0000100000001000001xx00100010;
	cfgsin3[0:44] =  45 'b00010000010xx0001010000010000100xx00000100001;
	cfgsin4[0:44] =  45 'b00000001xx0100010000010000010xx00000100000100;
	cfgsin5[0:44] =  45 'b00001xx0001010000001000001xx00000100000100000;
	cfgsin6[0:44] =  45 'b01xx0000001000001000100xx0001010000010000100x;
	cfgsin7[0:44] =  45 'bx0001010000000010001xx0000100000010000001xx00;
// TR
	cfgsin15[0:44] =  45 'b01010000001000001xx0001100000001000010xx00000;
	cfgsin14[0:44] =  45 'b10000100000100xx0001010000100000100xx00000100;
	cfgsin13[0:44] =  45 'b00100000010xx0000000100001000001xx00011000000;
	cfgsin12[0:44] =  45 'b01000001xx0000100000001000010xx10010100001000;
	cfgsin11[0:44] =  45 'b00100xx0010010000001000001xx00000100000010000;
	cfgsin10[0:44] =  45 'b10xx0000010000100000100xx0000100000001000001x;
	cfgsin9[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx10;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001010000100000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0100000001000100xx1xx;
end
endtask
task get_wl_pat78; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000010000001xx0000001000001000001xx00;
	cfgsin1[0:44] =  45 'b00000010001000010xx0000000010100000010xx00101;
	cfgsin2[0:44] =  45 'b00000001000100xx0000001000001000010xx10000010;
	cfgsin3[0:44] =  45 'b00100000001xx0000001000100000001xx00000010000;
	cfgsin4[0:44] =  45 'b01000001xx0000001000100000001xx00100010000010;
	cfgsin5[0:44] =  45 'b00001xx0000000100001000100xx00000001000010000;
	cfgsin6[0:44] =  45 'b01xx0000000010001000100xx0000000010001000010x;
	cfgsin7[0:44] =  45 'bx0000010000001000001xx0000001000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000000001001xx0000001000001000100xx00100;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00000001001xx0000001000001000001xx00000010000;
	cfgsin12[0:44] =  45 'b01000010xx0000001000001000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0100001000001000100xx00001000000010000;
	cfgsin10[0:44] =  45 'b10xx0000001000100000100xx0010001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000100000010xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x00000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin19[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin20[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin21[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin22[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin23[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin30[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin29[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin28[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin27[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin26[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin25[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
end
endtask
task get_wl_pat77; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000010000100x00000001000001000001xx00;
	cfgsin1[0:44] =  45 'b00001000001000100xx0000001000001000001xx00000;
	cfgsin2[0:44] =  45 'b00010001000010xx0000001000001000001xx00000010;
	cfgsin3[0:44] =  45 'b00000001001xx0000000001001000100xx00000010000;
	cfgsin4[0:44] =  45 'b01000001xx0000010000001000001xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx0000001000001000010xx00000001000010000;
	cfgsin6[0:44] =  45 'b01xx0000001000100000001xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0000000001001000001xx0000001000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000000001010xx0000100000001000010xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00000100010xx0000001000001000001xx00000000100;
	cfgsin12[0:44] =  45 'b01000100xx0000100000001000010xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000001000010xx00000010000010001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000001000010x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000100000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
end
endtask
task get_wl_pat76; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000010000100x00000001000001000001xx00;
	cfgsin1[0:44] =  45 'b00001000001000001xx0000001000000001001xx00000;
	cfgsin2[0:44] =  45 'b00001001000001xx0000000010000010001xx00100010;
	cfgsin3[0:44] =  45 'b00001000001xx0000000010001000010xx00000010000;
	cfgsin4[0:44] =  45 'b01000001xx0000001000001000001xx00100010000010;
	cfgsin5[0:44] =  45 'b00001xx0000001000001000001xx00000001000010000;
	cfgsin6[0:44] =  45 'b01xx0000001000000100001xx0000000001001000001x;
	cfgsin7[0:44] =  45 'bx0000000010001000001xx0000001000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000000100010xx0000001000100000001xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000001;
	cfgsin13[0:44] =  45 'b00000001100xx0000001000001000001xx00000010000;
	cfgsin12[0:44] =  45 'b01000001xx0000001000100000001xx10000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000001000001xx10000010001000000;
	cfgsin10[0:44] =  45 'b01xx0000001000100000100xx0000001000000100010x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
end
endtask
task get_wl_pat75; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000010000100xx0000001000001000100xx00;
	cfgsin1[0:44] =  45 'b00001000001000100xx0000001000001000001xx00000;
	cfgsin2[0:44] =  45 'b00100001000010xx0000001000001000100xx10000000;
	cfgsin3[0:44] =  45 'b10001000010xx0000000100000010010xx01000001000;
	cfgsin4[0:44] =  45 'b01000001xx0000001000001000001xx00000001000010;
	cfgsin5[0:44] =  45 'b00010xx0000000010001000100xx00000001000010000;
	cfgsin6[0:44] =  45 'b10xx0100010000001000100xx0000001000001000100x;
	cfgsin7[0:44] =  45 'bx0001001000001000010xx0000001000001000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000001000100xx0000001000001000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00000001100xx0000001000001000100xx00000010000;
	cfgsin12[0:44] =  45 'b01000100xx0000001000001000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000001000100xx00100010000010001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000100000010000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000000001100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
end
endtask
task get_wl_pat74; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000010000001xx1000001000000001010xx00;
	cfgsin1[0:44] =  45 'b00001000001000001xx0001001000001000100xx10000;
	cfgsin2[0:44] =  45 'b00100001000100xx0000001000001000010xx00000001;
	cfgsin3[0:44] =  45 'b00001000100xx1000010000001000100xx00000001000;
	cfgsin4[0:44] =  45 'b01000100xx1000001000001000100xx10000001000010;
	cfgsin5[0:44] =  45 'b00100xx0000000100001000001xx10000001000010001;
	cfgsin6[0:44] =  45 'b00xx0001001000001000001xx1001100000001000010x;
	cfgsin7[0:44] =  45 'bx1000001000001000001xx1010001000001000010xx10;
// TR
	cfgsin15[0:44] =  45 'b00000100000001010xx1000100000001000001xx10010;
	cfgsin14[0:44] =  45 'b01000100000100xx1000001000100000100xx10000000;
	cfgsin13[0:44] =  45 'b10000001100xx1001001000001000010xx00000010000;
	cfgsin12[0:44] =  45 'b01000001xx0001100000001000001xx00010010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000001000001xx00000001000010000;
	cfgsin10[0:44] =  45 'b01xx0000001000100000100xx1001001000001000010x;
	cfgsin9[0:44] =  45 'bx1000001000100000100xx1000001000100000100xx10;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001001000100000010xx010;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
end
endtask
task get_wl_pat73; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx1001000100000001xx1x;
	cfgsin1[0:44] =  45 'bx1001000100000001xx1xx0001000000100010xx0xx10;
	cfgsin2[0:44] =  45 'b01000010000001xx1xx1000100000001001xx0xx00010;
	cfgsin3[0:44] =  45 'b00001000001xx0xx1100000100000001xx0xx10010001;
	cfgsin4[0:44] =  45 'b00000010xx0xx1001000000010010xx0xx00010001000;
	cfgsin5[0:44] =  45 'b00001xx1xx1000010100000001xx0xx10010001000000;
	cfgsin6[0:44] =  45 'b01xx0xx0100000010000001xx0xx0000010100000001x;
	cfgsin7[0:44] =  45 'bx0xx0001000000010100xx0xx0001000100000001xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1100000001000010xx0xx1001000000001001xx0xx00;
	cfgsin14[0:44] =  45 'b01000100000100xx0xx1001000100000100xx0xx10010;
	cfgsin13[0:44] =  45 'b00000100100xx0xx0001000100000001xx1xx10010001;
	cfgsin12[0:44] =  45 'b00000001xx1xx0001000000001001xx0xx00010001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1000100100000001xx0xx01000000100000;
	cfgsin10[0:44] =  45 'b01xx1xx1001000100000100xx0xx0001000001000010x;
	cfgsin9[0:44] =  45 'bx0xx1001000100000100xx0xx1001000100000100xx0x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x00xx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
end
endtask
task get_wl_pat72; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000001x01xx0010000100000001x01x;
	cfgsin1[0:44] =  45 'bx0010000001000001x00xx0100000001000010x00xx01;
	cfgsin2[0:44] =  45 'b00000100000001x11xx1001000000001001x01xx11000;
	cfgsin3[0:44] =  45 'b00010000010x00xx1001000000001100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000001x01xx1100000100000010x00xx11000001000;
	cfgsin5[0:44] =  45 'b00001x00xx1100000000100001x01xx01000001000000;
	cfgsin6[0:44] =  45 'b01x00xx1000100010000010x00xx0100000010000010x;
	cfgsin7[0:44] =  45 'b00xx0001000100000001x01xx0100000100000001x00x;
// TR
	cfgsin15[0:44] =  45 'bx0100000001000001x01xx1000010010000100x01xx11;
	cfgsin14[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx10100;
	cfgsin13[0:44] =  45 'b00010000001x01xx1100000100000001x01xx11000000;
	cfgsin12[0:44] =  45 'b00001001x00xx1100000010000100x00xx11000001000;
	cfgsin11[0:44] =  45 'b00100x01xx1100000010000001x01xx11000000001000;
	cfgsin10[0:44] =  45 'b10x01xx1100000100000100x01xx1100000001000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000010000100x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100x01xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat71; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0001010000000001001x000;
	cfgsin1[0:44] =  45 'b01000100100000001x10000001000010000100x010011;
	cfgsin2[0:44] =  45 'b00000010000001x10000100000010000001x000000010;
	cfgsin3[0:44] =  45 'b00010000100x00000100000100000010x000001000000;
	cfgsin4[0:44] =  45 'b00001001x00000001000001000100x000001000001000;
	cfgsin5[0:44] =  45 'b00001x01000100000100000001x100011000001000000;
	cfgsin6[0:44] =  45 'b01x01000100000010000100x00000100000000010100x;
	cfgsin7[0:44] =  45 'b00000100000100000001x00000100000000001001x001;
// TR
	cfgsin15[0:44] =  45 'b01010000001000100x00000100000001000010x100001;
	cfgsin14[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin13[0:44] =  45 'b00001000010x10000100000010000001x000001000001;
	cfgsin12[0:44] =  45 'b00000001x11000100000001000010x101001000001000;
	cfgsin11[0:44] =  45 'b00100x00000100000100000001x100001000001000001;
	cfgsin10[0:44] =  45 'b00x10000100000100000100x00000010000001000001x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00001010000010000010xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000100x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin20[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin21[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
end
endtask
task get_wl_pat70; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001xx0000010000100000001x100;
	cfgsin1[0:44] =  45 'b00010000100000001x10001010000000001001x100000;
	cfgsin2[0:44] =  45 'b10000010000001x10000010000100000001x100000100;
	cfgsin3[0:44] =  45 'b00000100001x10000010000001000001x100000100001;
	cfgsin4[0:44] =  45 'b00000001x10000010000000001001x110000100001000;
	cfgsin5[0:44] =  45 'b00001x10000010000100000001x100000100001000000;
	cfgsin6[0:44] =  45 'b01x10000010000000001001x10000010000000001001x;
	cfgsin7[0:44] =  45 'b10100010000100000001x10000010000100000001x100;
// TR
	cfgsin15[0:44] =  45 'b00010000001000010x10000010000100000001x100001;
	cfgsin14[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin13[0:44] =  45 'b00100000100x10000010000100000001x100000100001;
	cfgsin12[0:44] =  45 'b00000001x10000010000100000001x100001000001000;
	cfgsin11[0:44] =  45 'b00100x10000010000100000001x100000100000000010;
	cfgsin10[0:44] =  45 'b01x10000100000100000100x10000100000001000010x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000000100010000010xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin20[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin21[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
end
endtask
task get_wl_pat69; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00000001100000100xx0000100000100000001x000;
	cfgsin1[0:44] =  45 'b00100000100000001x00100100000000100100x000000;
	cfgsin2[0:44] =  45 'b10000010000001x00000100000100000100x100000100;
	cfgsin3[0:44] =  45 'b00010000001x01000010000100000001x000001000001;
	cfgsin4[0:44] =  45 'b00000001x00000100000100000001x000000100001000;
	cfgsin5[0:44] =  45 'b00001x00000100000100000001x000000100001000000;
	cfgsin6[0:44] =  45 'b01x00000001000000001010x00110010000100000001x;
	cfgsin7[0:44] =  45 'b00010100000100000001x00010010000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00000010010000001x00000010000000100010x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00001000001x00000010000100000001x000000100001;
	cfgsin12[0:44] =  45 'b00000001x00000010000000100010x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000001x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000100000001000010x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000010000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin18[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin19[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin20[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin21[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin22[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin23[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin30[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin29[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin28[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin27[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin26[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin25[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat68; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000001x000;
	cfgsin1[0:44] =  45 'b00100000000001100x10000010000100000001x010001;
	cfgsin2[0:44] =  45 'b00000000001001x00010000010010000001x000001000;
	cfgsin3[0:44] =  45 'b00100000100x10010100000000100100x100001000001;
	cfgsin4[0:44] =  45 'b00000001x00000100000100000001x000001000001000;
	cfgsin5[0:44] =  45 'b00001x00000100000000001001x000000010001000000;
	cfgsin6[0:44] =  45 'b01x00000001000100000100x10000000010000100001x;
	cfgsin7[0:44] =  45 'b00000100000100000001x00000001000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00100000000100010x10000100000010000001x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000001000;
	cfgsin13[0:44] =  45 'b00010000100x00000100000100000001x000000100001;
	cfgsin12[0:44] =  45 'b00000001x00000100000010000001x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000100000000001001x000000000100000010;
	cfgsin10[0:44] =  45 'b01x00000010000100000100x00000010000001000010x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000000001010000010x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat67; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000001x000;
	cfgsin1[0:44] =  45 'b00000010000001001x01000000100000100001x000100;
	cfgsin2[0:44] =  45 'b00001000010001x01000100000100000001x010001000;
	cfgsin3[0:44] =  45 'b00010000001x00000000010000001001x000000010001;
	cfgsin4[0:44] =  45 'b00000001x00000100000100000001x000001000001000;
	cfgsin5[0:44] =  45 'b00001x00000100000000001001x000000010001000000;
	cfgsin6[0:44] =  45 'b01x00000001000010000010x00010100000100000001x;
	cfgsin7[0:44] =  45 'b00000100000100000001x00000001000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b10010000010000001x00000010000000010001x000010;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00000010100x00000010000100000001x000001000000;
	cfgsin12[0:44] =  45 'b00010001x00000010000000010001x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000000001001x000001000000000010;
	cfgsin10[0:44] =  45 'b01x00000010000100000100x00000010000001000010x;
	cfgsin9[0:44] =  45 'b00010100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000000100010000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat66; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100001000000001001000001x000;
	cfgsin1[0:44] =  45 'b00100000100000001x00001100000000001001x000001;
	cfgsin2[0:44] =  45 'b00000010000001x00000001000100000010x100100001;
	cfgsin3[0:44] =  45 'b00000001001x00000000100000001001x001011000000;
	cfgsin4[0:44] =  45 'b00001001x00000000010000001001x001001000000000;
	cfgsin5[0:44] =  45 'b01001x00000000001000001010x000000100000000010;
	cfgsin6[0:44] =  45 'b01x00010100000000001100x00000100000000001010x;
	cfgsin7[0:44] =  45 'b01000010000000001001x00110010000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00100000001000100x00001001000001000100x000000;
	cfgsin14[0:44] =  45 'b01000100000100x00001001000100000100x000010100;
	cfgsin13[0:44] =  45 'b00001000001x00000001000000001001x000000010001;
	cfgsin12[0:44] =  45 'b00000100x00001000010001000100x000010010001000;
	cfgsin11[0:44] =  45 'b00100x00000000001000001010x000001000000000010;
	cfgsin10[0:44] =  45 'b10x00000001000100000100x00001010000001000001x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000000000010100000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100x0000;
end
endtask
task get_wl_pat65; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1100000100000001x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x00xx0001000100000100x00xx00;
	cfgsin2[0:44] =  45 'b00001100000010x00xx0100000010000100x00xx00010;
	cfgsin3[0:44] =  45 'b00010000010x01xx0100000000001100x00xx01000000;
	cfgsin4[0:44] =  45 'b10000001x01xx1100000010000001x00xx11000001000;
	cfgsin5[0:44] =  45 'b00001x01xx1010000010000001x01xx10100001000000;
	cfgsin6[0:44] =  45 'b01x01xx0000010001000010x01xx0010000000100001x;
	cfgsin7[0:44] =  45 'b00xx1010000100000001x00xx0010000100000001x01x;
// TR
	cfgsin15[0:44] =  45 'bx0001000010000010x01xx0100000100000001x01xx00;
	cfgsin14[0:44] =  45 'b01000100000100x01xx0001000100000100x01xx01000;
	cfgsin13[0:44] =  45 'b00001000100x01xx1001000000001001x01xx10010001;
	cfgsin12[0:44] =  45 'b00000001x01xx0100000010000001x01xx00010001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000010000001x01xx10001000010000;
	cfgsin10[0:44] =  45 'b01x01xx1001000100000100x01xx0001000010000010x;
	cfgsin9[0:44] =  45 'b01xx0100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100000000010000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000011000000000010010000x;
end
endtask
task get_wl_pat64; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000001xx1xx1100000010000001x01x;
	cfgsin1[0:44] =  45 'bx1100000000010010x01xx1010000100000010x01xx01;
	cfgsin2[0:44] =  45 'b00000000010100x01xx0100000010000001x01xx10100;
	cfgsin3[0:44] =  45 'b00010000100x01xx0010000000100010x01xx01000001;
	cfgsin4[0:44] =  45 'b00000001x01xx1010000010000001x01xx11000001000;
	cfgsin5[0:44] =  45 'b00001x01xx1010000000010001x01xx00100001000000;
	cfgsin6[0:44] =  45 'b01x00xx0010000000001001x00xx0010000010000001x;
	cfgsin7[0:44] =  45 'b01xx1010000100000001x01xx0010000100000001x00x;
// TR
	cfgsin15[0:44] =  45 'bx1010000010000001x01xx1010000001000010x01xx10;
	cfgsin14[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00001000010x01xx1001000100000001x01xx10010000;
	cfgsin12[0:44] =  45 'b10000001x01xx1010000100000010x01xx10010001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000000100001x01xx10100000100001;
	cfgsin10[0:44] =  45 'b00x01xx1001000100000100x01xx1100000100000010x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x1xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
end
endtask
task get_wl_pat63; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001xx0000010000010000001xx00;
	cfgsin1[0:44] =  45 'b00000010100000001xx0000000001010000001xx00001;
	cfgsin2[0:44] =  45 'b00000000100001xx0000000100010000001xx00000000;
	cfgsin3[0:44] =  45 'b01100000001xx0001010000100000100xx00001000000;
	cfgsin4[0:44] =  45 'b00100001xx0000010000100000001xx00001000000001;
	cfgsin5[0:44] =  45 'b00001xx0000010000010000010xx00101000000001000;
	cfgsin6[0:44] =  45 'b01xx1001000010010000001xx0101010000010000001x;
	cfgsin7[0:44] =  45 'bx0000100000001000001xx0001100000100000001xx10;
// TR
	cfgsin15[0:44] =  45 'b00010000010000001xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00001000001xx0000100000100000001xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000010000010000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000010000010xx00000001000010000;
	cfgsin10[0:44] =  45 'b10xx0000100000100000100xx0000010000010000010x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000010xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100xx1xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
end
endtask
task get_wl_pat62; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000010000010000001xx00;
	cfgsin1[0:44] =  45 'b00010000100000001xx0000000010001000001xx00100;
	cfgsin2[0:44] =  45 'b10000100000001xx0000001000010000001xx00000001;
	cfgsin3[0:44] =  45 'b00001000001xx0000001000000010010xx00001000001;
	cfgsin4[0:44] =  45 'b00000001xx0000010000001000001xx00001000001000;
	cfgsin5[0:44] =  45 'b00001xx0000010000010000001xx00001000001000000;
	cfgsin6[0:44] =  45 'b01xx0000000100100000001xx0000010000100000001x;
	cfgsin7[0:44] =  45 'bx0000100000100000001xx0000100000100000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00000100100000001xx0000000001000001001xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00001000100xx0000100000100000001xx00000000011;
	cfgsin12[0:44] =  45 'b00000001xx0000000001000001001xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000010000001xx00000100001000000;
	cfgsin10[0:44] =  45 'b01xx0000100000100000100xx0000010000000001010x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000100000010000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat61; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx001x001xx0000010000xx001x001xx00;
	cfgsin1[0:44] =  45 'b00100000xx100x010xx0000000010xx001x100xx00001;
	cfgsin2[0:44] =  45 'b00000xx100x010xx0010100000xx100x100xx00000100;
	cfgsin3[0:44] =  45 'b00xx010x001xx0000000001xx010x001xx0010100000x;
	cfgsin4[0:44] =  45 'bx010x001xx0000010000xx010x001xx0000100000xx01;
	cfgsin5[0:44] =  45 'b0x001xx0000100000xx010x100xx0000100000xx010x0;
	cfgsin6[0:44] =  45 'b01xx0000000010xx010x100xx0000000010xx010x100x;
	cfgsin7[0:44] =  45 'bx0000100000xx010x001xx0000100000xx100x001xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000xx001x010xx0000000001xx100x010xx00001;
	cfgsin14[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00000010;
	cfgsin13[0:44] =  45 'b00xx001x010xx0000100000xx010x001xx0000000001x;
	cfgsin12[0:44] =  45 'bx100x010xx0000000001xx100x010xx0000100000xx10;
	cfgsin11[0:44] =  45 'b0x100xx0000100000xx010x100xx0000000010xx010x1;
	cfgsin10[0:44] =  45 'b00xx0000100000xx100x100xx0000010000xx100x001x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000100000xx001x010xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat60; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx001x100x00000010000xx010x0011x00;
	cfgsin1[0:44] =  45 'b00000001xx001x1001x1000100000xx001x0101x00000;
	cfgsin2[0:44] =  45 'b00001xx001x1001x1000000001xx001x1001x10000100;
	cfgsin3[0:44] =  45 'b00xx001x0101x0000100000xx001x0101x0000100000x;
	cfgsin4[0:44] =  45 'bx001x0101x0000010000xx001x0101x0000100000xx00;
	cfgsin5[0:44] =  45 'b1x0101x0000010000xx001x0101x0000100000xx001x0;
	cfgsin6[0:44] =  45 'b101x0000010000xx001x0101x0000010000xx001x0101;
	cfgsin7[0:44] =  45 'bx0000100000xx001x0101x0000000001xx001x1001x00;
// TR
	cfgsin15[0:44] =  45 'b00010000xx010x0011x0000000001xx001x1001x00001;
	cfgsin14[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00000010;
	cfgsin13[0:44] =  45 'b00xx100x0011x0000100000xx001x0101x0000000001x;
	cfgsin12[0:44] =  45 'bx001x1001x0000000001xx001x1001x0000100000xx10;
	cfgsin11[0:44] =  45 'b0x1000x0000010000xx001x0101x0000001000xx001x0;
	cfgsin10[0:44] =  45 'b101x0000100000xx100x1000x0000000001xx010x1001;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000001000xx100x010x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin19[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin20[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin21[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin22[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin23[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin30[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin29[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin28[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin27[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin26[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
end
endtask
task get_wl_pat59; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000100010000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000100000000000000000000000010001000000010;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000010000000000000100000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000100000;
	cfgsin6[0:44] =  45 'b000000100000000000000000000000000000001000001;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000100000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000100000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin18[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin19[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin20[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin21[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin22[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin23[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin30[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin29[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin28[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin27[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin26[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin25[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx010x001x0000;
end
endtask
task get_wl_pat58; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000010000000000;
	cfgsin1[0:44] =  45 'b000000000001000000000000000000000000000010001;
	cfgsin2[0:44] =  45 'b000000000000000000010000010000000000000010000;
	cfgsin3[0:44] =  45 'b010000000010010000000010000000010010011000000;
	cfgsin4[0:44] =  45 'b000010000010000000000010000000000010000000000;
	cfgsin5[0:44] =  45 'b000000000001000000000100000000011000100000100;
	cfgsin6[0:44] =  45 'b000000000000000001000011000000000100000000000;
	cfgsin7[0:44] =  45 'b000000000100000000000100000000000000000010100;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000001000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000010000000000000000;
	cfgsin10[0:44] =  45 'b000010000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000100110000000010000010010;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat57; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0010x0010001100xx110x0110x0010001101x;
	cfgsin1[0:44] =  45 'bx110x0010x0010010100xx110x0110x0000010100xx00;
	cfgsin2[0:44] =  45 'b0x1001x0101110000xx010x0100x1010001100xx001x0;
	cfgsin3[0:44] =  45 'b100x0101000100xx101x1000x0101000100xx000x0110;
	cfgsin4[0:44] =  45 'bx1000001100xx010x0110x0010000101xx001x0110x01;
	cfgsin5[0:44] =  45 'b01001101xx100x1010x0100001101xx000x0000x10000;
	cfgsin6[0:44] =  45 'b01011xx010x0110x0010000001xx110x0010x00100010;
	cfgsin7[0:44] =  45 'b01xx110x0001x0110001001xx110x0101x0110000001x;
// TR
	cfgsin15[0:44] =  45 'bx110x0110x0110001101xx110x0001x0110010101xx11;
	cfgsin14[0:44] =  45 'b0x0110x0110001101xx110x0101x0110010101xx110x0;
	cfgsin13[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx100x0010;
	cfgsin12[0:44] =  45 'bx0110001101xx110x0101x0110010101xx110x0110x01;
	cfgsin11[0:44] =  45 'b10001101xx110x0110x0110001100xx110x0110x01100;
	cfgsin10[0:44] =  45 'b01100xx110x0110x0110001101xx110x0101x01100101;
	cfgsin9[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001100xx000x1001x0001010000xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat56; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x011000000000000x0110x00100011000;
	cfgsin1[0:44] =  45 'b0010x0000x100000101000000x0010x00000000000000;
	cfgsin2[0:44] =  45 'b0x0000x001000110000000x0000x010000110000010x0;
	cfgsin3[0:44] =  45 'b010x011001010000000x0001x101000001000010x0110;
	cfgsin4[0:44] =  45 'bx101000101000010x0110x001000101000010x0110x10;
	cfgsin5[0:44] =  45 'b1000101000010x0000x000000010000010x0100x01000;
	cfgsin6[0:44] =  45 'b0110000010x0010x101000110000010x0000x10000010;
	cfgsin7[0:44] =  45 'b1000010x0010x101010000000010x0110x01100011000;
// TR
	cfgsin15[0:44] =  45 'b0001x0110x011000110100010x0100x01000011010001;
	cfgsin14[0:44] =  45 'b0x0100x010000110000010x0110x011000110000010x0;
	cfgsin13[0:44] =  45 'b110x011000110000010x0110x011010100000001x0010;
	cfgsin12[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin11[0:44] =  45 'b1000110000010x1010x001000110000010x0100x01000;
	cfgsin10[0:44] =  45 'b0110000010x0100x010000110100010x0110x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100001000;
	cfgsin8[0:44] =  45 'bxx0010x0110x011000110000000x1000x10000100100x;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin19[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin20[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin21[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin22[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin23[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// BR
	cfgsin31[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin30[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin29[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin28[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin27[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin26[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
end
endtask
task get_wl_pat55; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000101001000000001000000000;
	cfgsin1[0:44] =  45 'b000000000000000000001000010000000000010101000;
	cfgsin2[0:44] =  45 'b100010010000000000001001000000000000000000010;
	cfgsin3[0:44] =  45 'b000000000000000000100100000000010000000000000;
	cfgsin4[0:44] =  45 'b000000000000100000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000110000100010000000000010000100;
	cfgsin6[0:44] =  45 'b000000000000100000000000000000000110000100000;
	cfgsin7[0:44] =  45 'b000000000100000000010000100000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000010000100000000000;
	cfgsin14[0:44] =  45 'b000010000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000010000100;
	cfgsin10[0:44] =  45 'b000000000000001000010000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000010000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000001000001000010000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin19[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin20[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin21[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin22[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin23[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
// BR
	cfgsin31[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin30[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin29[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin28[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin27[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin26[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin25[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat54; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx100000000000000100000010000000000000000001;
	cfgsin1[0:44] =  45 'b000000110000001000000001000000001100000000010;
	cfgsin2[0:44] =  45 'b000100000000000000010000000100001000010000000;
	cfgsin3[0:44] =  45 'b000000000000010000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000010000000000010000000000010000000000;
	cfgsin5[0:44] =  45 'b000000010000000000010000000010000000000000000;
	cfgsin6[0:44] =  45 'b000010010000000000000000010010000000000000000;
	cfgsin7[0:44] =  45 'b010000000000000000000010000000000000000000010;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000001000010000000000000000000010000000;
	cfgsin13[0:44] =  45 'b000000000000010000000000000000000010000001000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000010000000000010000000010000000000000000;
	cfgsin10[0:44] =  45 'b000010000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b010000000000000000000010000000000000000000010;
	cfgsin8[0:44] =  45 'bxx0000000000000000000100100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat53; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx0000001100000100xx0xx0100000001000100xx0x;
	cfgsin1[0:44] =  45 'bx1000010001000010xx0xx1000100001000100xx0xx01;
	cfgsin2[0:44] =  45 'b00000001000100xx1xx0010000001000100xx0xx10100;
	cfgsin3[0:44] =  45 'b00001000100xx0xx1010000001000100xx1xx10100000;
	cfgsin4[0:44] =  45 'b01000100xx0xx0010000001000100xx1xx00100000010;
	cfgsin5[0:44] =  45 'b00100xx0xx1010000001000010xx0xx10100000010000;
	cfgsin6[0:44] =  45 'b10xx0xx0010000001000100xx0xx0010000001000100x;
	cfgsin7[0:44] =  45 'bx0xx1100000100000100xx0xx0010000001000100xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1010000001000010xx0xx1010000001000100xx0xx10;
	cfgsin14[0:44] =  45 'b00100000001100xx0xx1010000001000100xx0xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx0xx1100000100000100xx0xx10100000;
	cfgsin12[0:44] =  45 'b01000010xx1xx1010000100000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx0xx1010000001000100xx0xx10100000010000;
	cfgsin10[0:44] =  45 'b10xx0xx1001000000001100xx0xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx0xx1010000100000100xx0xx1001000100000100xx0x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx0xx0100000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat52; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1000100100000100xx1xx1010000001000010xx0x;
	cfgsin1[0:44] =  45 'bx0100000000001001xx1xx1100000001000001xx1xx00;
	cfgsin2[0:44] =  45 'b10000001000100xx0xx0000010000001010xx1xx11000;
	cfgsin3[0:44] =  45 'b00001000001xx1xx1100000001000001xx0xx11000000;
	cfgsin4[0:44] =  45 'b01000001xx1xx1100000001000001xx0xx01000000010;
	cfgsin5[0:44] =  45 'b00001xx1xx0100000001000001xx1xx00010000010000;
	cfgsin6[0:44] =  45 'b01xx0xx1100000001000001xx1xx1100000001000001x;
	cfgsin7[0:44] =  45 'bx1xx1000100100000100xx1xx0100000001000001xx1x;
// TR
	cfgsin15[0:44] =  45 'bx0010000001000001xx0xx0000001001000001xx0xx01;
	cfgsin14[0:44] =  45 'b00000010000001xx1xx1000001001000001xx0xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1001000100000010xx1xx01000000;
	cfgsin12[0:44] =  45 'b01000001xx1xx1010000100000100xx1xx00100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1100000001000001xx1xx11000000010001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000010000010xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1001000100000100xx0x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0010000100000100xx0xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat51; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000000100100x00000010000000001001xx01;
	cfgsin1[0:44] =  45 'b00010000000001100xx0000001000000001001xx00010;
	cfgsin2[0:44] =  45 'b01000010000100xx0001100000100000001xx00000000;
	cfgsin3[0:44] =  45 'b01100000001xx0000010000010000001xx10000100000;
	cfgsin4[0:44] =  45 'b10000001xx0000010000010000001xx01010000010100;
	cfgsin5[0:44] =  45 'b00001xx0001000001010000100xx00011000000100001;
	cfgsin6[0:44] =  45 'b00xx1000010000010000001xx0000001000010000001x;
	cfgsin7[0:44] =  45 'bx0000010000010000100xx0001010000010000001xx00;
// TR
	cfgsin15[0:44] =  45 'b01100000001000100xx1000100000001000010xx10011;
	cfgsin14[0:44] =  45 'b00000010000010xx0000100000001000010xx10000100;
	cfgsin13[0:44] =  45 'b00100000100xx0000010000100000010xx00000100000;
	cfgsin12[0:44] =  45 'b01000100xx0000010000100000100xx00010100001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000001000010xx00000100001000000;
	cfgsin10[0:44] =  45 'b01xx0000100000001000001xx0000010000100000100x;
	cfgsin9[0:44] =  45 'bx0000010000100000100xx0000001000100000100xx01;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001000100100000100x0010;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
end
endtask
task get_wl_pat50; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000000100000010100xx0000001000001000001xx00;
	cfgsin1[0:44] =  45 'b10001000100000001xx0000100000001000100xx00000;
	cfgsin2[0:44] =  45 'b01000001000100xx0100001000001000100xx00000000;
	cfgsin3[0:44] =  45 'b10001000001xx0000001000001000001xx00000010000;
	cfgsin4[0:44] =  45 'b01000001xx0000000100001000100xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx0000000001001000100xx00000010000010000;
	cfgsin6[0:44] =  45 'b10xx0000001000001000001xx0000001000001000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000001000100xx0010001000001000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000001000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000010xx00100010000;
	cfgsin12[0:44] =  45 'b01000010xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000001000010xx00000010000010000;
	cfgsin10[0:44] =  45 'b01xx0000000100100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000100000010xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x00000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin19[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin20[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin21[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin22[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin23[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin30[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin29[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin28[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin27[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin26[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin25[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
end
endtask
task get_wl_pat49; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000000001100x00000001000001000001xx00;
	cfgsin1[0:44] =  45 'b00000010001000010xx0000000010001000010xx00000;
	cfgsin2[0:44] =  45 'b00010100000010xx0000001000001000100xx00000000;
	cfgsin3[0:44] =  45 'b10001000001xx0000001000001000001xx00000010000;
	cfgsin4[0:44] =  45 'b01000001xx0000001000001000010xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx0000000010001000001xx00000000101000000;
	cfgsin6[0:44] =  45 'b01xx0000001000001000001xx0000001000001000010x;
	cfgsin7[0:44] =  45 'bx0000001000000001100xx0000001000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000001000010xx0000100000001000010xx00000;
	cfgsin14[0:44] =  45 'b01000010000010xx0000001000100000001xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000000001010xx00000010000;
	cfgsin12[0:44] =  45 'b01000001xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000001000001xx00000010000010000;
	cfgsin10[0:44] =  45 'b01xx0000001000000100001xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000000001100000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
end
endtask
task get_wl_pat48; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000000001100000100x00000001000001000001xx00;
	cfgsin1[0:44] =  45 'b00001000000100010xx0001000010000010001xx00000;
	cfgsin2[0:44] =  45 'b01000000100001xx0000001000010000001xx00000000;
	cfgsin3[0:44] =  45 'b10001000001xx0000001000001000001xx00000010000;
	cfgsin4[0:44] =  45 'b01000001xx0000001000001000001xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx0000000010001000001xx00000010000001000;
	cfgsin6[0:44] =  45 'b01xx0010001000001000001xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0000001000001000100xx0000001000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000001xx0000001000100000001xx00000;
	cfgsin14[0:44] =  45 'b01000000100010xx0000001000000100001xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000010000010xx00000010000;
	cfgsin12[0:44] =  45 'b01000001xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000001000001xx00000010000010000;
	cfgsin10[0:44] =  45 'b01xx0000100000010000010xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000000100000010100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
end
endtask
task get_wl_pat47; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00000100100000100xx0000001000001000010xx10;
	cfgsin1[0:44] =  45 'b00100000001000010xx0000001000010000100xx00000;
	cfgsin2[0:44] =  45 'b10000001000010xx0000000100001000100xx00000010;
	cfgsin3[0:44] =  45 'b00001000001xx0000001000001000010xx00000010000;
	cfgsin4[0:44] =  45 'b01000010xx0101001000001000010xx00000010000010;
	cfgsin5[0:44] =  45 'b00010xx0000001000001000100xx00100100000010000;
	cfgsin6[0:44] =  45 'b10xx0000001000001000010xx0000001000001000010x;
	cfgsin7[0:44] =  45 'bx0000001000100000010xx0000001000001000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00000100001000100xx0000001000001000100xx00000;
	cfgsin14[0:44] =  45 'b10000010000010xx0000100000001000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000001000;
	cfgsin12[0:44] =  45 'b01000100xx0100001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000001000100xx00000010000010000;
	cfgsin10[0:44] =  45 'b01xx0001100000000010100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000010xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
end
endtask
task get_wl_pat46; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000100000001xx1000001000000001100xx00;
	cfgsin1[0:44] =  45 'b00001000001000100xx0000001000001000001xx10010;
	cfgsin2[0:44] =  45 'b00100000001100xx0000000100001000010xx10010010;
	cfgsin3[0:44] =  45 'b00001000100xx0001001000001000100xx10000010000;
	cfgsin4[0:44] =  45 'b01000100xx0000001000001000100xx10000010000010;
	cfgsin5[0:44] =  45 'b00100xx1000100000001000010xx10001000000010001;
	cfgsin6[0:44] =  45 'b00xx1000001000001000100xx1001000100001000100x;
	cfgsin7[0:44] =  45 'bx1000001000000001100xx0000001000001000010xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000001000001xx0000100000001000001xx00001;
	cfgsin14[0:44] =  45 'b00000010000100xx0000010000001000001xx00010010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000000001010xx00001000000;
	cfgsin12[0:44] =  45 'b01000001xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx1000100000001000001xx00000010000010000;
	cfgsin10[0:44] =  45 'b10xx1000001000001000010xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx1000001000100000100xx0000001000100000100xx10;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001000010000001100xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
end
endtask
task get_wl_pat45; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000010000100x00xx1001000010000001xx0x;
	cfgsin1[0:44] =  45 'bx1010000100000001xx1xx0001000100000010xx0xx00;
	cfgsin2[0:44] =  45 'b00100100000001xx1xx1000100001000100xx0xx00010;
	cfgsin3[0:44] =  45 'b00100000010xx1xx0001000100000001xx0xx10010001;
	cfgsin4[0:44] =  45 'b00000001xx0xx0000100100000001xx0xx10010001000;
	cfgsin5[0:44] =  45 'b00001xx0xx1001000100000001xx0xx00010000100000;
	cfgsin6[0:44] =  45 'b01xx0xx0001000100000001xx0xx0001000100000001x;
	cfgsin7[0:44] =  45 'bx0xx1000100100000001xx1xx1001000100000001xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1001000001000001xx1xx1001000000001001xx1xx10;
	cfgsin14[0:44] =  45 'b00100100000010xx1xx1000100000001001xx1xx00010;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1000100001000010xx1xx10010000;
	cfgsin12[0:44] =  45 'b01000001xx0xx1001000100000100xx1xx10010001000;
	cfgsin11[0:44] =  45 'b00100xx0xx1001000001000001xx1xx10001001000001;
	cfgsin10[0:44] =  45 'b00xx0xx0001000001000010xx1xx1001000100000100x;
	cfgsin9[0:44] =  45 'bx0xx1001000100000100xx1xx1001000100000100xx0x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0000100000001010x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
end
endtask
task get_wl_pat44; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x0000010010000001x01xx0010000100000001x00x;
	cfgsin1[0:44] =  45 'bx0100000001000010x00xx0001000000001001x00xx00;
	cfgsin2[0:44] =  45 'b10000000010100x00xx1010000100000001x10xx10100;
	cfgsin3[0:44] =  45 'b00100000001x01xx0000100100000001x00xx01000001;
	cfgsin4[0:44] =  45 'b00000001x00xx1000100010000001x00xx01000001000;
	cfgsin5[0:44] =  45 'b00001x01xx0000010100000010x01xx10000100000011;
	cfgsin6[0:44] =  45 'b00x01xx0100000100000001x01xx0000010000100001x;
	cfgsin7[0:44] =  45 'b01xx0010000100000100x01xx0100000100000001x01x;
// TR
	cfgsin15[0:44] =  45 'bx1100000010000100x01xx1100000010000100x01xx11;
	cfgsin14[0:44] =  45 'b00000001000100x01xx1100000001000100x00xx11000;
	cfgsin13[0:44] =  45 'b00100000100x01xx1100000001000010x01xx11000001;
	cfgsin12[0:44] =  45 'b00000010x00xx1100000100000100x00xx11000001000;
	cfgsin11[0:44] =  45 'b00100x01xx1100000100000010x01xx11000001000000;
	cfgsin10[0:44] =  45 'b01x01xx1100000001000100x01xx1100000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0000100000100010x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100x01xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat43; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx10100000010000010xx0000010000100000001x000;
	cfgsin1[0:44] =  45 'b01010000100000100x00001010000000010001x000001;
	cfgsin2[0:44] =  45 'b00000100000100x10000001000000001001x000000100;
	cfgsin3[0:44] =  45 'b00010000001x00001010000100000001x001001000001;
	cfgsin4[0:44] =  45 'b00000001x00000010000100000001x001001000001000;
	cfgsin5[0:44] =  45 'b00001x00000100000010000100x000001000000100000;
	cfgsin6[0:44] =  45 'b10x00001100000100000001x00000100000100000001x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000100000010000001x000;
// TR
	cfgsin15[0:44] =  45 'b00100000001000010x10000100000001000010x100000;
	cfgsin14[0:44] =  45 'b10000001000001x00000100000001000010x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000010000001000010x000001000000;
	cfgsin12[0:44] =  45 'b01000100x01000100000100000100x001001000001000;
	cfgsin11[0:44] =  45 'b00100x00000000100000010100x000001000000100000;
	cfgsin10[0:44] =  45 'b01x00000010000001000001x10000100000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00001100000000001001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000100x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin20[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin21[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
end
endtask
task get_wl_pat42; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000010000100xx0000010000100000001x110;
	cfgsin1[0:44] =  45 'b00010000000001001x10000010000100000001x100000;
	cfgsin2[0:44] =  45 'b10000100000100x10000010000100000001x101000100;
	cfgsin3[0:44] =  45 'b00100000001x10000010000100000001x100000100001;
	cfgsin4[0:44] =  45 'b00000001x10100010000100000001x100000100001000;
	cfgsin5[0:44] =  45 'b00001x10000010000000001001x100000100001000000;
	cfgsin6[0:44] =  45 'b01x10000010000100000001x10000010000100000001x;
	cfgsin7[0:44] =  45 'b10000000010100000100x10010010000100000001x100;
// TR
	cfgsin15[0:44] =  45 'b00010000100000001x10000010000100000001x100001;
	cfgsin14[0:44] =  45 'b00000001000010x10000010000100000001x100001000;
	cfgsin13[0:44] =  45 'b00100000100x10000100000001000010x100000100000;
	cfgsin12[0:44] =  45 'b00001001x10000100000100000100x100001000001000;
	cfgsin11[0:44] =  45 'b00100x10000010000000001001x100000100001000000;
	cfgsin10[0:44] =  45 'b01x10000100000001000010x10000100000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000000010010000100xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin20[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin21[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
end
endtask
task get_wl_pat41; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000010000100xx0010100000100000001x000;
	cfgsin1[0:44] =  45 'b00100000010000010x00100000010100000100x001100;
	cfgsin2[0:44] =  45 'b10000100000100x00100000010100000001x000001000;
	cfgsin3[0:44] =  45 'b00100000001x00000010000100000001x000100100001;
	cfgsin4[0:44] =  45 'b00000001x00000010000100000001x000100100001000;
	cfgsin5[0:44] =  45 'b00001x00010010000100000001x000000100000000101;
	cfgsin6[0:44] =  45 'b00x00000010000100000001x00001010000100000001x;
	cfgsin7[0:44] =  45 'b00010010000100000001x00000010000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00010000000100010x00000010000000100010x000000;
	cfgsin14[0:44] =  45 'b10000000001010x00000010000010000100x001000100;
	cfgsin13[0:44] =  45 'b00100000100x00000100000100000001x000000100000;
	cfgsin12[0:44] =  45 'b01000001x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000000010001x000000100001000000;
	cfgsin10[0:44] =  45 'b01x00000100000001000001x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin18[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin19[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin20[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin21[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin22[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin23[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin30[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin29[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin28[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin27[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin26[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin25[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat40; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00100001000100000001x000;
	cfgsin1[0:44] =  45 'b00010000000010001x00000100000000001001x000000;
	cfgsin2[0:44] =  45 'b01000000001001x10000100000000001001x000000100;
	cfgsin3[0:44] =  45 'b00100000001x00000100000100000001x000001000001;
	cfgsin4[0:44] =  45 'b00000001x00000001000000001001x000001000001000;
	cfgsin5[0:44] =  45 'b00001x00000000100000100001x000000010000001000;
	cfgsin6[0:44] =  45 'b10x10000000100100000001x00000100000000001001x;
	cfgsin7[0:44] =  45 'b00000100000000001100x00000000010100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00100000010000001x00000100000010000001x000000;
	cfgsin14[0:44] =  45 'b10000000100100x10000100000000100010x100000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000001000100x000001000000;
	cfgsin12[0:44] =  45 'b00100001x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000100000000100001x000001000001000000;
	cfgsin10[0:44] =  45 'b01x00100010000100000010x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000000100000001010x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat39; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000000100000001100x00000100000100000001x000;
	cfgsin1[0:44] =  45 'b00100000100000001x00000010000000001001x000001;
	cfgsin2[0:44] =  45 'b00000010000100x00110100000100000001x000001000;
	cfgsin3[0:44] =  45 'b00100000001x00000100000100000001x000001000001;
	cfgsin4[0:44] =  45 'b00000001x00000100000000001001x000001000001000;
	cfgsin5[0:44] =  45 'b00001x00000100000100000001x000000001000000101;
	cfgsin6[0:44] =  45 'b00x00010000100100000001x00000100000000001001x;
	cfgsin7[0:44] =  45 'b00000000010100000001x00000001000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00010000000010001x00000010000000010001x000001;
	cfgsin14[0:44] =  45 'b00000001000010x00001010000010000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000001000001x000000100000;
	cfgsin12[0:44] =  45 'b10000001x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000010000001x000000100001000000;
	cfgsin10[0:44] =  45 'b01x00000010000001000010x00001010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000001000000010100x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat38; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000010000010000000001000001000001x001;
	cfgsin1[0:44] =  45 'b00000001000001010x10000001000000001010x001010;
	cfgsin2[0:44] =  45 'b00010100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00000001001x00000100000000001001x000000001000;
	cfgsin4[0:44] =  45 'b00001001x01000100000000001010x001001000000000;
	cfgsin5[0:44] =  45 'b01001x00001100000000001010x000010000100100000;
	cfgsin6[0:44] =  45 'b10x01000000100000001001x00110000001000001010x;
	cfgsin7[0:44] =  45 'b00001010000100000100x00000010000000001001x000;
// TR
	cfgsin15[0:44] =  45 'b00000010001000100x00001000001001000100x000010;
	cfgsin14[0:44] =  45 'b10000001000010x00000010000001000001x000000010;
	cfgsin13[0:44] =  45 'b00100000100x00000001000001000010x000001000000;
	cfgsin12[0:44] =  45 'b00001010x00000001000100000100x010000010001000;
	cfgsin11[0:44] =  45 'b00100x00100100000000001010x000010100000000010;
	cfgsin10[0:44] =  45 'b01x00000001000001000100x00100001000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x001011000000010001000001x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100x0000;
end
endtask
task get_wl_pat37; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x10001001000000010x0xx1100000010000001x00x;
	cfgsin1[0:44] =  45 'bx1100000100000001x01xx1100000000100001x00xx01;
	cfgsin2[0:44] =  45 'b00000001000001x00xx0100000100000010x01xx11000;
	cfgsin3[0:44] =  45 'b00100000001x01xx1100000100000001x01xx11000000;
	cfgsin4[0:44] =  45 'b10000001x00xx1100000100000001x00xx11000001000;
	cfgsin5[0:44] =  45 'b00001x01xx0010000000001001x01xx01000000100001;
	cfgsin6[0:44] =  45 'b00x00xx0010000010000001x00xx0010000010000001x;
	cfgsin7[0:44] =  45 'b01xx0010000001000010x01xx1010000100000001x01x;
// TR
	cfgsin15[0:44] =  45 'bx1100000000100001x01xx0100000010000001x01xx00;
	cfgsin14[0:44] =  45 'b00100001000100x01xx0100000010000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000100x01xx1001000100000100x01xx10100000;
	cfgsin12[0:44] =  45 'b00100001x01xx1001000100000100x00xx10010001000;
	cfgsin11[0:44] =  45 'b00100x00xx1010000010000001x01xx00010000001000;
	cfgsin10[0:44] =  45 'b01x00xx1010000100000010x00xx0001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x00xx00001001000000100x0x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100000000010000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
end
endtask
task get_wl_pat36; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1000001100000100xx0xx1100000010000001x01x;
	cfgsin1[0:44] =  45 'bx1010000010000100x00xx1100000001000100x00xx10;
	cfgsin2[0:44] =  45 'b00001000001010x01xx1100000001000001x00xx01000;
	cfgsin3[0:44] =  45 'b00100000001x01xx0100000100000001x00xx11000000;
	cfgsin4[0:44] =  45 'b10000001x01xx1100000000010001x01xx11000001000;
	cfgsin5[0:44] =  45 'b00001x01xx0010000000010001x00xx00100000001000;
	cfgsin6[0:44] =  45 'b01x01xx1010000010000001x01xx1010000100000001x;
	cfgsin7[0:44] =  45 'b01xx1010000001000001x00xx1010000100000001x01x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000010x01xx1010000100000010x01xx11;
	cfgsin14[0:44] =  45 'b00000100000001x01xx1001000100000010x01xx10010;
	cfgsin13[0:44] =  45 'b00100000100x01xx1001000100000001x01xx10010000;
	cfgsin12[0:44] =  45 'b10000001x01xx1001000100000100x01xx10010001000;
	cfgsin11[0:44] =  45 'b00100x01xx1001000010000001x01xx10010000100000;
	cfgsin10[0:44] =  45 'b01x01xx1100000000010001x01xx1001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x00xx1100000100000100x00x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x1xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
end
endtask
task get_wl_pat35; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx1000010000100000001xx00;
	cfgsin1[0:44] =  45 'b00010000100000001xx1000010000000100010xx10000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000100000001000001xx01011000;
	cfgsin3[0:44] =  45 'b00000001001xx0000100000001000001xx10000100001;
	cfgsin4[0:44] =  45 'b00000001xx0000100000001000010xx00001000000000;
	cfgsin5[0:44] =  45 'b01001xx0010010000010000001xx00000000011000000;
	cfgsin6[0:44] =  45 'b01xx0000010000100000001xx0000010000000001010x;
	cfgsin7[0:44] =  45 'bx0000000100010000100xx0100100000100000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000010000100xx0000010000010000100xx00000;
	cfgsin14[0:44] =  45 'b10000010000010xx0000000001010000001xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000000100100000010xx00000100000;
	cfgsin12[0:44] =  45 'b10000001xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000010000001xx00000100001000000;
	cfgsin10[0:44] =  45 'b01xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx1000100000100000100xx10;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000001000100xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100xx1xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
end
endtask
task get_wl_pat34; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000000010010000010x00000010000010000001xx00;
	cfgsin1[0:44] =  45 'b00000100001000001xx0000100000000100100xx00000;
	cfgsin2[0:44] =  45 'b01000001000100xx0000001000100000001xx00001000;
	cfgsin3[0:44] =  45 'b00100000001xx0000100000100000001xx00000100000;
	cfgsin4[0:44] =  45 'b10000001xx0000100000100000001xx00001000001000;
	cfgsin5[0:44] =  45 'b00001xx0000010000100000001xx01000010000000010;
	cfgsin6[0:44] =  45 'b01xx0000010000010000001xx0000010000010000001x;
	cfgsin7[0:44] =  45 'bx0000001000001000100xx0000100000100000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00000001000001001xx0000000001000001001xx00000;
	cfgsin14[0:44] =  45 'b00100000001010xx0000000100000001001xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000000001100000010xx00000100001;
	cfgsin12[0:44] =  45 'b00000001xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000100000001xx00000100000100000;
	cfgsin10[0:44] =  45 'b01xx0000000001000001010xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000010000000100001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat33; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx010x100xx0000010000xx001x001xx00;
	cfgsin1[0:44] =  45 'b00000001xx010x100xx0000000010xx010x001xx00000;
	cfgsin2[0:44] =  45 'b01000xx001x010xx0000100000xx100x001xx00001000;
	cfgsin3[0:44] =  45 'b00xx010x001xx0010100000xx010x001xx0000010000x;
	cfgsin4[0:44] =  45 'bx010x001xx0000000100xx010x100xx0000100000xx01;
	cfgsin5[0:44] =  45 'b0x001xx0000001000xx010x100xx0010000100xx100x0;
	cfgsin6[0:44] =  45 'b10xx0000010000xx010x001xx0000001000xx010x100x;
	cfgsin7[0:44] =  45 'bx0000001000xx001x100xx0000100000xx010x001xx00;
// TR
	cfgsin15[0:44] =  45 'b00000001xx100x010xx0000000001xx100x010xx00000;
	cfgsin14[0:44] =  45 'b10000xx100x100xx0000010000xx100x010xx00001000;
	cfgsin13[0:44] =  45 'b00xx100x100xx0000100000xx001x010xx0000010000x;
	cfgsin12[0:44] =  45 'bx010x010xx0000100000xx100x100xx0000100000xx10;
	cfgsin11[0:44] =  45 'b0x100xx0000010000xx010x010xx0000010000xx010x0;
	cfgsin10[0:44] =  45 'b01xx0000000001xx100x001xx0000100000xx100x100x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000000001xx100x010xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat32; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000xx001x100x00000010000xx010x0011x00;
	cfgsin1[0:44] =  45 'b00010000xx001x0101x0100000100xx001x0101x00000;
	cfgsin2[0:44] =  45 'b01000xx100x0011x0000000001xx001x1001x00001000;
	cfgsin3[0:44] =  45 'b00xx001x0101x0000100000xx001x0101x0000010000x;
	cfgsin4[0:44] =  45 'bx001x0101x0000100000xx001x0101x0000100000xx00;
	cfgsin5[0:44] =  45 'b1x0101x0000010000xx001x0101x0000000001xx001x1;
	cfgsin6[0:44] =  45 'b001x0000010000xx001x0101x0000010000xx001x0101;
	cfgsin7[0:44] =  45 'bx0000001000xx100x0011x0000100000xx001x0101x00;
// TR
	cfgsin15[0:44] =  45 'b00000001xx001x1001x0000000001xx001x1001x00000;
	cfgsin14[0:44] =  45 'b00001xx010x1001x0000000001xx001x1001x00001000;
	cfgsin13[0:44] =  45 'b00xx100x1000x0000100000xx010x0011x0000010000x;
	cfgsin12[0:44] =  45 'bx001x0101x0000100000xx100x1000x0000100000xx10;
	cfgsin11[0:44] =  45 'b0x1000x0000010000xx001x0101x0000010000xx001x0;
	cfgsin10[0:44] =  45 'b101x0000000001xx010x1001x0000100000xx100x1000;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000100000xx010x001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin19[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin20[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin21[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin22[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin23[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin30[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin29[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin28[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin27[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin26[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
end
endtask
task get_wl_pat31; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000100000000000000000001000000000100;
	cfgsin2[0:44] =  45 'b000100000000000000000000000000000000000010000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000100000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000100000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000100000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000010000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000010000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin18[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin19[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin20[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin21[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin22[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin23[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin30[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin29[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin28[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin27[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin26[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin25[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx001x001x0000;
end
endtask
task get_wl_pat30; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000001;
	cfgsin1[0:44] =  45 'b000000000001000001000000000000000000000001001;
	cfgsin2[0:44] =  45 'b000000000000000000001000000000100000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000010000000100000000000;
	cfgsin4[0:44] =  45 'b001000001000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000001000000000000000000000000000000010100000;
	cfgsin6[0:44] =  45 'b010000000000100001000001000000000000000000011;
	cfgsin7[0:44] =  45 'b000000000000010000001000000000000000000000010;
// TR
	cfgsin15[0:44] =  45 'b100100000000010000010000000000000000000000000;
	cfgsin14[0:44] =  45 'b000010100000010000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000010000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100001000010000010000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat29; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x1010001011xx110x0110x0101010100x;
	cfgsin1[0:44] =  45 'bx110x0101x0000001000xx110x0110x0010001100xx00;
	cfgsin2[0:44] =  45 'b0x0001x1010010101xx100x0110x0100001101xx010x1;
	cfgsin3[0:44] =  45 'b010x0110001101xx110x0110x0010001001xx110x0110;
	cfgsin4[0:44] =  45 'bx0010001001xx110x0100x0110001101xx110x0110x01;
	cfgsin5[0:44] =  45 'b10001001xx110x0101x0110010101xx110x0100x00100;
	cfgsin6[0:44] =  45 'b00101xx110x0010x0010001001xx110x0100x01100000;
	cfgsin7[0:44] =  45 'b01xx110x0110x0010001001xx110x0100x0110001100x;
// TR
	cfgsin15[0:44] =  45 'bx000x0110x0100001100xx010x0101x0110010101xx11;
	cfgsin14[0:44] =  45 'b0x0100x0010000101xx110x0110x0110001101xx110x0;
	cfgsin13[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx001x0110;
	cfgsin12[0:44] =  45 'bx0101001101xx010x0110x0110001101xx110x0110x01;
	cfgsin11[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0101x01100;
	cfgsin10[0:44] =  45 'b10101xx110x0101x0110010101xx110x0110x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001101xx001x0001x0001010001xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat28; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxx000000000000000010x0110x00100011001;
	cfgsin1[0:44] =  45 'b0000x0000x000100110000010x0010x00000011010000;
	cfgsin2[0:44] =  45 'b0x0000x000000110000000x0000x010000110000010x0;
	cfgsin3[0:44] =  45 'b100x010000110000001x0110x011000110000010x0110;
	cfgsin4[0:44] =  45 'bx011000110000010x0110x101000101000010x0110x01;
	cfgsin5[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin6[0:44] =  45 'b0110000010x0110x011000110000010x0110x00100011;
	cfgsin7[0:44] =  45 'b0000010x0110x011000110000010x0110x01100010000;
// TR
	cfgsin15[0:44] =  45 'b0010x0110x011000110000010x0110x00100011000001;
	cfgsin14[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin13[0:44] =  45 'b110x011000110000010x0101x011000110000010x0110;
	cfgsin12[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin11[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin10[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0101x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0101x01100011000xxxxxxx00000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin19[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin20[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin21[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin22[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin23[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// BR
	cfgsin31[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin30[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin29[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin28[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin27[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin26[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
end
endtask
task get_wl_pat27; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000000;
	cfgsin1[0:44] =  45 'b000101001010000000000000000100100000000000000;
	cfgsin2[0:44] =  45 'b110000010000000001000000110000100000000000000;
	cfgsin3[0:44] =  45 'b010000100000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000001000000000000000000000100000000001000000;
	cfgsin7[0:44] =  45 'b000100000000000000000000000000000000000001000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000001000000000000;
	cfgsin14[0:44] =  45 'b000000000000000001000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000xxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin19[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin20[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin21[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin22[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin23[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
// BR
	cfgsin31[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin30[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin29[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin28[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin27[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin26[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin25[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat26; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx000000000010000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000010000000000;
	cfgsin2[0:44] =  45 'b000001000001000000010100000000000000010010000;
	cfgsin3[0:44] =  45 'b000000000000010010000000000000000010000000000;
	cfgsin4[0:44] =  45 'b000000000010000000000000000000010010000000000;
	cfgsin5[0:44] =  45 'b000000010010000000000000000010000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b010000000000000000000000000000000000000000010;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000010000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000010000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000010000000000000000000010000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000010000000000000000000010000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat25; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxxx1100000100000001xx0x;
	cfgsin1[0:44] =  45 'bx1001000100000100xx1xx1100000001000001xx0xx10;
	cfgsin2[0:44] =  45 'b00010100000100xx0xx0100000001000001xx0xx00100;
	cfgsin3[0:44] =  45 'b00100000100xx0xx0100000001000001xx0xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx0xx1001000100000010xx0xx00100001000;
	cfgsin5[0:44] =  45 'b00100xx0xx0100000001000001xx0xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx0xx1100000001000001xx1xx0010000100000100x;
	cfgsin7[0:44] =  45 'bx0xx0100000001000001xx1xx1010000100000100xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1100000001000001xx1xx1010000100000100xx0xx11;
	cfgsin14[0:44] =  45 'b00000001000001xx0xx1010000100000100xx0xx11000;
	cfgsin13[0:44] =  45 'b00001000001xx1xx1010000100000100xx1xx11000000;
	cfgsin12[0:44] =  45 'b01000001xx0xx1010000100000100xx0xx11000000010;
	cfgsin11[0:44] =  45 'b00001xx1xx1010000100000100xx1xx11000000010000;
	cfgsin10[0:44] =  45 'b01xx0xx1010000100000100xx0xx1100000100000001x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1100000100000001xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xxxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000001000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000010000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000010000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000010000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat24; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxxx1000010100000100xx1x;
	cfgsin1[0:44] =  45 'bx1000010100000100xx0xx1010000001000100xx1xx10;
	cfgsin2[0:44] =  45 'b00001100000100xx1xx0010000001000100xx0xx00100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx0010000001000100xx1xx00100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx0001000100000100xx1xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx0010000001000100xx1xx00100001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1010000001000100xx1xx0010000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1010000001000100xx1xx1010000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000001000100xx1xx1010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000001000100xx1xx1010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00001000100xx1xx1010000100000100xx1xx10100000;
	cfgsin12[0:44] =  45 'b01000100xx1xx1010000100000100xx1xx10100000010;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100000010001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xxxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx0xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx0xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx0xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1100000000001001xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat23; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000010000100000001x000;
	cfgsin1[0:44] =  45 'b00010000000010100x00000000100001000001x000000;
	cfgsin2[0:44] =  45 'b01000100000100x00001010000001000001x000010100;
	cfgsin3[0:44] =  45 'b00001000100x00001010000001000001x000010100001;
	cfgsin4[0:44] =  45 'b00000100x00001100000100000010x000000100001000;
	cfgsin5[0:44] =  45 'b00100x00000010000001000001x000010100001000001;
	cfgsin6[0:44] =  45 'b00x00000010000001000001x00001010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000001000001x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000001000001x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000001000001x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00001000001x00000010000100000100x000000100000;
	cfgsin12[0:44] =  45 'b01000001x00000010000100000100x000000100000010;
	cfgsin11[0:44] =  45 'b00001x00000010000100000100x000000100000010000;
	cfgsin10[0:44] =  45 'b01x00000010000100000100x00000010000100000001x;
	cfgsin9[0:44] =  45 'b00000010000100000100x00000010000100000001x000;
	cfgsin8[0:44] =  45 'bxx00010000100000100x0000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1000100000010100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
end
endtask
task get_wl_pat22; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000010000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000001000100xx0000001000100000100xx10000010;
	cfgsin3[0:44] =  45 'b00001000100xx0000001000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000000001100000100xx00001000000010;
	cfgsin5[0:44] =  45 'b00100xx0010001000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000100000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000100000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x00000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin19[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin20[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin21[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin22[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin23[0:44] =  45 'bx0000010000100000100xx0000000010000001100xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin30[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin29[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin28[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin27[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin26[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin25[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
end
endtask
task get_wl_pat21; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx00000010000001001x000;
	cfgsin1[0:44] =  45 'b00001000100000100x00100001000000001001x000000;
	cfgsin2[0:44] =  45 'b01000000001100x00000001000000001001x000000010;
	cfgsin3[0:44] =  45 'b00001000100x00000001000000001001x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000001000100000010x000001000000010;
	cfgsin5[0:44] =  45 'b00100x00000001000000001001x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000001000000001001x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000001000000001001x00000100000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00001000000001001x00000100000100000100x000000;
	cfgsin14[0:44] =  45 'b01000000001001x00000100000100000100x000000010;
	cfgsin13[0:44] =  45 'b00000001001x00000100000100000100x000000010000;
	cfgsin12[0:44] =  45 'b00001001x00000100000100000100x000000010000000;
	cfgsin11[0:44] =  45 'b01001x00000100000100000100x000000010000000010;
	cfgsin10[0:44] =  45 'b01x00000100000100000100x00000001000000001001x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000001000000001001x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000xxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000100000100000010xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
end
endtask
task get_wl_pat20; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000001000010000100x000;
	cfgsin1[0:44] =  45 'b00000001001000100x01000001000010000100x000000;
	cfgsin2[0:44] =  45 'b01000100000100x00000001000100000100x000000010;
	cfgsin3[0:44] =  45 'b00001000100x00000001000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000001000100000100x000001000000010;
	cfgsin5[0:44] =  45 'b00100x00000001000100000100x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000001000100000100x00000100000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100x00000100000100000100x000000;
	cfgsin14[0:44] =  45 'b01000100000100x00000100000100000100x000000010;
	cfgsin13[0:44] =  45 'b00100000100x00000100000100000100x000000010001;
	cfgsin12[0:44] =  45 'b00000100x00000100000100000100x000000010001000;
	cfgsin11[0:44] =  45 'b00100x00000100000100000100x000000010001000001;
	cfgsin10[0:44] =  45 'b00x00000100000100000100x00000001000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000001000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x0000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000100000100000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
end
endtask
task get_wl_pat19; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx00001000100000100xx00;
	cfgsin1[0:44] =  45 'b01001000000001100xx0001001000001000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000010xx0000001000001000100xx00000010;
	cfgsin3[0:44] =  45 'b00001000100xx0000001000001000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0010001000100000100xx00001000000010;
	cfgsin5[0:44] =  45 'b00100xx0001001000001000100xx00000100001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000001000100xx0010100000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000001000100xx0010100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000001000100xx0000100000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000001000100xx0000100000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00001000100xx0000100000100000100xx00000010000;
	cfgsin12[0:44] =  45 'b01000100xx0000100000100000100xx00000010000010;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00000010000010001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx00xxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000000100000001100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
end
endtask
task get_wl_pat18; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000001xx0000001000001000100xx00010;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000001000100xx00000010;
	cfgsin3[0:44] =  45 'b00001000001xx0001001000001000100xx00011000001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00011000000010;
	cfgsin5[0:44] =  45 'b00100xx0000001000001000100xx00000100001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000001000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000001000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000001000100xx0000100000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000001000100xx0000100000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00001000100xx0000100000100000100xx00000010000;
	cfgsin12[0:44] =  45 'b01000100xx0000100000100000100xx00000010000010;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00000010000010001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx1000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000100000001000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
end
endtask
task get_wl_pat17; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxxx1001000010000001x01x;
	cfgsin1[0:44] =  45 'bx0001000100000100x00xx0001000010000001x01xx00;
	cfgsin2[0:44] =  45 'b01000010000010x01xx1001000100000001x01xx10010;
	cfgsin3[0:44] =  45 'b00100000100x01xx0001000100000001x01xx01000001;
	cfgsin4[0:44] =  45 'b00000100x01xx0001000001000010x01xx01000001000;
	cfgsin5[0:44] =  45 'b00100x01xx0001000100000001x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1001000100000001x01xx0100000100000100x;
	cfgsin7[0:44] =  45 'b01xx1001000100000001x01xx0100000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000001x01xx1100000100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000001x01xx1100000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000001x01xx1100000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000001x01xx1100000100000100x01xx10010001000;
	cfgsin11[0:44] =  45 'b00001x01xx1100000100000100x01xx10010001000000;
	cfgsin10[0:44] =  45 'b01x01xx1100000100000100x01xx1001000100000001x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1001000100000001x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xxxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx1000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx1000001000100000100xx0000100000001000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
end
endtask
task get_wl_pat16; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx0x1010000010000010x10x;
	cfgsin1[0:44] =  45 'bx1010000100000001x00xx1010000010000100x11xx11;
	cfgsin2[0:44] =  45 'b00000010000001x01xx1100000100000100x11xx10100;
	cfgsin3[0:44] =  45 'b00100000001x01xx1010000100000100x11xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx0010000001000100x11xx01000001000;
	cfgsin5[0:44] =  45 'b00001x01xx1100000100000100x11xx11000001000001;
	cfgsin6[0:44] =  45 'b00x00xx1100000100000100x10xx1100000100000100x;
	cfgsin7[0:44] =  45 'b00xx1100000100000100x10xx1100000100000100x00x;
// TR
	cfgsin15[0:44] =  45 'bx1100000100000100x10xx1100000100000100x00xx11;
	cfgsin14[0:44] =  45 'b00000100000100x11xx1100000100000100x01xx11000;
	cfgsin13[0:44] =  45 'b00100000100x11xx1100000100000100x01xx11000001;
	cfgsin12[0:44] =  45 'b00000100x11xx1100000100000100x01xx11000001000;
	cfgsin11[0:44] =  45 'b00100x11xx1100000100000100x01xx11000001000001;
	cfgsin10[0:44] =  45 'b00x11xx1100000100000100x01xx1100000100000100x;
	cfgsin9[0:44] =  45 'b11xx1100000100000100x01xx1100000100000100x11x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01x0xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100x01xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin21[0:44] =  45 'b00100xx0xx1001000100000100xx1xx10010001000001;
	cfgsin22[0:44] =  45 'b00xx0xx1001000100000100xx1xx1001000100000100x;
	cfgsin23[0:44] =  45 'bx0xx1001000100000100xx1xx1100000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat15; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx00100000010000100xx00;
	cfgsin1[0:44] =  45 'b00010000100000100xx1000010000010000100xx00000;
	cfgsin2[0:44] =  45 'b00010010000010xx0000100000100000100xx00000100;
	cfgsin3[0:44] =  45 'b00100000100xx0000010000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0001010000001000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx1000100000100000100xx1000100000100000100x;
	cfgsin7[0:44] =  45 'bx0100100000100000100xx1000100000100000100xx01;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx1000100000100000100xx01001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx00xxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000100x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin20[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin21[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
end
endtask
task get_wl_pat14; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000010000000010100xx00;
	cfgsin1[0:44] =  45 'b00000100010000010xx0000010000010000100xx00000;
	cfgsin2[0:44] =  45 'b00100010000100xx0000010000100000100xx00000100;
	cfgsin3[0:44] =  45 'b00100000001xx0000010000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000100000100xx00100100001000;
	cfgsin5[0:44] =  45 'b00001xx0000010000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000010000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000010000100000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100xx0000100000100000100xx00000;
	cfgsin14[0:44] =  45 'b10000100000100xx0000100000100000100xx00000100;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00000100001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100xx00000100001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00000100001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin20[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin21[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
end
endtask
task get_wl_pat13; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx00000100100000100xx01;
	cfgsin1[0:44] =  45 'b00000100000001100xx0000000100010000100xx00001;
	cfgsin2[0:44] =  45 'b00000010000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000001000010xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000100000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin14[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin13[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin12[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin10[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx00xxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin18[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin19[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin20[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin21[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin22[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin23[0:44] =  45 'b10000100000100000100x10000010000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin30[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin29[0:44] =  45 'b00100000100x10000100000100000100x100001000001;
	cfgsin28[0:44] =  45 'b00000100x10000100000100000100x100001000001000;
	cfgsin27[0:44] =  45 'b00100x10000100000100000100x100001000001000001;
	cfgsin26[0:44] =  45 'b00x10000100000100000100x10000100000100000100x;
	cfgsin25[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat12; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000100000010000010x100;
	cfgsin1[0:44] =  45 'b00000001100000010x00000100000000001100x100101;
	cfgsin2[0:44] =  45 'b00000000001001x00000100000100000100x100001000;
	cfgsin3[0:44] =  45 'b00100000001x00000100000100000100x100001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000001000010x100001000001000;
	cfgsin5[0:44] =  45 'b00001x00000100000100000100x100000010001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x10000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x10000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x10000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x10000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x10000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x10000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x10000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x10000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x00000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x0000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000000001010xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat11; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000100000000001001x000;
	cfgsin1[0:44] =  45 'b01000010100000100x00000100000010000001x000000;
	cfgsin2[0:44] =  45 'b00001100000100x00000100000100000001x010001000;
	cfgsin3[0:44] =  45 'b00100000100x00001100000100000001x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000001000100x000001000001000;
	cfgsin5[0:44] =  45 'b00100x00000100000100000001x000000010001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000001x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000001x00000001000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000001x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000001x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000001x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000001x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00001x00000010000100000100x000000100001000000;
	cfgsin10[0:44] =  45 'b01x00000010000100000100x00000010000100000001x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000001x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x0000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat10; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx000000010010001000000;
	cfgsin1[0:44] =  45 'b000001001000001000000010000101000000100000000;
	cfgsin2[0:44] =  45 'b000100010000100001011000001000001000000011000;
	cfgsin3[0:44] =  45 'b001000000010000001000001000001000000001000001;
	cfgsin4[0:44] =  45 'b000001000000001000000010000100000001000001000;
	cfgsin5[0:44] =  45 'b000010000000100001000001000000000100001000001;
	cfgsin6[0:44] =  45 'b000000000100001000001000000000100001000001000;
	cfgsin7[0:44] =  45 'b000000100001000001000000000100001000001000000;
// TR
	cfgsin15[0:44] =  45 'b000010001000001000000000010001000001000000000;
	cfgsin14[0:44] =  45 'b010001000001000000000010001000001000000000010;
	cfgsin13[0:44] =  45 'b001000001000000000010001000001000000000010001;
	cfgsin12[0:44] =  45 'b000001000000000010001000001000000000010001000;
	cfgsin11[0:44] =  45 'b001000000000010001000001000000000010001000001;
	cfgsin10[0:44] =  45 'b000000000010001000001000000000010001000001000;
	cfgsin9[0:44] =  45 'b000001000001000001000000001000001000001000000;
	cfgsin8[0:44] =  45 'bxx001000001000001000000xxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100x0000;
end
endtask
task get_wl_pat9; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx0x10001000100000100x1x;
	cfgsin1[0:44] =  45 'bx01000000010000100x1xx00000010100001000x1xx00;
	cfgsin2[0:44] =  45 'b000010010000010x0xx01000001000001000x0xx01000;
	cfgsin3[0:44] =  45 'b001000001000x1xx01000001000001000x1xx11000001;
	cfgsin4[0:44] =  45 'b000001000x1xx11000001000001000x1xx11000001000;
	cfgsin5[0:44] =  45 'b001000x1xx10100001000001000x1xx10100001000001;
	cfgsin6[0:44] =  45 'b000x1xx10100001000001000x1xx10100001000001000;
	cfgsin7[0:44] =  45 'bx1xx10100001000001000x1xx10100001000001000x1x;
// TR
	cfgsin15[0:44] =  45 'bx10010001000001000x1xx10010001000001000x1xx10;
	cfgsin14[0:44] =  45 'b010001000001000x1xx10010001000001000x1xx10010;
	cfgsin13[0:44] =  45 'b001000001000x1xx10010001000001000x1xx10010001;
	cfgsin12[0:44] =  45 'b000001000x1xx10010001000001000x1xx10010001000;
	cfgsin11[0:44] =  45 'b001000x1xx10010001000001000x1xx10010001000001;
	cfgsin10[0:44] =  45 'b000x1xx10010001000001000x1xx10010001000001000;
	cfgsin9[0:44] =  45 'bx1xx11000001000001000x1xx11000001000001000x1x;
	cfgsin8[0:44] =  45 'bxxx11000001000001000x1x0xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100000000010000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin22[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin23[0:44] =  45 'b00000100000100000100x000001000001000001000000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin30[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin29[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
end
endtask
task get_wl_pat8; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxxx1001000010000001xx1x;
	cfgsin1[0:44] =  45 'bx1100000001000001xx0xx1100000010000001xx0xx11;
	cfgsin2[0:44] =  45 'b00000001000100xx0xx1100000100000100xx0xx11000;
	cfgsin3[0:44] =  45 'b00100000001xx1xx1100000100000100xx1xx11000001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1100000100000010xx1xx11000001000;
	cfgsin5[0:44] =  45 'b00001xx1xx1010000100000100xx1xx00100001000001;
	cfgsin6[0:44] =  45 'b00xx1xx0010000100000100xx1xx1010000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1001000100000100xx1xx1000100100000100x;
	cfgsin9[0:44] =  45 'bx1xx1100000100000100xx1xx1000100100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100xx1xxxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x1xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx11000001000001000x1x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
end
endtask
task get_wl_pat7; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000010000010000001xx00;
	cfgsin1[0:44] =  45 'b00001000001000100xx0100010000010000001xx10000;
	cfgsin2[0:44] =  45 'b01000000001100xx1000100000100000001xx10001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000001xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000000001100000010xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000001xx00101000001000001;
	cfgsin6[0:44] =  45 'b00xx0000100000100000001xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000100000100000001xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000001xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000001xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000001xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000001xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00001xx0000100000100000100xx00001000001000000;
	cfgsin10[0:44] =  45 'b01xx0000100000100000100xx0000100000100000001x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000001xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100xx1xx1010000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin21[0:44] =  45 'b00100x01xx1010000100000100x01xx11000001000001;
	cfgsin22[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin23[0:44] =  45 'b01xx1100000100000100x01xx1100000000001001x11x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin30[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin28[0:44] =  45 'b00000100x01xx1100000100000100x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1100000100000100x01xx11000001000001;
	cfgsin26[0:44] =  45 'b00x01xx1100000100000100x01xx1100000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
end
endtask
task get_wl_pat6; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000100000010000010x000;
	cfgsin1[0:44] =  45 'b00100000001000001x00000010000010000100x000001;
	cfgsin2[0:44] =  45 'b00000010000010x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000001x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000010x000001000001000;
	cfgsin5[0:44] =  45 'b00001x00000100000100000100x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00010100000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin14[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin12[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin11[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin10[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x0000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000001x100;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat5; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx00010000xx001x001xx00;
	cfgsin1[0:44] =  45 'b00001000xx010x100xx0000100000xx001x001xx00000;
	cfgsin2[0:44] =  45 'b01000xx100x100xx0000100000xx001x001xx00001000;
	cfgsin3[0:44] =  45 'b00xx100x100xx0000100000xx001x001xx0000100000x;
	cfgsin4[0:44] =  45 'bx100x100xx0000100000xx010x010xx0000100000xx10;
	cfgsin5[0:44] =  45 'b0x100xx0000100000xx001x001xx0000100000xx100x1;
	cfgsin6[0:44] =  45 'b00xx0000100000xx001x001xx0000100000xx100x100x;
	cfgsin7[0:44] =  45 'bx0000100000xx001x001xx0000100000xx100x100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx001x001xx0000100000xx100x100xx00001;
	cfgsin14[0:44] =  45 'b00000xx001x001xx0000100000xx100x100xx00001000;
	cfgsin13[0:44] =  45 'b00xx001x001xx0000100000xx100x100xx0000100000x;
	cfgsin12[0:44] =  45 'bx001x001xx0000100000xx100x100xx0000100000xx00;
	cfgsin11[0:44] =  45 'b1x001xx0000100000xx100x100xx0000100000xx001x0;
	cfgsin10[0:44] =  45 'b01xx0000100000xx100x100xx0000100000xx001x001x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx001x001xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx00xxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin20[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000001x100;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin30[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat4; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000010000xx010x100x000;
	cfgsin1[0:44] =  45 'b00010000xx010x100x00000010000xx100x010x000000;
	cfgsin2[0:44] =  45 'b01000xx100x010x00000100000xx100x100x000001000;
	cfgsin3[0:44] =  45 'b00xx100x001x00000100000xx100x100x00000100000x;
	cfgsin4[0:44] =  45 'bx100x100x00000000010xx010x100x00000100000xx10;
	cfgsin5[0:44] =  45 'b0x001x00000100000xx100x100x00000100000xx100x1;
	cfgsin6[0:44] =  45 'b00x00000100000xx100x100x00000100000xx100x100x;
	cfgsin7[0:44] =  45 'b00000100000xx100x100x00000100000xx100x100x000;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x100x00000100000xx100x100x000001;
	cfgsin14[0:44] =  45 'b00000xx100x100x00000100000xx100x100x000001000;
	cfgsin13[0:44] =  45 'b00xx100x100x00000100000xx100x100x00000100000x;
	cfgsin12[0:44] =  45 'bx100x100x00000100000xx100x100x00000100000xx10;
	cfgsin11[0:44] =  45 'b0x100x00000100000xx100x100x00000100000xx100x1;
	cfgsin10[0:44] =  45 'b00x00000100000xx100x100x00000100000xx100x100x;
	cfgsin9[0:44] =  45 'b00000100000xx100x100x00000100000xx100x100x000;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100x0000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin19[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin20[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin21[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin22[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin23[0:44] =  45 'bx0000100000xx100x100xx0000100000xx001x001x100;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin30[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin29[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin28[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin27[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin26[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
end
endtask
task get_wl_pat3; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000xxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin18[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin19[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin20[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin21[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin22[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin23[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x100x100;
// BR
	cfgsin31[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin30[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin29[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin28[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin27[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin26[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin25[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx001x001x0000;
end
endtask
task get_wl_pat2; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000000;
	cfgsin1[0:44] =  45 'b000000010000000010000000000010000000010000000;
	cfgsin2[0:44] =  45 'b000010000000010010000000000000000000010000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000001000001000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat1; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxxx110x0110x0110001101x;
	cfgsin1[0:44] =  45 'bx110x0100x0110000101xx110x0100x0110000101xx11;
	cfgsin2[0:44] =  45 'b0x0100x0110000100xx110x0110x0110001100xx110x0;
	cfgsin3[0:44] =  45 'b101x0110010101xx110x0110x0110001101xx110x0110;
	cfgsin4[0:44] =  45 'bx0110001101xx110x0110x0010001001xx110x0110x01;
	cfgsin5[0:44] =  45 'b10001101xx110x0110x0110001101xx110x1010x01100;
	cfgsin6[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin7[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// TR
	cfgsin15[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin14[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin13[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin12[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin11[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin10[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001101xxxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat0; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000000000000;
	cfgsin1[0:44] =  45 'bxxxxxxx00000000000000xxxxxxx00000000000000xxx;
	cfgsin2[0:44] =  45 'bxxxx00000000000000xxxxxxx00000000000000xxxxxx;
	cfgsin3[0:44] =  45 'bx00000000000000xxxxxxx00000000000000xxxxxxx00;
	cfgsin4[0:44] =  45 'b000000000000xxxxxxx00000000000000xxxxxxx00000;
	cfgsin5[0:44] =  45 'b000000000xxxxxxx00000000000000xxxxxxx00000000;
	cfgsin6[0:44] =  45 'b000000xxxxxxx00000000000000xxxxxxx00000000000;
	cfgsin7[0:44] =  45 'b000xxxxxxx00000000000000xxxxxxx00000000000000;
// TR
	cfgsin15[0:44] =  45 'bxxxxxxx00000000000000xxxxxxx00000000000000xxx;
	cfgsin14[0:44] =  45 'bxxxx00000000000000xxxxxxx00000000000000xxxxxx;
	cfgsin13[0:44] =  45 'bx00000000000000xxxxxxx00000000000000xxxxxxx00;
	cfgsin12[0:44] =  45 'b000000000000xxxxxxx00000000000000xxxxxxx00000;
	cfgsin11[0:44] =  45 'b000000000xxxxxxx00000000000000xxxxxxx00000000;
	cfgsin10[0:44] =  45 'b000000xxxxxxx00000000000000xxxxxxx00000000000;
	cfgsin9[0:44] =  45 'b000xxxxxxx00000000000000xxxxxxx00000000000000;
	cfgsin8[0:44] =  45 'bxxxxxxxxx00000000000000xxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin19[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin20[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin21[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin22[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin23[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// BR
	cfgsin31[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin30[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin29[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin28[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin27[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin26[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
end
endtask
