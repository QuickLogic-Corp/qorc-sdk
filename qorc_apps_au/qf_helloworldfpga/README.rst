QuickFeather HelloWorldFPGA Application
=======================================

This test/example contains the the fpga design available as an independent component, it is basically only the FPGA part of the :code:`qf_apps/qf_helloworldhw` application project.

The FPGA design is a simple LED-toggle, which toggles the green LED regularly.

How To
------

Note that, all the commands below are run from the root of this directory.

- Ensure QORC-SDK/Symbiflow is initialized and ready:

  ::

    cd <QORC_SDK_PATH> && source envsetup.sh && cd -

- Ensure JLinkExe is available in path for loading the FPGA design:

  ::

    export PATH=<PATH_TO_JLINK_INSTALL_DIR>:$PATH

- Clean the design using:

  ::

    .scaffolding/clean_fpga.sh

  OR, manually delete the files generated by Aurora

- Build the design using:

  ::

    .scaffolding/build_fpga.sh

  OR, directly with the command:

  ::

    ql_symbiflow -compile -src /home/coolbreeze413/work/quicklogic/qorc/qorc-sdk-gh/qorc_apps_au/qf_helloworldfpga/fpga/rtl -d ql-eos-s3 -t helloworldfpga -v helloworldfpga.v -p quickfeather.pcf -P PU64 -dump binary openocd jlink

- Load and run the design on the board using JLinkExe, using:

  ::

    .scaffolding/load_fpga_jlink.sh

  OR, directly using JLinkExe:

  Note that we have to add the following lines at the top of the generated JLink Commander File (fpga/rtl/helloworldfpga.jlink) :

  ::

    connect
    RSetType 3
    r

  To ensure that we first keep the M4 Core in reset (using the scipt :code:`.scaffolding/load_fpga_jlink.sh` does this automatically)

  ::

    JLinkExe -Device Cortex-M4 -If SWD -Speed 4000 -commandFile fpga/rtl/helloworldfpga.jlink

