// NOTE: remember to set the qorc_sdk_path in the settings.json (derive from settings.template.jsonc)
// also the matrixide_install_path and matrixide_license_path
// shortcut to run task from keyboard: CTRL+p -> enter "task" and then a space ('t' 'a' 's' 'k' 'spacebar')
//      and you get the list of tasks
{
    "version": "2.0.0",
    "tasks": [
        {
            // build : build fpga, build m4 [default build task]
            "label": "build",
            "type": "shell",
            "dependsOrder": "parallel",
            "dependsOn":[
                "build-m4",
                "build-fpga",
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
        },
        {
            // clean : clean fpga, clean m4
            "label": "clean",
            "type": "shell",
            "dependsOrder": "parallel",
            "dependsOn":[
                "clean-m4",
                "clean-fpga",
            ],
            "group": "build"
        },
        {
            // build-m4 : build m4 code
            "label": "build-m4",
            "type": "shell",
            "command": "source ${config:qorc_sdk_path}/envsetup.sh && make m4",
            "options": {
                "cwd": "${workspaceFolder}",
            },
            "group": "build",
            "problemMatcher": {
                "base": "$gcc",
                // https://github.com/microsoft/vscode-cpptools/blob/c694184fea81845543daaf9039839425b81d197b/Extension/package.json#L264
                // to suppress warnings and show errors only, remove warnings in below regex
                // and enable the pattern: (☠ don't ☠)
                // "pattern": {
                //     "regexp": "^(.*?):(\\d+):(\\d*):?\\s+(?:fatal\\s+)?(warning|error):\\s+(.*)$",
                //     "file": 1,
                //     "line": 2,
                //     "column": 3,
                //     "severity": 4,
                //     "message": 5
                // }
            },
            "presentation": {
                "reveal": "always",
                "revealProblems": "never",
                "close": true
            }
        },
        {
            // clean-m4 : clean m4 build
            "label": "clean-m4",
            "type": "shell",
            "command": "source ${config:qorc_sdk_path}/envsetup.sh && make clean-m4",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "group": "build",
            "problemMatcher": {
                "base": "$gcc", 
            },
            "presentation": {
                "reveal": "always",
                "revealProblems": "onProblem",
                "close": true
            }
        },
        {
            // build-fpga : build fpga design
            "label": "build-fpga",
            "type": "shell",
            "command": "source ${config:qorc_sdk_path}/envsetup.sh && cd ${config:matrixide_install_path} && source setup.sh && cd - && export rapidsilic_LICENSE=${config:matrixide_license_path} && make fpga",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "group": "build",
            "problemMatcher": [],
            "presentation": {
                "reveal": "always",
                "revealProblems": "onProblem",
                "close": true
            }
        },
        {
            // clean-fpga : remove fpga build artifacts
            "label": "clean-fpga",
            "type": "shell",
            "command": "source ${config:qorc_sdk_path}/envsetup.sh && cd ${config:matrixide_install_path} && source setup.sh && cd - && export rapidsilic_LICENSE=${config:matrixide_license_path} && make clean-fpga",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "group": "build",
            "problemMatcher": [],
            "presentation": {
                "reveal": "always",
                "revealProblems": "onProblem",
                "close": true
            }
        },
        {
            // flash : flash the fpga, m4, or both images into the board's flash via UART
            "label": "flash",
            "type": "shell",
            "command": "source ${config:qorc_sdk_path}/envsetup.sh && make flash QORC_PORT=${input:serialPortFromExt}",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "problemMatcher": [],
            "presentation": {
                "reveal": "always", 
                "revealProblems": "onProblem",
                "close": true
            },
            "dependsOrder": "parallel",
            "dependsOn":[
                "build-m4",
                "build-fpga",
                "x-get-ports"
            ]
        },
        {
            // x-get-ports : get serial ports available on the system using python from the qorc sdk installation
            //               and save the list into a file, which will be read in the flash task to display a 
            //               pickstring dropdown for the user to select.
            "label": "x-get-ports",
            "detail": "internal task used by the 'flash' task, do not run this directly",
            "type": "shell",
            "command": "source ${config:qorc_sdk_path}/envsetup.sh && python get_serial_ports_list.py > custom_eoss3_ports.log",
            "options": {
                "cwd": "${workspaceFolder}/.scaffolding"
            },
            "problemMatcher": [],
            "presentation": {
                "reveal": "never", 
                "revealProblems": "never",
                "close": true
            }
        },
        {
            // load (JLink) : load the fpga, m4, or both images into EOS-S3 using JLink Commander and a JLink probe
            "label": "load (JLink)",
            "type": "shell",
            "command": "source ${config:qorc_sdk_path}/envsetup.sh && make load-jlink",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "group": "build",
            "problemMatcher": [],
            "presentation": {
                "reveal": "always", 
                "revealProblems": "onProblem",
                "close": true
            },
            "dependsOrder": "parallel",
            "dependsOn":[
                "build-m4",
                "build-fpga"
            ]
        },
        {
            // load-fpga-debug (JLink) : used only for debugging, with JLink GDB Server
            // in launch.json 'Debug (JLink)', ensure we have run to entrypoint "main", and start debugging
            // once we are at "main" -> run this task -> continue debugging as usual
            // this is the only way we can load the fpga into EOS_S3 while debugging with the JLink GDB Server
            "label": "load-fpga-debug (JLink)",
            "detail": "run this task *after* entrypoint main is hit when debugging with JLink GDB Server",
            "type": "shell",
            "command": "source ${config:qorc_sdk_path}/envsetup.sh && .scaffolding/load_fpga_x_jlink_debug_only_mx.sh",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "problemMatcher": [],
            "presentation": {
                "reveal": "always", 
                "revealProblems": "onProblem",
                "close": true
            },
            "dependsOrder": "parallel",
            "dependsOn":[
                "build-m4",
                "build-fpga"
            ]
        },
        {
            // generate-json-db : generate a compile_commands.json db from the make output using 'bear'
            // this is ideally the first step to do after opening a project folder in VSCode for the first time,
            // and improves the intellisense significantly!
            // install using the regular package manager ('apt install bear' on Ubuntu)
            // recommend this one over compiledb - in some cases compiledb produced blank files.
            // https://github.com/rizsotto/Bear
            "label": "generate-json-db",
            "detail": "generate compile_commands.json using bear",
            "type": "shell",
            "command": "source ${config:qorc_sdk_path}/envsetup.sh && make clean && bear make",
            "options": {
                "cwd": "${workspaceFolder}/GCC_Project"
            },
            "group": "build",
            "presentation": {
                "reveal": "always",
                "revealProblems": "onProblem",
                "close": true
            }
        },
    ],
    "inputs": [
        {
            // uses the 'augustocdias.tasks-shell-input' extension to show a nice user friendly
            // 'quickpick' dropdown in vscode for the user to select the serial port while
            // flashing the images into the board
            // - requires the extension to be installed.
            "id": "serialPortFromExt",
            "type": "command",
            "command": "shellCommand.execute",
            "args" : {
                // we should have run the x-get-ports task, which populates the file containing
                // serial ports available on the system using the qorc sdk python installation
                "command": "cat custom_eoss3_ports.log && rm custom_eoss3_ports.log",
                "cwd": "${workspaceFolder}/.scaffolding",
                "fieldSeparator": "|",
                "description": "select serial port [>> ensure it is not opened in another program <<]",
                //"useSingleResult": true,
                "env" : {}
            },
        },
    ],
}