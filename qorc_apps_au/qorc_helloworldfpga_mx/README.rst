QORC HelloWorldFPGA Application (AU)
====================================

This test/example contains the the fpga design available as an independent component, it is basically only the FPGA part of the :code:`qf_apps/qf_helloworldhw` application project.

The FPGA design is a simple LED-toggle, which toggles the green LED regularly.

How To
------

Command Line Usage
~~~~~~~~~~~~~~~~~~

Note that, all the commands below are run from the root of this directory.

Initialize Environment
**********************

Before clean/build/load/flash, ensure that the bash environment is setup by doing the below in the same order:

1. Ensure that QORC-SDK is initialized and ready (to use :code:`JLinkExe` for loading, :code:`qfprog` for flashing):

   ::

     cd <QORC_SDK_PATH> && source envsetup.sh && cd -

2. Ensure MatrixIDE is initialized and ready: (assumes install path is :code:`$HOME/matrixide_64`)

   ::

     cd $HOME/matrixide_64 && source setup.sh && export rapidsilic_LICENSE=<PATH_TO_LIC_FILE> && cd -


Clean/Build/Load/Flash
**********************

- Clean the design using:

  ::

    .scaffolding/clean_fpga_mx.sh

  -OR-

  manually delete the files generated by Aurora

- Build the design using:

  ::

    .scaffolding/build_fpga_mx.sh

  -OR-

  directly with the command:

  ::

    matrixide --console --compile_design helloworldfpga.v --top helloworldfpga -o helloworldfpga.qdc -d RSMX3TFF512 -k PU64 --run_all

- Load and run the design on the board using JLinkExe, using:
  (assumes the board has been booted in DEBUG mode)

  ::

    .scaffolding/load_fpga_jlink_mx.sh

- Flash and run the design on the board using qfprog:
  (assumes the board is put into :code:`programming` mode)

  ::

    .scaffolding/flash_fpga_mx.sh --port=/dev/ttyACM0

  -OR-

  directly using qfprog:

  ::

    qfprog --port /dev/ttyACM0 --appfpga fpga/rtl/config_bit_gen/RSMX3TFF512_helloworldfpga.bin --mode fpga --reset


VS Code Usage
~~~~~~~~~~~~~

Initialize Project Configuration
********************************

The first time the project is going to be used from VS Code, we need to do the following:

1. copy :code:`.vscode/settings.template.jsonc` as :code:`.vscode/settings.json`

   Ensure the following variables are correctly defined:

   ::

     "qorc_sdk_path" : "${workspaceFolder}/../..",
     "matrixide_install_path" : "${env:HOME}/matrixide_64",
     "matrixide_license_path" : "${env:HOME}/matrixide_64/matrixide.lic"

   In VS Code:

   :code:`${env:HOME}` refers to $HOME of the current user

   :code:`${workspaceFolder}` refers to the current directory

   Remaining variables don't need to be changed

2. Open the current directory in VS Code using :code:`File > Open Folder` menu
   
   To be able to run the "flashing" task, remember to install the extension: :code:`augustocdias.tasks-shell-input`

   On opening the folder, VS Code should prompt to install "recommended extensions" and this can install them automatically.


Clean/Build/Load/Flash
**********************

Any "task" can be run in VS Code using the :code:`Terminal > Run Task` menu, which shows a drop down list of tasks

-OR-

Using keyboard shortcuts: :code:`ctrl+p` and then type :code:`task<space>`, which shows a drop down list of tasks

- Clean the design using:
  
  :code:`clean-fpga` task

- Build the design using:

  :code:`build-fpga` task

- Load and run the design on the board using JLinkExe, using:
  (assumes the board has been booted in DEBUG mode)

  :code:`load-fpga (JLink)` task

- Flash and run the design on the board using qfprog:
  (assumes the board is put into :code:`programming` mode)

  :code:`flash-fpga` task

  This will show a drop down menu with the available serial ports in the system, select the appropriate one.
  (This is usually :code:`/dev/ttyACM0`)
