task get_wl_pat421; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin1[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin2[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin3[0:44] =  45 'b110x011000110000010x0110x011000000000010x0100;
	cfgsin4[0:44] =  45 'bx011000110000001x0100x010000110000001x0101x00;
	cfgsin5[0:44] =  45 'b0100110000010x0100x011000110000001x0110x01100;
	cfgsin6[0:44] =  45 'b0110000000x0001x001001010000010x0101x01010011;
	cfgsin7[0:44] =  45 'b0000000x0110x011000010000001x0101x01000011000;
// TR
	cfgsin15[0:44] =  45 'b0001x0100x011000110000001x1000x01100001000000;
	cfgsin14[0:44] =  45 'b0x1010x011010000000000x0000x010000110000000x0;
	cfgsin13[0:44] =  45 'b100x000000000000000x0000x010100000000010x0000;
	cfgsin12[0:44] =  45 'bx001000110000000x0110x001000110000010x0100x01;
	cfgsin11[0:44] =  45 'b1000110000010x0000x000001010000010x0110x01100;
	cfgsin10[0:44] =  45 'b0110000010x0100x011000110000010x0100x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000000x0000x;
	cfgsin17[0:44] =  45 'bxxxxxxx00000000x0000xxxxxxxx00000000x0000xxxx;
	cfgsin18[0:44] =  45 'bxxxx00000000x0000xxxxxxxx00000000x0000xxxxxxx;
	cfgsin19[0:44] =  45 'bx00000000x0000xxxxxxxx00000000x0000xxxxxxxx00;
	cfgsin20[0:44] =  45 'b000000x0000xxxxxxxx00000000x0000xxxxxxxx00000;
	cfgsin21[0:44] =  45 'b000x0000xxxxxxxx00000000x0000xxxxxxxx00000000;
	cfgsin22[0:44] =  45 'bx0000xxxxxxxx00000000x0000xxxxxxxx00000000x00;
	cfgsin23[0:44] =  45 'b00xxxxxxxx00000000x0000xxxxxxxx00000000x0000x;
// BR
	cfgsin31[0:44] =  45 'bxxxxxxx00000000x0000xxxxxxxx00000000x0000xxxx;
	cfgsin30[0:44] =  45 'bxxxx00000000x0000xxxxxxxx00000000x0000xxxxxxx;
	cfgsin29[0:44] =  45 'bx00000000x0000xxxxxxxx00000000x0000xxxxxxxx00;
	cfgsin28[0:44] =  45 'b000000x0000xxxxxxxx00000000x0000xxxxxxxx00000;
	cfgsin27[0:44] =  45 'b000x0000xxxxxxxx00000000x0000xxxxxxxx00000000;
	cfgsin26[0:44] =  45 'bx0000xxxxxxxx00000000x0000xxxxxxxx00000000x00;
	cfgsin25[0:44] =  45 'b00xxxxxxxx00000000x0000xxxxxxxx00000000x0000x;
	cfgsin24[0:44] =  45 'bxxxxxxxxx00000000x0000xxxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat420; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000010000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000001000000000001;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000100100000000000001000000000000000000;
	cfgsin7[0:44] =  45 'b000000100000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000001000000000000000000000000000010000000;
	cfgsin14[0:44] =  45 'b100000000000010000000101000000010000000000100;
	cfgsin13[0:44] =  45 'b010000010100101000010000000000010100000000000;
	cfgsin12[0:44] =  45 'b001000000000000100000001000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000110001000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx0010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin19[0:44] =  45 'b110x011000110010010x0110x011000110000010x0110;
	cfgsin20[0:44] =  45 'bx011000110000010x0101x010100110000010x0110x01;
	cfgsin21[0:44] =  45 'b1000110000010x0110x011000110010010x0110x01100;
	cfgsin22[0:44] =  45 'b0110100010x0110x011000110010010x0110x01100011;
	cfgsin23[0:44] =  45 'b0010010x0110x011000110000010x0110x01100011000;
// BR
	cfgsin31[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000000;
	cfgsin30[0:44] =  45 'b1x0100x010000110000010x0100x010000110000010x0;
	cfgsin29[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin28[0:44] =  45 'bx011000110000010x0110x101000101000010x0110x10;
	cfgsin27[0:44] =  45 'b1000101000010x0110x011000110000010x0110x01100;
	cfgsin26[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin25[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x01100011000xxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat419; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000001000000000001;
	cfgsin4[0:44] =  45 'b000000000000000000001000100000000000000000000;
	cfgsin5[0:44] =  45 'b000000010000000010000000000010000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000001000000000000000000000000000;
	cfgsin7[0:44] =  45 'b010000000000000000010000000000000000100000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000001000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000010000000001000000000010000000;
	cfgsin13[0:44] =  45 'b000001000000000001000010000000000010000001000;
	cfgsin12[0:44] =  45 'b100000000010000000000000000000010000000001000;
	cfgsin11[0:44] =  45 'b000000000000000000000010000010000000000000000;
	cfgsin10[0:44] =  45 'b000010000000001000000000000000000001000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000001000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000010000100000000000000010000100000000010000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000010000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000xxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat418; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100000;
	cfgsin4[0:44] =  45 'b01000100xx1xx1010000000010010xx0xx10100000000;
	cfgsin5[0:44] =  45 'b01100xx0xx1010000000010100xx0xx10100000010001;
	cfgsin6[0:44] =  45 'b00xx1xx1001000001000010xx0xx1001000001000010x;
	cfgsin7[0:44] =  45 'bx0xx1010000001000010xx1xx1010000001000010xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1100000000001010xx1xx1010000000010100xx1xx10;
	cfgsin14[0:44] =  45 'b10000000001001xx0xx1001000000100010xx0xx10100;
	cfgsin13[0:44] =  45 'b00001000100xx0xx1100000100000010xx0xx11000001;
	cfgsin12[0:44] =  45 'b00000100xx0xx1010000001000010xx0xx11000001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1100000001000100xx0xx10100000000100;
	cfgsin10[0:44] =  45 'b10xx0xx1010000000010010xx1xx1010000001000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000001000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000010000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000010000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b010000000000000000010000000000000000000010000;
	cfgsin30[0:44] =  45 'b000000000000000010000000000000000000010000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat417; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx0xx1010000100000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100000;
	cfgsin4[0:44] =  45 'b01000001xx1xx1100000100000100xx1xx01000001000;
	cfgsin5[0:44] =  45 'b00001xx0xx0100000100000010xx0xx11000000010000;
	cfgsin6[0:44] =  45 'b01xx1xx1100000001000001xx1xx1100000000001100x;
	cfgsin7[0:44] =  45 'bx0xx0100000001000001xx1xx1010000001000001xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1001000000010001xx1xx0000010001000010xx0xx01;
	cfgsin14[0:44] =  45 'b00000100000100xx0xx1100000001000001xx1xx01000;
	cfgsin13[0:44] =  45 'b00001000001xx0xx0010000000100100xx0xx10100001;
	cfgsin12[0:44] =  45 'b00000100xx0xx1000010001000100xx0xx10100001000;
	cfgsin11[0:44] =  45 'b00010xx0xx0100000000100001xx0xx10100000001001;
	cfgsin10[0:44] =  45 'b00xx1xx1100000001000100xx0xx1100000001000001x;
	cfgsin9[0:44] =  45 'bx0xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0100000001000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxxx1100000100000001xx1x;
	cfgsin17[0:44] =  45 'bx1010000010000100xx1xx1010000100000010xx1xx10;
	cfgsin18[0:44] =  45 'b10000010000100xx1xx1010000001000001xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx0xx1100000001000001xx0xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1010000001000001xx1xx10010000100;
	cfgsin21[0:44] =  45 'b00100xx0xx1010000001000001xx0xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx0xx0010000001000001xx0xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx0xx1010000001000001xx0xx1010000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx0100000100000010xx0xx1010000100000100xx0xx10;
	cfgsin30[0:44] =  45 'b10000001000001xx0xx1000001010000100xx0xx00100;
	cfgsin29[0:44] =  45 'b00100000010xx1xx1010000100000100xx1xx11000000;
	cfgsin28[0:44] =  45 'b01000001xx1xx1010000100000100xx1xx00100000010;
	cfgsin27[0:44] =  45 'b00001xx1xx1010000100000100xx1xx10100000010000;
	cfgsin26[0:44] =  45 'b01xx1xx1010000100000100xx1xx1010000100000001x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000001xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xxxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat416; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000100x01000010000100000100xx00;
	cfgsin1[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin2[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin3[0:44] =  45 'b00100000100xx0000010000100000100xx00001000000;
	cfgsin4[0:44] =  45 'b01000001xx0000010000100000001xx00100001001000;
	cfgsin5[0:44] =  45 'b00010xx0010010000100000001xx00000100000010000;
	cfgsin6[0:44] =  45 'b10xx0000000100001000100xx0000010000100000001x;
	cfgsin7[0:44] =  45 'bx1001010000001000100xx0000100000001000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000000010100xx0010100000001000001xx10000;
	cfgsin14[0:44] =  45 'b10000000001010xx1000010000001000100xx00011000;
	cfgsin13[0:44] =  45 'b00100000001xx0100000100100000010xx10000010001;
	cfgsin12[0:44] =  45 'b00000100xx1000100000001000001xx10000100001000;
	cfgsin11[0:44] =  45 'b00010xx1001010000001000001xx10001000000010000;
	cfgsin10[0:44] =  45 'b01xx0000010000100000001xx1000010000001000010x;
	cfgsin9[0:44] =  45 'bx1000010000100000100xx0000010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxxx1000001100000100xx1x;
	cfgsin17[0:44] =  45 'bx1000001001000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b00001010000100xx1xx1100000001000100xx0xx11000;
	cfgsin19[0:44] =  45 'b00001000100xx1xx0010000001000100xx1xx10000010;
	cfgsin20[0:44] =  45 'b01000100xx1xx1000001001000100xx1xx11000000010;
	cfgsin21[0:44] =  45 'b00100xx1xx1100000001000100xx0xx10100001000001;
	cfgsin22[0:44] =  45 'b00xx1xx1100000001000100xx1xx1010000001000100x;
	cfgsin23[0:44] =  45 'bx1xx1100000001000100xx1xx1010000001000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1000001100000100xx1xx1100000001000100xx1xx11;
	cfgsin30[0:44] =  45 'b00000001000100xx1xx1000100001000100xx1xx00100;
	cfgsin29[0:44] =  45 'b00100000100xx0xx1100000001000100xx0xx10100000;
	cfgsin28[0:44] =  45 'b01000100xx0xx1010000001000100xx1xx11000000010;
	cfgsin27[0:44] =  45 'b00100xx0xx1010000001000100xx1xx01000000010001;
	cfgsin26[0:44] =  45 'b00xx1xx1100000001000100xx1xx1100000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1100000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xxxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat415; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000100000100xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx1000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010000;
	cfgsin4[0:44] =  45 'b01000001xx0000001000001000100xx00000010000010;
	cfgsin5[0:44] =  45 'b00010xx1000001000001000100xx10000010000010000;
	cfgsin6[0:44] =  45 'b01xx0000001000100000001xx0000001000010000001x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0000000010001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000001000001xx0000000100001000100xx00010;
	cfgsin14[0:44] =  45 'b01000010000010xx0000000010001000100xx00000000;
	cfgsin13[0:44] =  45 'b10001000100xx0010001000100000001xx00000010001;
	cfgsin12[0:44] =  45 'b00000010xx0000010000001000010xx00000000010100;
	cfgsin11[0:44] =  45 'b00010xx0000001000001000001xx00000010000100001;
	cfgsin10[0:44] =  45 'b00xx0000001000001000001xx0000001000001000001x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000010000100000001x000;
	cfgsin17[0:44] =  45 'b00100000001000100x00000100000100000010x000001;
	cfgsin18[0:44] =  45 'b00000010000100x00000010000001000001x000000100;
	cfgsin19[0:44] =  45 'b00001000100x00001000001001000001x000000100000;
	cfgsin20[0:44] =  45 'b01000100x00000100000001000001x000000010000010;
	cfgsin21[0:44] =  45 'b00100x00000010000001000001x001000100001000001;
	cfgsin22[0:44] =  45 'b00x00000010000001000001x00000010000001000100x;
	cfgsin23[0:44] =  45 'b00000010000001000001x00000010000001000100x000;
// BR
	cfgsin31[0:44] =  45 'b00001000100000010x00000010000001000100x000000;
	cfgsin30[0:44] =  45 'b10000001000001x00000100000001000100x000001000;
	cfgsin29[0:44] =  45 'b00100000010x01000010000001000100x010000000010;
	cfgsin28[0:44] =  45 'b01000001x01000010000001000100x000000100000010;
	cfgsin27[0:44] =  45 'b00001x01000010000001000100x000100100000010000;
	cfgsin26[0:44] =  45 'b01x00000010000001000100x00000010000100000001x;
	cfgsin25[0:44] =  45 'b00000010000100000100x00000010000100000001x000;
	cfgsin24[0:44] =  45 'bxx00010000100000100x0000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat414; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000100000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010000;
	cfgsin4[0:44] =  45 'b01000001xx0000001000100000100xx00000100001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000000010010000;
	cfgsin6[0:44] =  45 'b01xx0000001000001000001xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0000001000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000001000100xx0000001000000100001xx00000;
	cfgsin14[0:44] =  45 'b10000000001001xx0000010000001000001xx00000010;
	cfgsin13[0:44] =  45 'b00001000001xx0000000100100000100xx00000010000;
	cfgsin12[0:44] =  45 'b01000100xx0000001000001000100xx00000010000000;
	cfgsin11[0:44] =  45 'b01010xx0000000100000001100xx00000010001000000;
	cfgsin10[0:44] =  45 'b01xx0000001000001000001xx0000000010001000001x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000001000001000100xx00;
	cfgsin17[0:44] =  45 'b00001000001000001xx0000001000100000010xx00000;
	cfgsin18[0:44] =  45 'b01000010000010xx0000001000001000001xx00000010;
	cfgsin19[0:44] =  45 'b00001000001xx0000001000000001001xx00000010000;
	cfgsin20[0:44] =  45 'b01000001xx0000001000100000100xx00000010000010;
	cfgsin21[0:44] =  45 'b00001xx0000001000001000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000001000001xx0000001000100000001x;
	cfgsin23[0:44] =  45 'bx0000001000001000100xx0000001000001000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00000001100000010xx0000001000001000001xx00000;
	cfgsin30[0:44] =  45 'b01000001000001xx0000001000001000001xx00010010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000001000001xx00000000010;
	cfgsin28[0:44] =  45 'b00001001xx0000001000001000001xx00000010000010;
	cfgsin27[0:44] =  45 'b00100xx0000001000001000001xx00000010000010001;
	cfgsin26[0:44] =  45 'b00xx0000001000001000001xx0000001000100000001x;
	cfgsin25[0:44] =  45 'bx0000001000100000001xx0000001000100000001xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000001xx000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat413; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000100000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010000;
	cfgsin4[0:44] =  45 'b01000001xx0000010000100000100xx00000010000000;
	cfgsin5[0:44] =  45 'b01100xx1000010000100000100xx00000010000010000;
	cfgsin6[0:44] =  45 'b01xx0000001000001000001xx0000001000000100100x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0000001000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00000100000001010xx0000010000000001001xx00000;
	cfgsin14[0:44] =  45 'b00010001000100xx0000001000000001001xx00000001;
	cfgsin13[0:44] =  45 'b00000001001xx0000000100010000010xx00000010000;
	cfgsin12[0:44] =  45 'b00100100xx0001001000001000001xx00000001000000;
	cfgsin11[0:44] =  45 'b10100xx0000000100001000010xx00000100000001000;
	cfgsin10[0:44] =  45 'b10xx0000010000001000001xx0000001000001000001x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx00000001100000001x000;
	cfgsin17[0:44] =  45 'b00001000001000100x00000001000100000010x000000;
	cfgsin18[0:44] =  45 'b01000010000100x00000001000001000001x010000000;
	cfgsin19[0:44] =  45 'b01001000100x00000000001000100001x000000010000;
	cfgsin20[0:44] =  45 'b01000100x00000001000100000001x000000000010010;
	cfgsin21[0:44] =  45 'b00100x00000001000001000001x000000010001000001;
	cfgsin22[0:44] =  45 'b00x00000001000001000001x00000001000001000100x;
	cfgsin23[0:44] =  45 'b00000001000001000001x00000001000001000100x000;
// BR
	cfgsin31[0:44] =  45 'b00001000000001010x00000000001001000100x000000;
	cfgsin30[0:44] =  45 'b01000001000001x00000001000100000100x000000010;
	cfgsin29[0:44] =  45 'b00100000010x00000001000001000100x000000010000;
	cfgsin28[0:44] =  45 'b00001001x00000001000001000100x000000010000010;
	cfgsin27[0:44] =  45 'b00001x00000001000001000100x000000010000010000;
	cfgsin26[0:44] =  45 'b01x00000001000001000100x00000001000100000001x;
	cfgsin25[0:44] =  45 'b00000001000100000100x00000001000100000001x000;
	cfgsin24[0:44] =  45 'bxx00001000100000100x000xxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat412; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000100000100xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010000;
	cfgsin4[0:44] =  45 'b01000100xx0000000100100000100xx00001000000001;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010000010001;
	cfgsin6[0:44] =  45 'b00xx0000001000001000100xx0000100000000100100x;
	cfgsin7[0:44] =  45 'bx0001000100001000100xx0000000100001000100xx00;
// TR
	cfgsin15[0:44] =  45 'b01000100000001010xx0100000010001000100xx00000;
	cfgsin14[0:44] =  45 'b00001000010100xx0000000010001000010xx00000010;
	cfgsin13[0:44] =  45 'b00001000001xx0000001000001000001xx00000001000;
	cfgsin12[0:44] =  45 'b00100100xx0000001000001000010xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000001000100xx00001000000001000;
	cfgsin10[0:44] =  45 'b10xx0000001000001000001xx0000001000001000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000001000100000100x000;
	cfgsin17[0:44] =  45 'b00001000001000100x00000001000100000100x000000;
	cfgsin18[0:44] =  45 'b00001000010100x00000001000001000100x001000010;
	cfgsin19[0:44] =  45 'b00001000100x00000001000000001100x000000010000;
	cfgsin20[0:44] =  45 'b01000100x00000001000100000100x000000010000010;
	cfgsin21[0:44] =  45 'b00100x00000001000001000100x000000010001000001;
	cfgsin22[0:44] =  45 'b00x00000001000001000100x00000001000001000100x;
	cfgsin23[0:44] =  45 'b00000001000001000100x00000001000001000100x000;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100x00000001000001000100x000000;
	cfgsin30[0:44] =  45 'b01000001000100x00000001000000001100x000000010;
	cfgsin29[0:44] =  45 'b00100000010x00010001000001000100x000000010000;
	cfgsin28[0:44] =  45 'b00001100x00000001000001000100x000000010000010;
	cfgsin27[0:44] =  45 'b00100x00000001000001000100x000000010000010001;
	cfgsin26[0:44] =  45 'b00x00000001000001000100x00000001000100000100x;
	cfgsin25[0:44] =  45 'b00000001000100000100x00000001000100000100x000;
	cfgsin24[0:44] =  45 'bxx00001000100000100x0000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat411; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000100000100xx1000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0100001000100000100xx00001000000;
	cfgsin4[0:44] =  45 'b01000001xx0000000010100000010xx00010010001000;
	cfgsin5[0:44] =  45 'b00010xx0001001000100000010xx10000010000010000;
	cfgsin6[0:44] =  45 'b01xx0000000100001000001xx0001000010100000010x;
	cfgsin7[0:44] =  45 'bx0000000100001000001xx1000001000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00000010000001001xx0000001000001000010xx10000;
	cfgsin14[0:44] =  45 'b01000000100010xx0110000100001000100xx10100000;
	cfgsin13[0:44] =  45 'b10001000100xx0000000100000001010xx00000010000;
	cfgsin12[0:44] =  45 'b00001100xx0000001000001000100xx00000010000000;
	cfgsin11[0:44] =  45 'b01010xx0000001000001000001xx10000010001000000;
	cfgsin10[0:44] =  45 'b01xx1000001000001000100xx1000001000001000001x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx00001000000001100xx00;
	cfgsin17[0:44] =  45 'b00001000001000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000010000100xx0000001000001000100xx00000010;
	cfgsin19[0:44] =  45 'b00001000100xx0000000010000001100xx00000010000;
	cfgsin20[0:44] =  45 'b01000100xx0000001000001000100xx00000010000010;
	cfgsin21[0:44] =  45 'b00100xx0000001000001000100xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000001000100xx0000001000001000100x;
	cfgsin23[0:44] =  45 'bx0000001000001000100xx0000001000001000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00000010000001100xx0000001000001000100xx00000;
	cfgsin30[0:44] =  45 'b00100001000100xx0000001000001000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000001000100xx00000010000;
	cfgsin28[0:44] =  45 'b01000100xx0000000001001000100xx00000010000010;
	cfgsin27[0:44] =  45 'b00100xx0000001000001000100xx00000010000010001;
	cfgsin26[0:44] =  45 'b00xx0000001000001000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx00xxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat410; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx1001000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin3[0:44] =  45 'b00100000100xx0xx1001000100000100xx1xx10010001;
	cfgsin4[0:44] =  45 'b00000001xx1xx1001000100000100xx1xx00001000000;
	cfgsin5[0:44] =  45 'b10100xx0xx0001000001000100xx0xx10010000000100;
	cfgsin6[0:44] =  45 'b01xx1xx1001000100000001xx1xx0010000100000100x;
	cfgsin7[0:44] =  45 'bx1xx0001000100000001xx0xx1000100100000001xx1x;
// TR
	cfgsin15[0:44] =  45 'bx0001000100000100xx0xx1000100000001001xx0xx10;
	cfgsin14[0:44] =  45 'b00100000010100xx0xx0001000100000001xx0xx00000;
	cfgsin13[0:44] =  45 'b01100000010xx1xx1010000001000100xx1xx10010000;
	cfgsin12[0:44] =  45 'b10000100xx1xx0001000100000001xx1xx10000100010;
	cfgsin11[0:44] =  45 'b00010xx1xx1001000000100001xx0xx10001001000001;
	cfgsin10[0:44] =  45 'b00xx0xx1000010100000010xx0xx1001000000010001x;
	cfgsin9[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000010x01xx;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000000001100000001xx00;
	cfgsin17[0:44] =  45 'b00001000100000001xx0001001000100000010xx00000;
	cfgsin18[0:44] =  45 'b01000100000010xx0000001000001000001xx00000010;
	cfgsin19[0:44] =  45 'b00001000001xx0000000001001000001xx00000010001;
	cfgsin20[0:44] =  45 'b00000001xx1000000001001000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00001xx0000001000001000010xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000001000001xx0000001000001000001x;
	cfgsin23[0:44] =  45 'bx0000001000001000100xx0000001000001000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000000100010xx0000001000100000001xx00010;
	cfgsin30[0:44] =  45 'b00100001000001xx0010001000001000001xx00000010;
	cfgsin29[0:44] =  45 'b00010000010xx0000001000001000001xx00000010000;
	cfgsin28[0:44] =  45 'b01000001xx0000001000000100001xx00000010000010;
	cfgsin27[0:44] =  45 'b00100xx0000001000001000001xx00000010000010000;
	cfgsin26[0:44] =  45 'b01xx0000001000001000001xx0000001000100000001x;
	cfgsin25[0:44] =  45 'bx0000001000100000001xx0000001000100000001xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000001xx000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat409; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000100x00xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1010000100000010x00xx10100000001;
	cfgsin5[0:44] =  45 'b00010x00xx1010000000100010x00xx10100001000000;
	cfgsin6[0:44] =  45 'b10x01xx1010000100000010x00xx1010000100000010x;
	cfgsin7[0:44] =  45 'b00xx1100000100000100x01xx1010000100000010x01x;
// TR
	cfgsin15[0:44] =  45 'bx1000010001000010x01xx1000100001000010x00xx10;
	cfgsin14[0:44] =  45 'b10000000100010x00xx1001000100000100x00xx10100;
	cfgsin13[0:44] =  45 'b00100000001x00xx1000100001000010x00xx10100000;
	cfgsin12[0:44] =  45 'b00001100x00xx1001000010000001x00xx10100000010;
	cfgsin11[0:44] =  45 'b00100x00xx1000010100000010x00xx10000100010000;
	cfgsin10[0:44] =  45 'b01x00xx1010000100000010x01xx1010000100000010x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxxx1000010100000001x01x;
	cfgsin17[0:44] =  45 'bx1001000100000001x01xx0001000001000010x01xx10;
	cfgsin18[0:44] =  45 'b00010100000100x01xx1001000100000001x00xx10010;
	cfgsin19[0:44] =  45 'b00100000100x01xx1001000100000001x01xx10010001;
	cfgsin20[0:44] =  45 'b00000001x00xx1001000000010001x01xx10000011000;
	cfgsin21[0:44] =  45 'b00100x01xx1001000010000001x01xx10010001000001;
	cfgsin22[0:44] =  45 'b00x01xx1000001100000001x01xx1001000100000100x;
	cfgsin23[0:44] =  45 'b01xx1001000100000001x01xx1001000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1000001001000010x01xx1000001100000001x01xx00;
	cfgsin30[0:44] =  45 'b00100100000001x01xx0001000100000100x01xx10010;
	cfgsin29[0:44] =  45 'b00001000010x01xx0001000100000100x01xx10010001;
	cfgsin28[0:44] =  45 'b00000001x01xx1001000100000001x01xx10010001000;
	cfgsin27[0:44] =  45 'b00001x01xx1001000100000100x01xx10010001000000;
	cfgsin26[0:44] =  45 'b01x01xx1001000100000100x01xx1001000100000001x;
	cfgsin25[0:44] =  45 'b01xx1001000100000100x01xx1001000100000001x01x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100x01xxxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat408; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx1000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000010x00000000010000100100x000000000101000;
	cfgsin5[0:44] =  45 'b00100x00000001000100000100x010000000011000001;
	cfgsin6[0:44] =  45 'b00x00000010000100000100x00000000010001000001x;
	cfgsin7[0:44] =  45 'b01000100000100000010x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x10000100000010000100x000000;
	cfgsin14[0:44] =  45 'b01000010000001x00000010000100000010x010000100;
	cfgsin13[0:44] =  45 'b00000100001x00000010000100000010x001000100000;
	cfgsin12[0:44] =  45 'b10000100x00100010000100000001x010000100000010;
	cfgsin11[0:44] =  45 'b00001x01000001000000100100x100000100001000001;
	cfgsin10[0:44] =  45 'b00x11000010000000001100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00001100000000001100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx0x1000100100000001x11x;
	cfgsin17[0:44] =  45 'bx1100000100000001x01xx1100000001000010x11xx10;
	cfgsin18[0:44] =  45 'b00001001000100x01xx1010000100000001x10xx10100;
	cfgsin19[0:44] =  45 'b00100000001x00xx1000010100000100x11xx10100001;
	cfgsin20[0:44] =  45 'b00000001x01xx1010000000010010x11xx10100001000;
	cfgsin21[0:44] =  45 'b00001x01xx1010000010000001x11xx10100001000001;
	cfgsin22[0:44] =  45 'b00x01xx1010000100000001x11xx1010000100000100x;
	cfgsin23[0:44] =  45 'b00xx1010000100000001x11xx1010000100000001x00x;
// BR
	cfgsin31[0:44] =  45 'bx1000010001000100x11xx1100000100000001x01xx10;
	cfgsin30[0:44] =  45 'b10000100000001x11xx1000010100000100x01xx10100;
	cfgsin29[0:44] =  45 'b00001000010x11xx1010000100000001x01xx10000101;
	cfgsin28[0:44] =  45 'b00000100x11xx0010000100000001x01xx11000001000;
	cfgsin27[0:44] =  45 'b00001x11xx0010000100000001x01xx10100001000000;
	cfgsin26[0:44] =  45 'b01x11xx1010000100000001x01xx1010000100000001x;
	cfgsin25[0:44] =  45 'b11xx1100000100000001x01xx1100000100000001x11x;
	cfgsin24[0:44] =  45 'bxxx1100000100000001x01x0xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat407; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx0000100000100000100x100;
	cfgsin1[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin2[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin3[0:44] =  45 'b00100000100x10000100000100000100x100000100000;
	cfgsin4[0:44] =  45 'b10000001x10000100000001000001x100001000000010;
	cfgsin5[0:44] =  45 'b00001x10000100000010000001x100000100000010000;
	cfgsin6[0:44] =  45 'b01x10000010000000100001x10000000100000100100x;
	cfgsin7[0:44] =  45 'b10000010000010000001x10000010000000100001x100;
// TR
	cfgsin15[0:44] =  45 'b00010000000100001x10000010000100000001x100000;
	cfgsin14[0:44] =  45 'b00010100000100x10000010000010000001x100000100;
	cfgsin13[0:44] =  45 'b00100000001x10000001000001000010x100000100000;
	cfgsin12[0:44] =  45 'b10000100x10000010000100000001x100000100000010;
	cfgsin11[0:44] =  45 'b00010x10000010000010000001x100000010000010000;
	cfgsin10[0:44] =  45 'b10x10000010000010000001x10000010000010000001x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx00100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000010000001000100xx00000;
	cfgsin18[0:44] =  45 'b10000001000010xx0000000001100000100xx00000100;
	cfgsin19[0:44] =  45 'b00100000100xx1000000100100000010xx00000100001;
	cfgsin20[0:44] =  45 'b00000100xx0000000010000010001xx00000100001000;
	cfgsin21[0:44] =  45 'b00100xx0000010000000001100xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000010000100000100xx0000010000100000001x;
	cfgsin23[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx01;
// BR
	cfgsin31[0:44] =  45 'b00010000001000001xx0000100000100000100xx00000;
	cfgsin30[0:44] =  45 'b10000100000100xx0000010000100000010xx00000100;
	cfgsin29[0:44] =  45 'b00001000100xx0000000001100000100xx00000000011;
	cfgsin28[0:44] =  45 'b00000010xx0001010000100000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin26[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx00xxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat406; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin4[0:44] =  45 'b00000001x00000010000100000100x010000100000100;
	cfgsin5[0:44] =  45 'b00100x01000010000000100100x000001000001000000;
	cfgsin6[0:44] =  45 'b01x00000100000100000001x01000100000100000100x;
	cfgsin7[0:44] =  45 'b00000010000100000001x00000010000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000001x00000010000000010010x001001;
	cfgsin14[0:44] =  45 'b00000000001100x01000010000100000001x000001000;
	cfgsin13[0:44] =  45 'b00000010010x00100001000001000010x000001000000;
	cfgsin12[0:44] =  45 'b10000100x00000100000100000001x000001000001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000010x010000000100010000;
	cfgsin10[0:44] =  45 'b10x00000010000100000001x00000010000100000001x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000000001000001010xx00;
	cfgsin17[0:44] =  45 'b00010000100000001xx0000100000001000010xx00000;
	cfgsin18[0:44] =  45 'b10000001000010xx0000010000100000001xx00000100;
	cfgsin19[0:44] =  45 'b00100000001xx0000010000100000001xx00000100001;
	cfgsin20[0:44] =  45 'b00000001xx0000010000000100100xx00000100001000;
	cfgsin21[0:44] =  45 'b00001xx0000010000010000001xx00000100001000001;
	cfgsin22[0:44] =  45 'b00xx0000010000100000001xx0000010000010000010x;
	cfgsin23[0:44] =  45 'bx0000010000100000001xx0000010000100000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000000001010xx0000010000100000001xx00000;
	cfgsin30[0:44] =  45 'b10000100000001xx0000010000100000001xx00000100;
	cfgsin29[0:44] =  45 'b00001000010xx0000010000100000001xx00000100001;
	cfgsin28[0:44] =  45 'b00000001xx0000010000100000001xx00000100001000;
	cfgsin27[0:44] =  45 'b00001xx0001010000100000001xx00000100001000000;
	cfgsin26[0:44] =  45 'b01xx0000010000100000001xx0000010000100000001x;
	cfgsin25[0:44] =  45 'bx0000100000100000001xx0000100000100000001xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000001xx000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat405; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000000;
	cfgsin4[0:44] =  45 'b00100100x00000010000100000100x000000100000100;
	cfgsin5[0:44] =  45 'b00100x00000000010000100100x000001000001000000;
	cfgsin6[0:44] =  45 'b01x00000100000100000001x00000001000100000100x;
	cfgsin7[0:44] =  45 'b00001100000100000001x00000010000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b01010000001000001x00100001000001000010x000000;
	cfgsin14[0:44] =  45 'b01000000100100x00000100000001000001x000000010;
	cfgsin13[0:44] =  45 'b00000001100x00100100000001000010x000001000000;
	cfgsin12[0:44] =  45 'b00001001x00000000001100000001x000000100000010;
	cfgsin11[0:44] =  45 'b00001x00000001000001000001x000000100000010000;
	cfgsin10[0:44] =  45 'b10x00000001000100000001x00000001000100000001x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx00100000000010001xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000010000001000100xx00000;
	cfgsin18[0:44] =  45 'b10000000001100xx0000100000000001100xx10000100;
	cfgsin19[0:44] =  45 'b00100000100xx0000010000000100100xx00000100001;
	cfgsin20[0:44] =  45 'b00000100xx0000010000001000001xx00000100000000;
	cfgsin21[0:44] =  45 'b01100xx0000010000000001100xx00000100001000001;
	cfgsin22[0:44] =  45 'b00xx0000010000100000010xx0000010000100000100x;
	cfgsin23[0:44] =  45 'bx1000010000000001100xx0000010000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000100000010xx0000010000100000100xx00000;
	cfgsin30[0:44] =  45 'b10000000001100xx0000010000100000100xx00000001;
	cfgsin29[0:44] =  45 'b00001000010xx0000010000100000100xx00000100001;
	cfgsin28[0:44] =  45 'b00000010xx0000100000100000100xx00000100000000;
	cfgsin27[0:44] =  45 'b01100xx0000010000100000100xx00000100000000011;
	cfgsin26[0:44] =  45 'b00xx0000010000100000100xx0000010000000001100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000000001100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx00xxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat404; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000100x000001000000100;
	cfgsin5[0:44] =  45 'b00100x00010100000000100100x000001000001000000;
	cfgsin6[0:44] =  45 'b01x00000100000100000001x00000010000010000100x;
	cfgsin7[0:44] =  45 'b00000010000100000001x00000100000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00100000001000001x00000100000000010001x000000;
	cfgsin14[0:44] =  45 'b00010001000010x00000010000000010001x000001000;
	cfgsin13[0:44] =  45 'b00000010001x00000000001000001010x001000010001;
	cfgsin12[0:44] =  45 'b00000001x00000001000000001001x000000000100010;
	cfgsin11[0:44] =  45 'b00001x00100100000000001001x000001000001000000;
	cfgsin10[0:44] =  45 'b10x00100100000100000001x00000100000100000001x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000000001001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000000010100000010x100;
	cfgsin17[0:44] =  45 'b00100000000001001x00000010000001000010x100000;
	cfgsin18[0:44] =  45 'b10000100000010x00000000010000001001x100000100;
	cfgsin19[0:44] =  45 'b00000010001x00000010000100000010x100000100001;
	cfgsin20[0:44] =  45 'b00000001x00000000100100000010x100000100000000;
	cfgsin21[0:44] =  45 'b01001x00000010000010000001x100000100001000001;
	cfgsin22[0:44] =  45 'b00x00000010000000001001x10000000010100000001x;
	cfgsin23[0:44] =  45 'b00000010000000001001x10000010000100000001x000;
// BR
	cfgsin31[0:44] =  45 'b00010000001000100x10000010000100000001x000000;
	cfgsin30[0:44] =  45 'b10000100000001x10000000100100000001x000010100;
	cfgsin29[0:44] =  45 'b00001000010x10000010000001000001x000000100000;
	cfgsin28[0:44] =  45 'b01000100x10000100000100000001x000000100001000;
	cfgsin27[0:44] =  45 'b00001x10000010000100000001x000000100001000000;
	cfgsin26[0:44] =  45 'b01x10000010000100000001x00000010000100000001x;
	cfgsin25[0:44] =  45 'b10000100000100000001x00000100000100000001x100;
	cfgsin24[0:44] =  45 'bxx00100000100000001x0000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat403; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100001000001000100000100x000;
	cfgsin1[0:44] =  45 'b00001000100000100x00000001000100000100x000000;
	cfgsin2[0:44] =  45 'b01000100000100x00000001000100000100x000000010;
	cfgsin3[0:44] =  45 'b00100000100x00000001000100000100x000000000101;
	cfgsin4[0:44] =  45 'b00000001x00000000100000001100x000010001000000;
	cfgsin5[0:44] =  45 'b01001x00000010000000001100x000001000000000010;
	cfgsin6[0:44] =  45 'b01x00000100000000001001x00101010000000001001x;
	cfgsin7[0:44] =  45 'b11000001000000001001x00001010000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00010000001000001x00000010000000100001x100000;
	cfgsin14[0:44] =  45 'b00001000001001x01001001000000001001x001100100;
	cfgsin13[0:44] =  45 'b00010000010x00001010000001000001x000100010000;
	cfgsin12[0:44] =  45 'b10000100x00000000001100000001x010000100000010;
	cfgsin11[0:44] =  45 'b00010x00000000001000001001x010000010000010000;
	cfgsin10[0:44] =  45 'b01x00000001000000001001x00000010000000001001x;
	cfgsin9[0:44] =  45 'b01000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000000001000100100x000;
	cfgsin17[0:44] =  45 'b00100000100000001x00000010000001000010x000000;
	cfgsin18[0:44] =  45 'b10000001000100x00000100000010000010x000000100;
	cfgsin19[0:44] =  45 'b00000001001x00000010000001000001x000000100001;
	cfgsin20[0:44] =  45 'b00000001x00000000010010000100x000000100001000;
	cfgsin21[0:44] =  45 'b00010x00000010000010000010x000000100001000001;
	cfgsin22[0:44] =  45 'b00x00000010000000001100x00000010000100000001x;
	cfgsin23[0:44] =  45 'b00000010000100000010x00000010000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00010000001000001x00000010000000010001x000000;
	cfgsin30[0:44] =  45 'b10000100000010x00000010000100000100x000000100;
	cfgsin29[0:44] =  45 'b00001000100x00000010000000001001x000000100001;
	cfgsin28[0:44] =  45 'b00000001x00000000010100000001x000000100001000;
	cfgsin27[0:44] =  45 'b00010x00000010000100000001x000000100001000000;
	cfgsin26[0:44] =  45 'b10x00000010000100000100x00000010000100000010x;
	cfgsin25[0:44] =  45 'b00000100000100000001x00000100000100000010x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x0000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat402; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1001000100000100x01x;
	cfgsin1[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin2[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin3[0:44] =  45 'b00100000100x01xx1001000100000100x01xx10010000;
	cfgsin4[0:44] =  45 'b10000010x01xx1000100000100100x01xx00010001000;
	cfgsin5[0:44] =  45 'b00100x01xx0001000100000100x01xx10100000100000;
	cfgsin6[0:44] =  45 'b01x01xx1001000000001001x00xx0010000000100100x;
	cfgsin7[0:44] =  45 'b00xx0010000000100001x01xx0010000000010001x01x;
// TR
	cfgsin15[0:44] =  45 'bx0010000000100010x00xx1001000100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000010000010x00xx0010000001000010x00xx00100;
	cfgsin13[0:44] =  45 'b00100000100x00xx0000001000100010x00xx00000010;
	cfgsin12[0:44] =  45 'b01000010x01xx1010000100000001x00xx10100001000;
	cfgsin11[0:44] =  45 'b00100x00xx1001000000100100x00xx10100001000000;
	cfgsin10[0:44] =  45 'b10x10xx1010000100000001x01xx1010000100000001x;
	cfgsin9[0:44] =  45 'b00xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx001000000100001000000;
	cfgsin17[0:44] =  45 'b000000101000000100000001000000010000100000000;
	cfgsin18[0:44] =  45 'b100000010000010000000100000010000010000000100;
	cfgsin19[0:44] =  45 'b001000000100000000000100000101000000000100000;
	cfgsin20[0:44] =  45 'b000010010000010100000000010100000100010000000;
	cfgsin21[0:44] =  45 'b100010010000010001000000010001000100000010001;
	cfgsin22[0:44] =  45 'b000000000010001000000010000000000101000000010;
	cfgsin23[0:44] =  45 'b000000100001000000010000000100001000000010000;
// BR
	cfgsin31[0:44] =  45 'b000001000010001000000001000000000011000000010;
	cfgsin30[0:44] =  45 'b100001000000010000001000000100000010000000000;
	cfgsin29[0:44] =  45 'b100010000100000000100001000000100000000001001;
	cfgsin28[0:44] =  45 'b000000100000000100001000000010010000010001000;
	cfgsin27[0:44] =  45 'b000010010000100001000000010000000100001000000;
	cfgsin26[0:44] =  45 'b010000000100000000010010000000100001000000010;
	cfgsin25[0:44] =  45 'b000000010001000000010000001000001000000010000;
	cfgsin24[0:44] =  45 'bxx001000001000000010000xxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat401; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000100xx0xx1001000100000100x01x;
	cfgsin1[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin2[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin3[0:44] =  45 'b00100000100x00xx1001000100000100x00xx10010000;
	cfgsin4[0:44] =  45 'b10000100x01xx1000100001000100x01xx10001000010;
	cfgsin5[0:44] =  45 'b00100x01xx1010000001000100x01xx10100000100000;
	cfgsin6[0:44] =  45 'b01x00xx1010000010000001x00xx1010000001000100x;
	cfgsin7[0:44] =  45 'b11xx1010000010000001x01xx1010000100000001x01x;
// TR
	cfgsin15[0:44] =  45 'bx1010000000001010x01xx0010000001000001x01xx00;
	cfgsin14[0:44] =  45 'b00010001000100x01xx0010000000100010x01xx00100;
	cfgsin13[0:44] =  45 'b00000010001x01xx0010000001000010x01xx00010000;
	cfgsin12[0:44] =  45 'b01000001x01xx1010000010000001x01xx10100000001;
	cfgsin11[0:44] =  45 'b00001x00xx0010000100000010x00xx00100000010000;
	cfgsin10[0:44] =  45 'b10x01xx1010000001000001x01xx1010000100000001x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx0x11000001000000100x1x;
	cfgsin17[0:44] =  45 'bx10100000100001000x1xx11000001000001000x1xx10;
	cfgsin18[0:44] =  45 'b100001000000100x1xx10100001000001000x1xx10100;
	cfgsin19[0:44] =  45 'b001000001000x1xx10100000100000100x1xx10100001;
	cfgsin20[0:44] =  45 'b000001000x1xx00000011000000010x1xx00010001000;
	cfgsin21[0:44] =  45 'b001000x0xx11000001000001000x0xx10100001000001;
	cfgsin22[0:44] =  45 'b000x1xx10010001000001000x1xx10100000100001000;
	cfgsin23[0:44] =  45 'bx1xx10100001000001000x1xx10100001000001000x1x;
// BR
	cfgsin31[0:44] =  45 'bx11000000100000100x1xx10100000100000100x1xx00;
	cfgsin30[0:44] =  45 'b100001000001000x1xx10100000100000100x1xx00100;
	cfgsin29[0:44] =  45 'b000100000100x1xx10100001000001000x1xx10100000;
	cfgsin28[0:44] =  45 'b100001000x1xx10100001000001000x0xx10010001000;
	cfgsin27[0:44] =  45 'b001000x0xx10100001000001000x1xx10100001000001;
	cfgsin26[0:44] =  45 'b000x1xx10100001000001000x1xx10100001000001000;
	cfgsin25[0:44] =  45 'bx1xx10010001000001000x1xx11000001000001000x1x;
	cfgsin24[0:44] =  45 'bxxx11000001000001000x1x0xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat400; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx1000100000100000100xx10000000010;
	cfgsin4[0:44] =  45 'b10000001xx0000001000001000100xx00000010000010;
	cfgsin5[0:44] =  45 'b00100xx0000001000001000100xx00000100000100000;
	cfgsin6[0:44] =  45 'b01xx1000010000010000001xx0100001000001000100x;
	cfgsin7[0:44] =  45 'bx0000010000010000001xx0000100000100000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000000001001xx0010100000100000100xx00010;
	cfgsin14[0:44] =  45 'b01000001000100xx0000010000000001010xx00010001;
	cfgsin13[0:44] =  45 'b00000010100xx0010100000000010001xx00100100000;
	cfgsin12[0:44] =  45 'b01000100xx0000000100001000001xx00000001001000;
	cfgsin11[0:44] =  45 'b00010xx0001000100000100001xx10000000100000010;
	cfgsin10[0:44] =  45 'b01xx0000001000000100001xx0000100000100000001x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000010xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxxx1001000100000001xx1x;
	cfgsin17[0:44] =  45 'bx1100000010000001xx1xx1100000100000010xx1xx11;
	cfgsin18[0:44] =  45 'b00000100000100xx1xx1010000100000010xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000001xx1xx1010000010000001xx0xx10100001;
	cfgsin20[0:44] =  45 'b00000001xx0xx1010000100000100xx1xx11000001000;
	cfgsin21[0:44] =  45 'b00010xx1xx1001000100000001xx1xx10100000010001;
	cfgsin22[0:44] =  45 'b00xx1xx1001000100000010xx1xx1010000010000001x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000010xx1xx1010000100000001xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1100000010000010xx1xx1010000010000001xx1xx10;
	cfgsin30[0:44] =  45 'b10000100000001xx1xx1000010010000100xx1xx10100;
	cfgsin29[0:44] =  45 'b00000001100xx1xx1010000100000001xx1xx10100000;
	cfgsin28[0:44] =  45 'b10000001xx1xx1010000100000001xx1xx10010001000;
	cfgsin27[0:44] =  45 'b00001xx0xx1010000100000001xx1xx10100001000000;
	cfgsin26[0:44] =  45 'b01xx0xx1010000100000001xx1xx1000100100000001x;
	cfgsin25[0:44] =  45 'bx1xx1000100100000001xx1xx1000100100000001xx1x;
	cfgsin24[0:44] =  45 'bxxx1000100100000001xx1xxxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat399; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00001000000;
	cfgsin4[0:44] =  45 'b00001001xx0000001000010000100xx00000010000100;
	cfgsin5[0:44] =  45 'b00100xx0000001000010000100xx00000100001000000;
	cfgsin6[0:44] =  45 'b01xx0000010000100000001xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0000010000100000001xx0000100000010000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000010000010xx0000001000010000001xx00001;
	cfgsin14[0:44] =  45 'b00000001000010xx0000010000100000001xx00000000;
	cfgsin13[0:44] =  45 'b10100000001xx0000100000100000010xx00000100000;
	cfgsin12[0:44] =  45 'b01000010xx0000000100000100100xx00000000100100;
	cfgsin11[0:44] =  45 'b00010xx0100000010010000010xx00100000100100000;
	cfgsin10[0:44] =  45 'b01xx0000001000010000001xx0000100000010000001x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000010000100000001xx00;
	cfgsin17[0:44] =  45 'b00010000010000001xx0000100000100000010xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000001xx00001000;
	cfgsin19[0:44] =  45 'b00100000001xx0000010000010000001xx10001000001;
	cfgsin20[0:44] =  45 'b00000001xx1000000001100000001xx00001000001000;
	cfgsin21[0:44] =  45 'b00001xx0000100000100000001xx00000010000010001;
	cfgsin22[0:44] =  45 'b00xx0000000100100000001xx0000010000010000001x;
	cfgsin23[0:44] =  45 'bx0000100000100000001xx0000100000100000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000010000010xx0000010000010000001xx00001;
	cfgsin30[0:44] =  45 'b00000100000001xx0000010000010000100xx00000000;
	cfgsin29[0:44] =  45 'b01010000010xx0000100000100000001xx00000000010;
	cfgsin28[0:44] =  45 'b10000001xx0000100000100000001xx00001000001000;
	cfgsin27[0:44] =  45 'b00001xx1000100000100000001xx00001000001000000;
	cfgsin26[0:44] =  45 'b01xx1000100000100000001xx0000100000100000001x;
	cfgsin25[0:44] =  45 'bx0000100000100000001xx0000100000100000001xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000001xx000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat398; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin1[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin2[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin3[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000010000x;
	cfgsin4[0:44] =  45 'bx001x001xx0000001000xx010x100xx0000001000xx01;
	cfgsin5[0:44] =  45 'b0x001xx0000001000xx010x100xx0000010000xx010x0;
	cfgsin6[0:44] =  45 'b01xx0000010000xx010x001xx0000001000xx010x010x;
	cfgsin7[0:44] =  45 'bx0000010000xx010x001xx0000100000xx100x001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000xx001x100xx0000000001xx100x010xx00000;
	cfgsin14[0:44] =  45 'b00010xx010x001xx0001000010xx010x100xx00000000;
	cfgsin13[0:44] =  45 'b01xx100x010xx0000010000xx001x100xx0000001000x;
	cfgsin12[0:44] =  45 'bx001x001xx0000000010xx100x010xx0000100000xx01;
	cfgsin11[0:44] =  45 'b0x010xx0000001000xx001x100xx0000000100xx100x1;
	cfgsin10[0:44] =  45 'b00xx0000001000xx010x001xx0000100000xx010x001x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000000100100000010x000;
	cfgsin17[0:44] =  45 'b00010000010000100x00000100000100000010x000000;
	cfgsin18[0:44] =  45 'b00100000001010x00000100000100000010x000001000;
	cfgsin19[0:44] =  45 'b00100000010x00000001000000001100x000001000001;
	cfgsin20[0:44] =  45 'b00000001x00000000001010000010x000001000001000;
	cfgsin21[0:44] =  45 'b00100x00000100000100000001x000000010000010001;
	cfgsin22[0:44] =  45 'b00x00000100000100000001x00000010000100000001x;
	cfgsin23[0:44] =  45 'b00000100000100000001x00000100000100000001x000;
// BR
	cfgsin31[0:44] =  45 'b00100000000010100x00000000100010000010x000001;
	cfgsin30[0:44] =  45 'b00000100000001x00000001000000001001x000000000;
	cfgsin29[0:44] =  45 'b01010000100x00000100000100000010x000000100000;
	cfgsin28[0:44] =  45 'b01000100x00000100000100000100x000001000001000;
	cfgsin27[0:44] =  45 'b00001x00000100000100000001x000001000001000000;
	cfgsin26[0:44] =  45 'b01x00000100000100000001x00000100000100000001x;
	cfgsin25[0:44] =  45 'b00000100000100000001x00000100000100000001x000;
	cfgsin24[0:44] =  45 'bxx00100000100000001x0000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat397; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin1[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin2[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin3[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000000001x;
	cfgsin4[0:44] =  45 'bx001x1001x0000001000xx100x0101x0000001000xx10;
	cfgsin5[0:44] =  45 'b0x0101x0001001000xx100x0101x0000010000xx001x0;
	cfgsin6[0:44] =  45 'b101x0000010000xx001x0101x0000001000xx100x0101;
	cfgsin7[0:44] =  45 'bx0000010000xx001x0101x0001000001xx001x1001x00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx010x0011x1001000001xx001x0101x00000;
	cfgsin14[0:44] =  45 'b01000xx100x0011x0000010000xx001x0101x00000000;
	cfgsin13[0:44] =  45 'b01xx001x0101x0000100000xx010x0011x0000001000x;
	cfgsin12[0:44] =  45 'bx100x0011x0000000001xx001x1001x0000100000xx01;
	cfgsin11[0:44] =  45 'b0x0011x0000000100xx001x0101x0000000001xx010x1;
	cfgsin10[0:44] =  45 'b001x0000001000xx001x0101x0000100000xx001x0101;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000100000xx100x001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx00001000xx001x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx010x001xx0000000001xx010x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx010x010xx0000100000xx001x001xx00001000;
	cfgsin19[0:44] =  45 'b00xx100x001xx0000100000xx001x010xx0000100000x;
	cfgsin20[0:44] =  45 'bx100x001xx0000100000xx001x001xx0000000100xx10;
	cfgsin21[0:44] =  45 'b0x001xx0000100000xx001x001xx0000001000xx100x1;
	cfgsin22[0:44] =  45 'b00xx0000100000xx001x010xx0000010000xx100x001x;
	cfgsin23[0:44] =  45 'bx0000100000xx001x001xx0000100000xx100x001xx00;
// BR
	cfgsin31[0:44] =  45 'b00000100xx010x001xx0000010000xx001x001xx00001;
	cfgsin30[0:44] =  45 'b00000xx001x001xx0000010000xx001x001xx00001000;
	cfgsin29[0:44] =  45 'b00xx010x010xx0000100000xx100x001xx0000100000x;
	cfgsin28[0:44] =  45 'bx001x001xx0000010000xx100x001xx0000100000xx00;
	cfgsin27[0:44] =  45 'b1x001xx0000100000xx100x001xx0000100000xx001x0;
	cfgsin26[0:44] =  45 'b01xx0000100000xx100x001xx0000100000xx001x001x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x001xx0000100000xx001x001xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x001xx00xxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat396; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000001000001000000000000010001000000000000;
	cfgsin5[0:44] =  45 'b000001000000000000000100000000000001000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000001000;
	cfgsin7[0:44] =  45 'b001100000000000100000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b100010001000010000000000000000000000000000100;
	cfgsin14[0:44] =  45 'b001000001000000000000000000000100000000000000;
	cfgsin13[0:44] =  45 'b000000000011000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000001000000000000000000000000101000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000100000xx001x010x000;
	cfgsin17[0:44] =  45 'b00000001xx001x100x00000100000xx010x010x000000;
	cfgsin18[0:44] =  45 'b01000xx001x100x00000100000xx100x010x000001000;
	cfgsin19[0:44] =  45 'b00xx100x001x00000010000xx100x010x00000100000x;
	cfgsin20[0:44] =  45 'bx100x010x00000100000xx100x010x00000100000xx00;
	cfgsin21[0:44] =  45 'b1x010x00000100000xx010x001x00000001000xx010x1;
	cfgsin22[0:44] =  45 'b00x00000100000xx100x001x00000010000xx100x001x;
	cfgsin23[0:44] =  45 'b00000100000xx001x001x00000100000xx001x001x000;
// BR
	cfgsin31[0:44] =  45 'b00010000xx010x001x00000100000xx100x010x000001;
	cfgsin30[0:44] =  45 'b00000xx001x001x00000100000xx100x010x000000100;
	cfgsin29[0:44] =  45 'b00xx100x001x00000100000xx100x001x00000000010x;
	cfgsin28[0:44] =  45 'bx010x100x00000100000xx100x001x00000100000xx10;
	cfgsin27[0:44] =  45 'b0x001x00000100000xx001x001x00000100000xx001x0;
	cfgsin26[0:44] =  45 'b01x00000100000xx010x001x00000100000xx100x001x;
	cfgsin25[0:44] =  45 'b00000100000xx100x001x00000100000xx001x001x000;
	cfgsin24[0:44] =  45 'bxx00100000xx001x001x0000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat395; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000010100000000000000000000001000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000001000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000100000001000000;
	cfgsin7[0:44] =  45 'b000000100000000000000010000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000001000000000100000000000;
	cfgsin14[0:44] =  45 'b000010000000000010011000000000000000010100000;
	cfgsin13[0:44] =  45 'b001000000000000100000000000100100000100000010;
	cfgsin12[0:44] =  45 'b000000000000000000000000000010000000000001000;
	cfgsin11[0:44] =  45 'b000000000001000000000000000000000000000000100;
	cfgsin10[0:44] =  45 'b000000000000000000000000010000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000010000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000010000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000010000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000010000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000100000000000000000000000;
	cfgsin29[0:44] =  45 'b000000001000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000xxxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat394; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x0110001101x;
	cfgsin1[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin2[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin3[0:44] =  45 'b110x0110010101xx110x0101x0110001101xx110x0110;
	cfgsin4[0:44] =  45 'bx0110001000xx000x0110x0101000100xx100x0110x01;
	cfgsin5[0:44] =  45 'b01010001xx010x0110x0100010100xx110x0010x01100;
	cfgsin6[0:44] =  45 'b01101xx110x0110x1010001101xx100x0101x00000101;
	cfgsin7[0:44] =  45 'b00xx000x0110x0100001100xx010x0101x0101010101x;
// TR
	cfgsin15[0:44] =  45 'bx000x0100x0100001100xx000x1010x0100001101xx00;
	cfgsin14[0:44] =  45 'b1x0000x0010001100xx000x0101x0100010100xx010x1;
	cfgsin13[0:44] =  45 'b000x0110000001xx010x1001x0100000101xx010x0100;
	cfgsin12[0:44] =  45 'bx0110001101xx110x0110x0110000101xx110x0100x01;
	cfgsin11[0:44] =  45 'b10001100xx100x1010x0110001101xx100x0010x01000;
	cfgsin10[0:44] =  45 'b01101xx110x0110x0110001100xx110x0110x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000100;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000001000000000000000000000010000000100;
	cfgsin20[0:44] =  45 'b000100000010000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000010000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000010;
	cfgsin30[0:44] =  45 'b000000000000000000010000000000000000000000010;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000001000001000000000000000;
	cfgsin27[0:44] =  45 'b000010000000000000000000000000000000100000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000xxxxxxxxxxxxxxxxxxxxx;
end
endtask
task get_wl_pat393; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x010000110000010x0110x01100011000;
	cfgsin1[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin2[0:44] =  45 'b0x0110x011000110000010x0110x011000110000000x0;
	cfgsin3[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin4[0:44] =  45 'bx011000110100010x0101x010100110000010x0000x01;
	cfgsin5[0:44] =  45 'b0100101000001x0010x011000110000010x0110x01100;
	cfgsin6[0:44] =  45 'b0100000000x0100x010000101000010x0101x01010100;
	cfgsin7[0:44] =  45 'b0000000x0110x010100100000001x1010x01000001000;
// TR
	cfgsin15[0:44] =  45 'b0001x1000x011001010000000x0110x01100001000000;
	cfgsin14[0:44] =  45 'b1x1001x001000010000000x0110x011001000000000x0;
	cfgsin13[0:44] =  45 'b100x000001010000010x1000x000001010000000x0000;
	cfgsin12[0:44] =  45 'bx001000100000000x0110x000000010000001x0110x01;
	cfgsin11[0:44] =  45 'b0100110000010x0101x010100101000010x0101x01010;
	cfgsin10[0:44] =  45 'b0110000010x0100x010000110000010x0010x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100000x;
// BL
	cfgsin16[0:44] =  45 'bxxxxxxxxxx00000000x0000xx110x0110x0110001001x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx110x0110x0110101001xx110x0;
	cfgsin19[0:44] =  45 'b110x0010001001xx110x0110x0110001100xx110x0010;
	cfgsin20[0:44] =  45 'bx0100001100xx110x0101x0010110001xx110x0110x01;
	cfgsin21[0:44] =  45 'b10001011xx110x0100x0010001011xx110x0110x01100;
	cfgsin22[0:44] =  45 'b01101xx110x0110x0010001101xx110x0110x01100010;
	cfgsin23[0:44] =  45 'b11xx110x0110x0110001101xx110x0110x1010001101x;
// BR
	cfgsin31[0:44] =  45 'bx110x0110x0110001101xx110x0110x0101001101xx01;
	cfgsin30[0:44] =  45 'b0x0101x0101001101xx000x0101x0110010101xx110x0;
	cfgsin29[0:44] =  45 'b010x0100001101xx110x0110x0110001101xx110x1010;
	cfgsin28[0:44] =  45 'bx0110001101xx110x1010x0010001001xx110x0110x10;
	cfgsin27[0:44] =  45 'b10000011xx110x0110x0110001101xx110x0010x01100;
	cfgsin26[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xxxxxxxx00000000x0000xx;
end
endtask
task get_wl_pat392; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000100;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000100000000000000001100000000000000000;
	cfgsin7[0:44] =  45 'b000000100000000000000100000000000000000010000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000001000000100;
	cfgsin14[0:44] =  45 'b000000000000010000000000000000000000100010100;
	cfgsin13[0:44] =  45 'b000010000000000000000000000100000000000100001;
	cfgsin12[0:44] =  45 'b001000001000000100000100010010000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000010000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000001000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x10000011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x0110x010000110000010x0110x011000100000010x0;
	cfgsin19[0:44] =  45 'b110x011000110000010x0101x011000010000010x0110;
	cfgsin20[0:44] =  45 'bx011000110000010x0110x101000010000001x0100x00;
	cfgsin21[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin22[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100010;
	cfgsin23[0:44] =  45 'b1000010x0110x011000110000010x0110x01100011000;
// BR
	cfgsin31[0:44] =  45 'b0001x1010x010000110000010x0000x01000001000001;
	cfgsin30[0:44] =  45 'b0x0100x010000110000010x0100x010001010000010x0;
	cfgsin29[0:44] =  45 'b110x011000110000010x0110x011000110000001x0100;
	cfgsin28[0:44] =  45 'bx010000010000001x0100x100000110000001x0101x01;
	cfgsin27[0:44] =  45 'b0100110000001x1010x011001010000001x0010x01100;
	cfgsin26[0:44] =  45 'b0110000010x0101x010100110000010x0110x01100011;
	cfgsin25[0:44] =  45 'b0000110x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat391; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000100000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000001000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000001000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000001001000;
	cfgsin5[0:44] =  45 'b000000010000001000000000000010000000000000000;
	cfgsin6[0:44] =  45 'b001010000000001000100000000000000000000000001;
	cfgsin7[0:44] =  45 'b000010000000000000000000000000000000100000010;
// TR
	cfgsin15[0:44] =  45 'b010000001000000000010000100000000000000010000;
	cfgsin14[0:44] =  45 'b000000010000000000000100000000000000010000000;
	cfgsin13[0:44] =  45 'b010000100000010000000000101000000000000001000;
	cfgsin12[0:44] =  45 'b000000000010000000000000000000010000000000000;
	cfgsin11[0:44] =  45 'b000000000010000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000010000000010000100000010000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000100;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000010000000000000000000010000000;
	cfgsin19[0:44] =  45 'b000000000000001000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000001;
	cfgsin21[0:44] =  45 'b000000000000000000000000000001000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000001000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b010000000000000000000000000101000010010000000;
	cfgsin30[0:44] =  45 'b000001000010000000000000000000010000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000010;
	cfgsin28[0:44] =  45 'b000100000000000000010000100000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000001000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat390; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx0xx1010000100000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1010000100000100xx0xx10010000;
	cfgsin4[0:44] =  45 'b01000100xx0xx1010000100000100xx1xx11000000000;
	cfgsin5[0:44] =  45 'b10010xx0xx1000010001000010xx0xx10100000010001;
	cfgsin6[0:44] =  45 'b00xx0xx1010000100000100xx0xx0010000001000100x;
	cfgsin7[0:44] =  45 'bx1xx0010000001000100xx1xx1001000001000100xx0x;
// TR
	cfgsin15[0:44] =  45 'bx0000001000010100xx0xx1000010000010010xx0xx01;
	cfgsin14[0:44] =  45 'b00000001000100xx1xx1001000000001100xx0xx00100;
	cfgsin13[0:44] =  45 'b00001000100xx0xx1010000001000100xx1xx11000001;
	cfgsin12[0:44] =  45 'b00000010xx0xx1000010001000010xx0xx10100000000;
	cfgsin11[0:44] =  45 'b10010xx1xx0100000000010010xx1xx10100001000000;
	cfgsin10[0:44] =  45 'b01xx0xx1010000100000001xx0xx1010000100000001x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx0xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000010000000000100000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000100000000000000000000000001000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000010000000000000;
	cfgsin20[0:44] =  45 'b000000000000100000000000000010010000000010000;
	cfgsin21[0:44] =  45 'b000000001000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000001010000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000010000000000000000000010;
// BR
	cfgsin31[0:44] =  45 'b000000000000100000000010000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000010000000000100000000010000000;
	cfgsin29[0:44] =  45 'b000000000000000010000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000010010010000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000010000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000010000000000000000000;
	cfgsin25[0:44] =  45 'b010000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat389; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000001000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100000;
	cfgsin4[0:44] =  45 'b01000001xx0xx1010000100000100xx1xx10010001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1100000001000001xx0xx11000000010000;
	cfgsin6[0:44] =  45 'b01xx0xx1100000100000100xx1xx1001000001000001x;
	cfgsin7[0:44] =  45 'bx1xx1100000001000001xx1xx0100000001000001xx0x;
// TR
	cfgsin15[0:44] =  45 'bx0010000100000010xx0xx1100000100000100xx0xx00;
	cfgsin14[0:44] =  45 'b01000000100001xx1xx0100000000001001xx1xx00010;
	cfgsin13[0:44] =  45 'b00001000001xx0xx0000010001000001xx0xx00100000;
	cfgsin12[0:44] =  45 'b01000100xx1xx1010000001000100xx1xx11000000010;
	cfgsin11[0:44] =  45 'b00100xx1xx1001000001000100xx0xx10010000010000;
	cfgsin10[0:44] =  45 'b10xx0xx1100000001000100xx0xx1100000001000100x;
	cfgsin9[0:44] =  45 'bx0xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx0010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx0xx1010000100000100xx0xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx0xx1010000100000100xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx0010000100000100xx0xx10100000000;
	cfgsin21[0:44] =  45 'b10100xx0xx1010000010000010xx0xx10010000010001;
	cfgsin22[0:44] =  45 'b00xx0xx0010000100000100xx0xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx0xx1001000100000100xx0x;
// BR
	cfgsin31[0:44] =  45 'bx0000100001000010xx1xx0010000000010010xx1xx10;
	cfgsin30[0:44] =  45 'b10000000010010xx0xx1100000000010100xx0xx11000;
	cfgsin29[0:44] =  45 'b00000010010xx1xx0010000100000100xx1xx10000101;
	cfgsin28[0:44] =  45 'b00000100xx0xx0010000001000100xx1xx10100000010;
	cfgsin27[0:44] =  45 'b00100xx1xx0010000001000100xx1xx10010000010001;
	cfgsin26[0:44] =  45 'b00xx1xx1100000001000100xx0xx1001000001000100x;
	cfgsin25[0:44] =  45 'bx0xx0010000001000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat388; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000001000100x01000010000100000100xx00;
	cfgsin1[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin2[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin3[0:44] =  45 'b00100000100xx0000010000100000100xx00001000000;
	cfgsin4[0:44] =  45 'b01000001xx0100010000100000100xx00000000101000;
	cfgsin5[0:44] =  45 'b00001xx0000000010001000100xx01000100000010000;
	cfgsin6[0:44] =  45 'b10xx0100010000100000010xx0000100000001000010x;
	cfgsin7[0:44] =  45 'bx0000010000001000010xx0010010000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b01100000001000001xx0000000100100000001xx10100;
	cfgsin14[0:44] =  45 'b10000000001100xx0001000010001000010xx00011000;
	cfgsin13[0:44] =  45 'b00000001001xx0010100000001000001xx10000000100;
	cfgsin12[0:44] =  45 'b01000010xx0000100000001000001xx00000100001000;
	cfgsin11[0:44] =  45 'b00001xx0000010000000001001xx10001000001000001;
	cfgsin10[0:44] =  45 'b00xx1000001000100000010xx0000010000100000010x;
	cfgsin9[0:44] =  45 'bx1000010000100000100xx0000010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx11000001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1100000100000100xx0xx11000000100;
	cfgsin21[0:44] =  45 'b00100xx0xx1000010010000010xx1xx00100000010000;
	cfgsin22[0:44] =  45 'b01xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000100000100xx1xx1001000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx0010000001000001xx1xx0100000001000100xx1xx11;
	cfgsin30[0:44] =  45 'b00000001000100xx1xx1001000001000010xx0xx10000;
	cfgsin29[0:44] =  45 'b10100000100xx0xx1010000100000100xx0xx10100001;
	cfgsin28[0:44] =  45 'b00000010xx1xx1010000001000001xx0xx11000000010;
	cfgsin27[0:44] =  45 'b00001xx0xx0100000001000001xx0xx11000000010000;
	cfgsin26[0:44] =  45 'b01xx0xx1001000001000001xx1xx1010000001000001x;
	cfgsin25[0:44] =  45 'bx1xx1100000001000001xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat387; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000001000;
	cfgsin4[0:44] =  45 'b01000100xx0000001000100000100xx00000010000100;
	cfgsin5[0:44] =  45 'b00100xx0000000001001000100xx00000010000010000;
	cfgsin6[0:44] =  45 'b01xx0000001000001000100xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00000010010000001xx1000000001010000010xx00000;
	cfgsin14[0:44] =  45 'b10000010000010xx0000001000001000001xx00000010;
	cfgsin13[0:44] =  45 'b00001000100xx1000000100001000100xx00011000000;
	cfgsin12[0:44] =  45 'b01000100xx0000001000001000100xx00000010000010;
	cfgsin11[0:44] =  45 'b00001xx0000001000001000001xx00000100000010000;
	cfgsin10[0:44] =  45 'b10xx0000000010001000100xx1000001000001000001x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x01000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin19[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin20[0:44] =  45 'b00000010xx0000010000100000010xx01000100000100;
	cfgsin21[0:44] =  45 'b00001xx0100100000010000100xx00001000000010000;
	cfgsin22[0:44] =  45 'b01xx0000010000100000100xx0000010000100000100x;
	cfgsin23[0:44] =  45 'bx0000010000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b01100000001000100xx0000001000100000001xx00000;
	cfgsin30[0:44] =  45 'b01000100000001xx0000010000000001001xx01000100;
	cfgsin29[0:44] =  45 'b00000001001xx1000010000100000100xx10001000001;
	cfgsin28[0:44] =  45 'b00000010xx0000100000001000001xx10000010000010;
	cfgsin27[0:44] =  45 'b00001xx1000010000001000001xx10000100000010000;
	cfgsin26[0:44] =  45 'b01xx0000100000001000001xx0000100000001000001x;
	cfgsin25[0:44] =  45 'bx0000010000001000010xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001100000100000100x0000;
end
endtask
task get_wl_pat386; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010000;
	cfgsin4[0:44] =  45 'b01000001xx0000001000100000100xx00000010000001;
	cfgsin5[0:44] =  45 'b00010xx0000001000001000001xx00000010000010000;
	cfgsin6[0:44] =  45 'b01xx0000001000100000100xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0000000010001000010xx10;
// TR
	cfgsin15[0:44] =  45 'b00001000000001010xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000000001100xx0000000010001000010xx00000100;
	cfgsin13[0:44] =  45 'b00001000010xx0000001000001000001xx00000100001;
	cfgsin12[0:44] =  45 'b00000010xx0000010000000001001xx00000010000010;
	cfgsin11[0:44] =  45 'b00001xx0000001000001000001xx00001000000010000;
	cfgsin10[0:44] =  45 'b01xx0000010000001000001xx0000000010001000001x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000001000100000001xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010000;
	cfgsin20[0:44] =  45 'b01000100xx0000001000001000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000010xx00000010000010000;
	cfgsin22[0:44] =  45 'b01xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00000010100000001xx0001000010001000001xx00000;
	cfgsin30[0:44] =  45 'b01000001000001xx0000000010001000001xx00000010;
	cfgsin29[0:44] =  45 'b00010000100xx0000001000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000010xx0000001000001000010xx00000010000010;
	cfgsin27[0:44] =  45 'b00001xx0001001000100000001xx00000001000010001;
	cfgsin26[0:44] =  45 'b00xx1000001000000001001xx0000000010001000001x;
	cfgsin25[0:44] =  45 'bx0000001000100000001xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000100000010xx000;
end
endtask
task get_wl_pat385; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010000;
	cfgsin4[0:44] =  45 'b01000001xx0000001000100000100xx00000100000001;
	cfgsin5[0:44] =  45 'b00010xx0000001000000001001xx00000010000010000;
	cfgsin6[0:44] =  45 'b01xx0000001000100000100xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0001000010001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000000100100xx0000010000000001100xx00001;
	cfgsin14[0:44] =  45 'b00000000010001xx0000000010001000100xx00000000;
	cfgsin13[0:44] =  45 'b10001000001xx0000000100100000001xx00000001000;
	cfgsin12[0:44] =  45 'b01000001xx0010001000000001001xx00000100000010;
	cfgsin11[0:44] =  45 'b00001xx0000010000001000001xx00000010000000010;
	cfgsin10[0:44] =  45 'b01xx0000001000001000001xx0000001000001000001x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00001000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000000101;
	cfgsin20[0:44] =  45 'b00000100xx0000000010100000100xx00000010000100;
	cfgsin21[0:44] =  45 'b00100xx0000001000010000010xx00010000100010000;
	cfgsin22[0:44] =  45 'b01xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00000010001000001xx0000100000001000001xx00000;
	cfgsin30[0:44] =  45 'b01000001000001xx0000001000000001001xx00000010;
	cfgsin29[0:44] =  45 'b00000001100xx0000001000100000100xx00000010000;
	cfgsin28[0:44] =  45 'b00001010xx0000001000001000001xx00000010000010;
	cfgsin27[0:44] =  45 'b00001xx0000000100001000001xx00000010000010000;
	cfgsin26[0:44] =  45 'b01xx0000000010000001001xx0000001000001000001x;
	cfgsin25[0:44] =  45 'bx0000001000001000001xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000100000100x000x;
end
endtask
task get_wl_pat384; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010000;
	cfgsin4[0:44] =  45 'b01000100xx0000001000100000100xx00000001000010;
	cfgsin5[0:44] =  45 'b00010xx0000000010001000100xx00010010000010001;
	cfgsin6[0:44] =  45 'b00xx0001001000100000100xx0000001000001000100x;
	cfgsin7[0:44] =  45 'bx0000001000001000100xx0000100000000100100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000001000010xx0000000100000100001xx00000;
	cfgsin14[0:44] =  45 'b00010100000100xx0000001000100000010xx00100001;
	cfgsin13[0:44] =  45 'b00001000010xx0000001000001000100xx00000000100;
	cfgsin12[0:44] =  45 'b01000010xx0000001000001000010xx00000001000010;
	cfgsin11[0:44] =  45 'b00001xx0000001000001000100xx00000010000010000;
	cfgsin10[0:44] =  45 'b01xx0000001000000001001xx0000001000001000001x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000001000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000001000100;
	cfgsin21[0:44] =  45 'b00100xx0000001000010000010xx00000010000010001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00000010001000010xx0000010000001000001xx00000;
	cfgsin30[0:44] =  45 'b10000001000001xx0000010000010000001xx00000100;
	cfgsin29[0:44] =  45 'b00000100100xx0000001000100000100xx00000010000;
	cfgsin28[0:44] =  45 'b00100010xx0000001000000100001xx00000010000010;
	cfgsin27[0:44] =  45 'b00001xx0000000100001000100xx00000010000010000;
	cfgsin26[0:44] =  45 'b01xx0000001000001000001xx0000001000001000001x;
	cfgsin25[0:44] =  45 'bx0000001000001000001xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000100000100x0000;
end
endtask
task get_wl_pat383; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx1000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010000;
	cfgsin4[0:44] =  45 'b01000001xx1000001000100000100xx00010010000000;
	cfgsin5[0:44] =  45 'b01100xx0000001000001000001xx00000010000010000;
	cfgsin6[0:44] =  45 'b01xx0000001000100000100xx0001000010001000001x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0000001000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b10000100001000100xx0010000010100000100xx10100;
	cfgsin14[0:44] =  45 'b01000000001010xx1001000010010000100xx00000001;
	cfgsin13[0:44] =  45 'b00001000100xx1000001000001000001xx10000001000;
	cfgsin12[0:44] =  45 'b00001100xx1000001000001000100xx10000001000010;
	cfgsin11[0:44] =  45 'b00100xx0001001000000001010xx00010000100010000;
	cfgsin10[0:44] =  45 'b10xx1001100000001000100xx1000001000001000100x;
	cfgsin9[0:44] =  45 'bx1000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00010000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000001000100;
	cfgsin21[0:44] =  45 'b00100xx0000001000010000100xx00000010000010001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00000100001000100xx0000001000001000001xx00000;
	cfgsin30[0:44] =  45 'b01000001000001xx0001001000001000100xx00000001;
	cfgsin29[0:44] =  45 'b00100000010xx0000001000100000100xx00000001001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000001000100xx00000001000010;
	cfgsin27[0:44] =  45 'b00100xx0000000010001000100xx00000001000010001;
	cfgsin26[0:44] =  45 'b00xx0000001000001000100xx0000001000001000100x;
	cfgsin25[0:44] =  45 'bx0000001000001000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000100000100xx00x;
end
endtask
task get_wl_pat382; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx1001000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin4[0:44] =  45 'b00000001xx0xx1001000100000100xx1xx00000101000;
	cfgsin5[0:44] =  45 'b00010xx1xx1000100001000001xx1xx00010000010000;
	cfgsin6[0:44] =  45 'b01xx1xx0001000001000100xx1xx0001000000001001x;
	cfgsin7[0:44] =  45 'bx1xx1001000001000001xx1xx0010000010000001xx1x;
// TR
	cfgsin15[0:44] =  45 'bx0000010000001010xx1xx0000001100000010xx0xx00;
	cfgsin14[0:44] =  45 'b00100100000100xx0xx0001000001000001xx1xx00010;
	cfgsin13[0:44] =  45 'b00100000001xx0xx1001000010000001xx0xx10010000;
	cfgsin12[0:44] =  45 'b01000001xx0xx0001000010000001xx0xx10010001000;
	cfgsin11[0:44] =  45 'b00010xx1xx0000010100000001xx1xx01000001000001;
	cfgsin10[0:44] =  45 'b00xx0xx0010000000010010xx0xx1100000000010010x;
	cfgsin9[0:44] =  45 'bx0xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000001xx1000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0001001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000001000100;
	cfgsin21[0:44] =  45 'b00100xx0000001000010000010xx00000010000010000;
	cfgsin22[0:44] =  45 'b01xx0000001000100000100xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b01001000010000010xx1001001000001000100xx10010;
	cfgsin30[0:44] =  45 'b01000001000100xx1000000100000001010xx10000010;
	cfgsin29[0:44] =  45 'b00000001100xx1001001000100000100xx00010000101;
	cfgsin28[0:44] =  45 'b00000010xx0001000100001000001xx10010010000010;
	cfgsin27[0:44] =  45 'b00001xx1000000100001000001xx00000010000010000;
	cfgsin26[0:44] =  45 'b01xx0001001000001000001xx0000001000001000001x;
	cfgsin25[0:44] =  45 'bx0000001000001000001xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000100000010xx000;
end
endtask
task get_wl_pat381; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000001x00xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00100000100x01xx1100000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000001x01xx1010000100000100x00xx11000000010;
	cfgsin5[0:44] =  45 'b00001x00xx1010000001000100x01xx10100001000000;
	cfgsin6[0:44] =  45 'b10x00xx1010000010000100x00xx1100000100000010x;
	cfgsin7[0:44] =  45 'b01xx1100000100000100x01xx1100000000100010x01x;
// TR
	cfgsin15[0:44] =  45 'bx1010000000010100x00xx1010000001000010x00xx10;
	cfgsin14[0:44] =  45 'b10000001000010x00xx1010000000001010x00xx10100;
	cfgsin13[0:44] =  45 'b00000010001x01xx1000100010000001x00xx10010000;
	cfgsin12[0:44] =  45 'b00010001x01xx1001000010000001x00xx10100001000;
	cfgsin11[0:44] =  45 'b00010x01xx0010000100000010x00xx00010000000100;
	cfgsin10[0:44] =  45 'b10x00xx1010000001000010x01xx1010000100000010x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x00xx0100000100000001x00x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100x00xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin19[0:44] =  45 'b00100000100xx1xx0001000100000100xx1xx10010000;
	cfgsin20[0:44] =  45 'b01000100xx1xx1001000010000100xx1xx10010001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1001000001000010xx1xx11000001000000;
	cfgsin22[0:44] =  45 'b01xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx0100000100000010xx0xx0001000100000010xx0xx00;
	cfgsin30[0:44] =  45 'b00100010000010xx0xx0000010000001001xx0xx10000;
	cfgsin29[0:44] =  45 'b01010000001xx0xx0001000100000100xx1xx00010000;
	cfgsin28[0:44] =  45 'b01000010xx1xx0001000100000001xx0xx00001001000;
	cfgsin27[0:44] =  45 'b00001xx0xx1001000100000001xx1xx10100001000000;
	cfgsin26[0:44] =  45 'b01xx1xx0001000100000001xx1xx1001000100000001x;
	cfgsin25[0:44] =  45 'bx1xx1001000010000001xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000010x01xx;
end
endtask
task get_wl_pat380; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx1000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000001x00000010000100000100x000000100000010;
	cfgsin5[0:44] =  45 'b00010x01000010000001000010x000000000101000001;
	cfgsin6[0:44] =  45 'b00x00000001000010000010x01000100000100000100x;
	cfgsin7[0:44] =  45 'b00000000100100000010x00000010000010000001x100;
// TR
	cfgsin15[0:44] =  45 'b00010000001000001x10000001000000001001x010000;
	cfgsin14[0:44] =  45 'b00100010000001x00000001000100000100x000000000;
	cfgsin13[0:44] =  45 'b01100000001x00000010000010000001x001000100001;
	cfgsin12[0:44] =  45 'b00000001x00000010000010000001x001000100000000;
	cfgsin11[0:44] =  45 'b01100x00001010000000001100x000000000100001001;
	cfgsin10[0:44] =  45 'b00x01000010000000001100x00000010000000001100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x01001100000100000100xx10x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000001x01xx0100000100000100x01x;
	cfgsin17[0:44] =  45 'bx0100000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000100x01xx1010000100000100x01xx10100;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000010x01xx0010000100000010x00xx00100001000;
	cfgsin21[0:44] =  45 'b00100x00xx1100000001000010x00xx10100001000000;
	cfgsin22[0:44] =  45 'b10x00xx1010000100000100x00xx1010000100000100x;
	cfgsin23[0:44] =  45 'b00xx1010000100000100x01xx1010000100000100x00x;
// BR
	cfgsin31[0:44] =  45 'bx1100000000100001x00xx1000100100000100x00xx10;
	cfgsin30[0:44] =  45 'b10000010000010x01xx1010000010000010x01xx10100;
	cfgsin29[0:44] =  45 'b00010000010x01xx1010000100000100x01xx10100000;
	cfgsin28[0:44] =  45 'b01000010x01xx0010000000100001x01xx01000001000;
	cfgsin27[0:44] =  45 'b00001x01xx1100000100000010x11xx10100001000000;
	cfgsin26[0:44] =  45 'b01x00xx1001000100000001x00xx1001000100000001x;
	cfgsin25[0:44] =  45 'b00xx1100000100000010x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000010x01x0;
end
endtask
task get_wl_pat379; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000001xx0000100000100000100x100;
	cfgsin1[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin2[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin3[0:44] =  45 'b00100000100x10000100000100000100x100000100001;
	cfgsin4[0:44] =  45 'b00000001x10000010000100000100x110000001000100;
	cfgsin5[0:44] =  45 'b00100x10000010000100000001x100000100000100000;
	cfgsin6[0:44] =  45 'b01x10000100000100000001x10000010000000100001x;
	cfgsin7[0:44] =  45 'b10000010000010000001x10000010000000001100x100;
// TR
	cfgsin15[0:44] =  45 'b00100000001000010x11000100000000100100x100000;
	cfgsin14[0:44] =  45 'b00010100000100x10000010000000100001x110000100;
	cfgsin13[0:44] =  45 'b00100000001x10000010000010000001x100000100001;
	cfgsin12[0:44] =  45 'b00000001x10000010000010000001x100000100000100;
	cfgsin11[0:44] =  45 'b00001x10000010000010000001x100000100000100000;
	cfgsin10[0:44] =  45 'b01x10000010000010000001x10000010000010000001x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0001100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000000101;
	cfgsin20[0:44] =  45 'b00000100x00010010000100000100x000001000001000;
	cfgsin21[0:44] =  45 'b00001x01000010000001000001x000000100001000001;
	cfgsin22[0:44] =  45 'b00x01000010000100000100x00000010000100000100x;
	cfgsin23[0:44] =  45 'b01000010000100000100x00000010000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00010000001000100x01000000001000001010x001000;
	cfgsin30[0:44] =  45 'b10000000001100x00000010000000100100x000000000;
	cfgsin29[0:44] =  45 'b10010000001x00000010000100000100x000000100000;
	cfgsin28[0:44] =  45 'b01000010x00001000010100000001x000001000001000;
	cfgsin27[0:44] =  45 'b00001x00000010000100000001x000000000101000000;
	cfgsin26[0:44] =  45 'b01x00000100000100000100x00000010000100000001x;
	cfgsin25[0:44] =  45 'b01000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001010000100000100xx00x;
end
endtask
task get_wl_pat378; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin4[0:44] =  45 'b00000001x00000010000100000100x000000000100010;
	cfgsin5[0:44] =  45 'b00001x00000010000001000100x000001000001000000;
	cfgsin6[0:44] =  45 'b01x01000100000010000100x00000010000100000001x;
	cfgsin7[0:44] =  45 'b00000010000100000001x00000010000000001010x000;
// TR
	cfgsin15[0:44] =  45 'b00100000001000001x10000100000001000010x000001;
	cfgsin14[0:44] =  45 'b00000000100100x01000010000100000001x000001000;
	cfgsin13[0:44] =  45 'b00100000001x00000100000010000001x000001000000;
	cfgsin12[0:44] =  45 'b01000010x00000100000001000010x000000100001000;
	cfgsin11[0:44] =  45 'b00001x00000010000100000001x010010100001000001;
	cfgsin10[0:44] =  45 'b00x10000010000001000100x10000010000100000001x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b01100000100000100x10000100000100000100x100000;
	cfgsin18[0:44] =  45 'b10000100000100x10000010000100000100x100000100;
	cfgsin19[0:44] =  45 'b00100000100x10000100000100000100x100001000000;
	cfgsin20[0:44] =  45 'b00010001x10000100000000010001x100010100000010;
	cfgsin21[0:44] =  45 'b00010x10000010000000001100x100000100000000010;
	cfgsin22[0:44] =  45 'b01x10000010000100000100x11000010000100000100x;
	cfgsin23[0:44] =  45 'b10000010000100000100x10000010000100000100x101;
// BR
	cfgsin31[0:44] =  45 'b00010000001000010x10000010000010000001x100000;
	cfgsin30[0:44] =  45 'b10000100000001x10000010000100000001x100000100;
	cfgsin29[0:44] =  45 'b00100000100x10000010000100000100x100000100000;
	cfgsin28[0:44] =  45 'b01000010x10000010000100000001x100010100001000;
	cfgsin27[0:44] =  45 'b00001x10000010000000001100x100000100001000000;
	cfgsin26[0:44] =  45 'b01x10000010000001000010x10000010000100000001x;
	cfgsin25[0:44] =  45 'b10000010000000001001x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000010xx000;
end
endtask
task get_wl_pat377; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000000100000;
	cfgsin4[0:44] =  45 'b00001001x00000010000100000100x000101000000000;
	cfgsin5[0:44] =  45 'b01010x00000000100000100001x000000010001000000;
	cfgsin6[0:44] =  45 'b01x00000100000010000100x00000010000100000001x;
	cfgsin7[0:44] =  45 'b00001100000100000001x00000010000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00001000010000010x00001001000000001100x000000;
	cfgsin14[0:44] =  45 'b00010000001010x00000010000100000001x000001000;
	cfgsin13[0:44] =  45 'b00100000001x00000100000100000001x000001000000;
	cfgsin12[0:44] =  45 'b00100100x00000100000000010010x000000000101000;
	cfgsin11[0:44] =  45 'b00001x00000001000100000001x000000010000010000;
	cfgsin10[0:44] =  45 'b01x00010001000100000001x00001001000100000001x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000100000100000100x000000100;
	cfgsin19[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x010000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000001000010x010000100001000000;
	cfgsin22[0:44] =  45 'b01x00000010000100000100x00000010000100000100x;
	cfgsin23[0:44] =  45 'b00000010000100000100x00000010000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00001000000100010x00000010000000001100x100000;
	cfgsin30[0:44] =  45 'b10000010000001x00000001000001000100x100001000;
	cfgsin29[0:44] =  45 'b00001000010x10000010000100000100x000000100000;
	cfgsin28[0:44] =  45 'b01000001x10000100000100000100x100000100001000;
	cfgsin27[0:44] =  45 'b00100x10000010000000001001x000000100000001000;
	cfgsin26[0:44] =  45 'b01x00100010000000010001x01000010000100000100x;
	cfgsin25[0:44] =  45 'b10000100000100000001x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat376; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000100x000000100001;
	cfgsin4[0:44] =  45 'b00000001x00000010000100000100x000000100000010;
	cfgsin5[0:44] =  45 'b00010x01001001000010000001x010001000001000000;
	cfgsin6[0:44] =  45 'b01x00000100000010000100x00000100000100000001x;
	cfgsin7[0:44] =  45 'b00000010000100000001x00000010000001000100x100;
// TR
	cfgsin15[0:44] =  45 'b00000010001000010x00000001000010000100x000000;
	cfgsin14[0:44] =  45 'b10000000010001x00000100000100000001x000001000;
	cfgsin13[0:44] =  45 'b00001000001x01000100000000010100x000000000010;
	cfgsin12[0:44] =  45 'b00001100x00000100000100000001x000001000001000;
	cfgsin11[0:44] =  45 'b00001x00100100000100000001x000001000000000010;
	cfgsin10[0:44] =  45 'b01x00000100000000100001x00000100000100000001x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000100000100000100x000000100;
	cfgsin19[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000001000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000001000010x000000100000000100;
	cfgsin22[0:44] =  45 'b01x00000010000100000100x00000010000100000100x;
	cfgsin23[0:44] =  45 'b00000010000100000100x00000010000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00010000000001010x10010100000001000001x000010;
	cfgsin30[0:44] =  45 'b10000010000001x00001010000001000010x000010100;
	cfgsin29[0:44] =  45 'b00000001100x00000010000100000100x000000100000;
	cfgsin28[0:44] =  45 'b01000010x00000100000001000001x000100100000001;
	cfgsin27[0:44] =  45 'b00001x00010010000000100010x000000010000100000;
	cfgsin26[0:44] =  45 'b10x10000010000000001010x00010010000000001001x;
	cfgsin25[0:44] =  45 'b00000000001100000001x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000010x0000;
end
endtask
task get_wl_pat375; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000001001000001000100000100x000;
	cfgsin1[0:44] =  45 'b00001000100000100x00000001000100000100x000000;
	cfgsin2[0:44] =  45 'b01000100000100x00000001000100000100x000000010;
	cfgsin3[0:44] =  45 'b00100000100x00000001000100000100x000000010001;
	cfgsin4[0:44] =  45 'b00000010x00101001000100000100x010000000100010;
	cfgsin5[0:44] =  45 'b00001x00000010000000001100x000001000000000010;
	cfgsin6[0:44] =  45 'b01x00100000001000001100x00001010000100000001x;
	cfgsin7[0:44] =  45 'b00000000010000001001x00000010000000001001x001;
// TR
	cfgsin15[0:44] =  45 'b01010000001000100x00000001000000001010x010010;
	cfgsin14[0:44] =  45 'b00100100000001x00000010000000001100x000100010;
	cfgsin13[0:44] =  45 'b00100000001x00000000001000001010x010000010000;
	cfgsin12[0:44] =  45 'b01000001x00000001000000001001x100000000100000;
	cfgsin11[0:44] =  45 'b01001x00001010000001000001x000100100001000000;
	cfgsin10[0:44] =  45 'b10x10000001000000001001x00000001000000001001x;
	cfgsin9[0:44] =  45 'b01000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000100000100000100x000000100;
	cfgsin19[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000000010001000010x000001000001000000;
	cfgsin22[0:44] =  45 'b01x00000010000100000100x00000010000100000100x;
	cfgsin23[0:44] =  45 'b00000010000100000100x00000010000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000010x10000001000100000010x010001;
	cfgsin30[0:44] =  45 'b00000010000001x00000100000010000001x000000000;
	cfgsin29[0:44] =  45 'b01010000001x00000010000100000100x000000100000;
	cfgsin28[0:44] =  45 'b01000010x00000100000100000001x000000100001000;
	cfgsin27[0:44] =  45 'b00001x00000010000100000001x000000100000010000;
	cfgsin26[0:44] =  45 'b01x01000010000100000001x00000010000100000001x;
	cfgsin25[0:44] =  45 'b00000100000100000001x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000010x0000;
end
endtask
task get_wl_pat374; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1001000100000100x01x;
	cfgsin1[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin2[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin3[0:44] =  45 'b00100000100x01xx1001000100000100x01xx10001000;
	cfgsin4[0:44] =  45 'b10000001x00xx0001000100000100x00xx00010001000;
	cfgsin5[0:44] =  45 'b00100x00xx0100000000010001x00xx10100000100000;
	cfgsin6[0:44] =  45 'b01x00xx1100000001000100x01xx0010000100000001x;
	cfgsin7[0:44] =  45 'b01xx0010000010000001x01xx1000010100000010x00x;
// TR
	cfgsin15[0:44] =  45 'bx0010000100000001x01xx0010000100000001x10xx00;
	cfgsin14[0:44] =  45 'b01000000010100x01xx1010000100000001x01xx00100;
	cfgsin13[0:44] =  45 'b00010000001x00xx1001000010000100x00xx10001000;
	cfgsin12[0:44] =  45 'b00010010x01xx1001000000001100x01xx10100001000;
	cfgsin11[0:44] =  45 'b00001x00xx0010000000100001x01xx00010000000100;
	cfgsin10[0:44] =  45 'b01x01xx0000010100000100x01xx0010000100000001x;
	cfgsin9[0:44] =  45 'b00xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000001001000100000100000100x000;
	cfgsin17[0:44] =  45 'b00010000100000100x00000100000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin19[0:44] =  45 'b00100000100x00001010000100000100x000011000000;
	cfgsin20[0:44] =  45 'b00001100x01000100000000001100x010000010000000;
	cfgsin21[0:44] =  45 'b01100x00100001000001000010x000000100001000000;
	cfgsin22[0:44] =  45 'b01x00000001000100000100x00000010000100000100x;
	cfgsin23[0:44] =  45 'b00000010000100000100x00000010000100000100x001;
// BR
	cfgsin31[0:44] =  45 'b01100000001000001x00000001000000001001x000000;
	cfgsin30[0:44] =  45 'b10000000001001x00000010000001000010x001000100;
	cfgsin29[0:44] =  45 'b00010000100x00000010000100000100x000010100000;
	cfgsin28[0:44] =  45 'b01000010x00000001000100000100x110000010000000;
	cfgsin27[0:44] =  45 'b01001x00000010000000001001x000000100000000010;
	cfgsin26[0:44] =  45 'b01x00001100000100000001x00000010000100000001x;
	cfgsin25[0:44] =  45 'b00000100000000001001x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000010100001000000100000x;
end
endtask
task get_wl_pat373; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000001xx0xx1001000100000100x01x;
	cfgsin1[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin2[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin3[0:44] =  45 'b00100000100x01xx1001000100000100x01xx10001000;
	cfgsin4[0:44] =  45 'b00010001x01xx1001000100000100x01xx10010000000;
	cfgsin5[0:44] =  45 'b01010x01xx1010000000001010x01xx10100000100000;
	cfgsin6[0:44] =  45 'b01x01xx1001000001000100x01xx1010000100000001x;
	cfgsin7[0:44] =  45 'b01xx1010000010000001x01xx0100000000001100x01x;
// TR
	cfgsin15[0:44] =  45 'bx0000001001000010x01xx0010000001000100x00xx00;
	cfgsin14[0:44] =  45 'b00010001000010x00xx0000010001000001x01xx10100;
	cfgsin13[0:44] =  45 'b00000100001x01xx1010000100000010x01xx00001000;
	cfgsin12[0:44] =  45 'b00001100x00xx0010000001000010x00xx10100000010;
	cfgsin11[0:44] =  45 'b00001x01xx1010000100000001x01xx10100001000001;
	cfgsin10[0:44] =  45 'b00x01xx1010000000001010x11xx1010000001000001x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x0xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000100x01xx1010000100000100x01xx10100;
	cfgsin19[0:44] =  45 'b00100000100x01xx0010000100000100x01xx00100000;
	cfgsin20[0:44] =  45 'b01000100x00xx1010000001000100x00xx10010000010;
	cfgsin21[0:44] =  45 'b00100x00xx1001000010000010x01xx10100001000001;
	cfgsin22[0:44] =  45 'b00x01xx1001000100000100x01xx1010000100000100x;
	cfgsin23[0:44] =  45 'b01xx1010000100000100x01xx1010000100000100x00x;
// BR
	cfgsin31[0:44] =  45 'bx0100000000001100x01xx0010000000001010x00xx00;
	cfgsin30[0:44] =  45 'b01000000001001x01xx0001000100000001x00xx00010;
	cfgsin29[0:44] =  45 'b00010000001x01xx1010000100000100x01xx00100001;
	cfgsin28[0:44] =  45 'b00000001x01xx1010000010000010x00xx00001000100;
	cfgsin27[0:44] =  45 'b00010x01xx0010000100000010x01xx10100001000001;
	cfgsin26[0:44] =  45 'b00x00xx0010000010000010x01xx0010000100000100x;
	cfgsin25[0:44] =  45 'b01xx1001000010000001x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx00000101000001000x1x0;
end
endtask
task get_wl_pat372; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00000100000;
	cfgsin4[0:44] =  45 'b10000001xx0000100000100000100xx00000100000001;
	cfgsin5[0:44] =  45 'b00010xx0000000100100000001xx00000100000100000;
	cfgsin6[0:44] =  45 'b01xx0000001000001000100xx0000100000100000001x;
	cfgsin7[0:44] =  45 'bx0000010000010000001xx0010000100100000010xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000000100010xx0010001000000010010xx01100;
	cfgsin14[0:44] =  45 'b01000001000100xx1000100000000010001xx00000100;
	cfgsin13[0:44] =  45 'b00000010100xx0000000001010000001xx00001000000;
	cfgsin12[0:44] =  45 'b10000001xx1000010000100000100xx10000010000001;
	cfgsin11[0:44] =  45 'b00001xx0000100000100000001xx00000010000000010;
	cfgsin10[0:44] =  45 'b01xx0000000010000010100xx0000001000000100001x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1000010100000001xx0xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000100x01xx1010000100000100x01xx10100;
	cfgsin19[0:44] =  45 'b00100000100x01xx1010000100000100x01xx10100000;
	cfgsin20[0:44] =  45 'b01000100x01xx1010000001000100x01xx11000000010;
	cfgsin21[0:44] =  45 'b00100x01xx1100000100000010x01xx10100000000010;
	cfgsin22[0:44] =  45 'b10x01xx1001000100000100x01xx1010000100000100x;
	cfgsin23[0:44] =  45 'b01xx1010000100000100x01xx1010000100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx0001000100000010x01xx1010000000100100x01xx00;
	cfgsin30[0:44] =  45 'b10000100000001x01xx1010000100000100x01xx10100;
	cfgsin29[0:44] =  45 'b00001000010x01xx1010000100000100x01xx10100001;
	cfgsin28[0:44] =  45 'b00000100x01xx1010000010000001x01xx10001000100;
	cfgsin27[0:44] =  45 'b00100x01xx0100000000010100x01xx00100000000100;
	cfgsin26[0:44] =  45 'b10x11xx1010000010000100x01xx1010000100000010x;
	cfgsin25[0:44] =  45 'b01xx1010000010000001x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000010xx1xx;
end
endtask
task get_wl_pat371; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00000100000;
	cfgsin4[0:44] =  45 'b10000001xx0000100000100000100xx00000000010010;
	cfgsin5[0:44] =  45 'b00010xx0000000100010000001xx00000100001000000;
	cfgsin6[0:44] =  45 'b01xx0000001000100000100xx0000100000010000001x;
	cfgsin7[0:44] =  45 'bx0000010000100000001xx0000000010001000010xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000010000010xx0000010000001000100xx00001;
	cfgsin14[0:44] =  45 'b00000001000010xx0000000001010000001xx00000100;
	cfgsin13[0:44] =  45 'b00010000001xx0000100000010000100xx00010010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000010000001xx00000010000100;
	cfgsin11[0:44] =  45 'b00001xx0000100000010000001xx00000001000100000;
	cfgsin10[0:44] =  45 'b01xx0000000100010000010xx0000001000010000001x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00000010000;
	cfgsin20[0:44] =  45 'b01000100xx0000001000001000100xx00000010000010;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000010xx00001000001000000;
	cfgsin22[0:44] =  45 'b01xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b01100000100000001xx0000001000010000001xx00001;
	cfgsin30[0:44] =  45 'b00000000100001xx0000000100100000001xx00000010;
	cfgsin29[0:44] =  45 'b00000100100xx0000100000100000100xx00001000001;
	cfgsin28[0:44] =  45 'b00000010xx0000100000010000001xx00001000000100;
	cfgsin27[0:44] =  45 'b00001xx0001100000100000001xx00001000001000000;
	cfgsin26[0:44] =  45 'b01xx0000010000010000001xx0000001000100000001x;
	cfgsin25[0:44] =  45 'bx0000010000010000001xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000100xx000;
end
endtask
task get_wl_pat370; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin1[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin2[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin3[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin4[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000010000xx00;
	cfgsin5[0:44] =  45 'b1x001xx0000100000xx010x010xx0000010000xx010x0;
	cfgsin6[0:44] =  45 'b01xx0000001000xx010x100xx0000100000xx100x001x;
	cfgsin7[0:44] =  45 'bx0000010000xx010x001xx0000100000xx001x001xx00;
// TR
	cfgsin15[0:44] =  45 'b01000010xx100x100xx0000001000xx010x001xx00000;
	cfgsin14[0:44] =  45 'b01000xx001x001xx0001000010xx010x100xx00001000;
	cfgsin13[0:44] =  45 'b00xx100x010xx0000001000xx100x010xx0000000100x;
	cfgsin12[0:44] =  45 'bx001x010xx0010000001xx100x010xx0000001000xx01;
	cfgsin11[0:44] =  45 'b0x001xx0000100000xx001x001xx0000100000xx100x0;
	cfgsin10[0:44] =  45 'b10xx0000001000xx010x001xx0000001000xx010x001x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010000001;
	cfgsin21[0:44] =  45 'b00100xx0000100000001000010xx00000001000100000;
	cfgsin22[0:44] =  45 'b01xx0000100000100000100xx0000100000100000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00000100010000001xx0000000010100000001xx00011;
	cfgsin30[0:44] =  45 'b00000010000001xx0000000010010000001xx00000010;
	cfgsin29[0:44] =  45 'b00001000100xx0000100000100000100xx00000001001;
	cfgsin28[0:44] =  45 'b00000010xx0000100000010000001xx00000000010100;
	cfgsin27[0:44] =  45 'b00001xx0000000100001000001xx00000001001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000001xx0000000010100000001x;
	cfgsin25[0:44] =  45 'bx0000010000100000001xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000010x0000;
end
endtask
task get_wl_pat369; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx001x001x00000100000xx100x1000x00;
	cfgsin1[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin2[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin3[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000000001x;
	cfgsin4[0:44] =  45 'bx001x1001x0000100000xx100x1000x0000010000xx01;
	cfgsin5[0:44] =  45 'b0x0011x0000100000xx001x0101x0000010000xx001x0;
	cfgsin6[0:44] =  45 'b101x0000001000xx100x0101x0000000001xx001x1001;
	cfgsin7[0:44] =  45 'bx0000010000xx001x0101x0000100000xx001x0101x00;
// TR
	cfgsin15[0:44] =  45 'b00000001xx010x1001x0000001000xx100x0101x00010;
	cfgsin14[0:44] =  45 'b01000xx100x0011x0000001000xx100x0101x01000000;
	cfgsin13[0:44] =  45 'b01xx001x1001x0000000001xx001x0101x0000100000x;
	cfgsin12[0:44] =  45 'bx010x0011x0010000001xx001x0101x0000001000xx00;
	cfgsin11[0:44] =  45 'b1x0101x0001100000xx010x0011x0000000001xx001x1;
	cfgsin10[0:44] =  45 'b001x0000001000xx001x0101x0000001000xx001x0101;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000100000xx100x001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin19[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000001000x;
	cfgsin20[0:44] =  45 'bx010x100xx0000001000xx010x100xx0000001000xx01;
	cfgsin21[0:44] =  45 'b0x100xx0000100000xx100x010xx0000100000xx001x0;
	cfgsin22[0:44] =  45 'b01xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin23[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx001x001xx0000000100xx010x001xx00001;
	cfgsin30[0:44] =  45 'b00000xx010x001xx0000100000xx001x001xx00000010;
	cfgsin29[0:44] =  45 'b00xx001x100xx0000100000xx100x100xx0000100000x;
	cfgsin28[0:44] =  45 'bx100x010xx0000000100xx100x100xx0000010000xx01;
	cfgsin27[0:44] =  45 'b0x001xx0000100000xx001x001xx0001000001xx010x0;
	cfgsin26[0:44] =  45 'b10xx0000010000xx001x001xx0000100000xx100x001x;
	cfgsin25[0:44] =  45 'bx0000010000xx010x001xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000000001xx100x010xx00x;
end
endtask
task get_wl_pat368; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000001000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000010000000000000000;
	cfgsin5[0:44] =  45 'b000000000010001000000000000000010000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000001000000000000;
	cfgsin7[0:44] =  45 'b000001000100000000000000000001000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000001000000001000000000101000;
	cfgsin14[0:44] =  45 'b000000000000000000010010000000000000000000010;
	cfgsin13[0:44] =  45 'b001000000000000100000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000001000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000001000001000000000;
	cfgsin10[0:44] =  45 'b000000000001000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x001x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin18[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin19[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000001000x;
	cfgsin20[0:44] =  45 'bx100x0101x0000001000xx100x0101x0000001000xx10;
	cfgsin21[0:44] =  45 'b0x0101x0000000001xx010x1001x0000000001xx001x1;
	cfgsin22[0:44] =  45 'b001x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin23[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// BR
	cfgsin31[0:44] =  45 'b00000001xx010x1001x0001000100xx001x0101x00001;
	cfgsin30[0:44] =  45 'b00000xx001x0101x0000100000xx010x0011x00000010;
	cfgsin29[0:44] =  45 'b00xx100x0011x0000100000xx100x1000x0000000001x;
	cfgsin28[0:44] =  45 'bx010x1001x0000000001xx001x1001x0000010000xx00;
	cfgsin27[0:44] =  45 'b1x0101x0001100000xx001x0101x0000100000xx001x0;
	cfgsin26[0:44] =  45 'b101x0001000001xx001x1001x0000000001xx001x1001;
	cfgsin25[0:44] =  45 'bx0000010000xx001x0101x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx100x010x0000;
end
endtask
task get_wl_pat367; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000100001000000000;
	cfgsin4[0:44] =  45 'b000000000010000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000001000001000010000001000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000100000000010000;
	cfgsin7[0:44] =  45 'b000000000000000000000000100000000000010000000;
// TR
	cfgsin15[0:44] =  45 'b000110010000000100000100010000000010010000001;
	cfgsin14[0:44] =  45 'b000010000000010010000000000000010000000010000;
	cfgsin13[0:44] =  45 'b000000000000001000000000000000000000010000101;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000010010000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000010000000;
	cfgsin10[0:44] =  45 'b000000001000000000000000000001000000000000000;
	cfgsin9[0:44] =  45 'b010000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b010000000000000000000001000000000000000000010;
	cfgsin21[0:44] =  45 'b000000000000000000001000000000000000000001000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000001000000000100000000001000000000000000000;
	cfgsin30[0:44] =  45 'b001000000000000000000001000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000100000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000100000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000001000010000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat366; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x0110001101x;
	cfgsin1[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin2[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin3[0:44] =  45 'b110x0110001001xx101x0110x0110000100xx110x0110;
	cfgsin4[0:44] =  45 'bx0110001100xx110x0101x0110000101xx110x0101x01;
	cfgsin5[0:44] =  45 'b10010001xx000x0000x0101000101xx010x0110x01100;
	cfgsin6[0:44] =  45 'b01101xx110x0110x0110001101xx100x0001x01000101;
	cfgsin7[0:44] =  45 'b01xx100x0010x0110001101xx010x0010x0100001101x;
// TR
	cfgsin15[0:44] =  45 'bx100x0000x0101000100xx010x0000x0100000000xx00;
	cfgsin14[0:44] =  45 'b0x1000x0110000100xx000x1001x0100010100xx000x1;
	cfgsin13[0:44] =  45 'b000x0101001100xx010x1010x0110001101xx001x0000;
	cfgsin12[0:44] =  45 'bx0101001101xx010x0110x0110001100xx001x0010x01;
	cfgsin11[0:44] =  45 'b01001101xx010x0101x1010010010xx110x0000x01100;
	cfgsin10[0:44] =  45 'b10101xx100x0001x0110010101xx100x0110x01100011;
	cfgsin9[0:44] =  45 'b00xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000100010000010000;
	cfgsin21[0:44] =  45 'b000000000100000000000000001000000000000000000;
	cfgsin22[0:44] =  45 'b001000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000001;
// BR
	cfgsin31[0:44] =  45 'b010000000000100000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000010000010010000000000000000000000000000010;
	cfgsin29[0:44] =  45 'b000000000000010000000000000000000000010001000;
	cfgsin28[0:44] =  45 'b100000000001000000000100000000000000000000000;
	cfgsin27[0:44] =  45 'b000000010000000100000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat365; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin1[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin2[0:44] =  45 'b0x0110x001000110000010x0110x011000110000000x0;
	cfgsin3[0:44] =  45 'b110x011000100000000x0110x001000110000010x0100;
	cfgsin4[0:44] =  45 'bx011000110000000x0110x011000110000000x0101x01;
	cfgsin5[0:44] =  45 'b0100110000001x0110x011000110000010x0110x01100;
	cfgsin6[0:44] =  45 'b0110000000x1000x000001010000001x0110x01100011;
	cfgsin7[0:44] =  45 'b0000000x1010x000001000000001x1000x01000101000;
// TR
	cfgsin15[0:44] =  45 'b0001x1000x000000100000000x0000x10010001000001;
	cfgsin14[0:44] =  45 'b0x0101x010100010000000x0101x000100010000000x0;
	cfgsin13[0:44] =  45 'b000x001000110000001x0101x000000110000100x0000;
	cfgsin12[0:44] =  45 'bx011000000000000x0100x010000110000010x0101x01;
	cfgsin11[0:44] =  45 'b0100100000010x0110x011000110000010x0100x01100;
	cfgsin10[0:44] =  45 'b0110000010x0000x011000110000010x0010x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x1010001011x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin19[0:44] =  45 'b110x0110001101xx110x0101x0110010101xx110x0110;
	cfgsin20[0:44] =  45 'bx0010001011xx110x0110x0010001001xx001x0100x00;
	cfgsin21[0:44] =  45 'b01001101xx010x0110x0010001001xx110x0110x00100;
	cfgsin22[0:44] =  45 'b01001xx110x0110x0110001011xx110x0110x01100011;
	cfgsin23[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001100x;
// BR
	cfgsin31[0:44] =  45 'bx001x0010x0100000101xx010x0001x1010010101xx11;
	cfgsin30[0:44] =  45 'b0x0000x0100000101xx110x0010x0110010101xx110x0;
	cfgsin29[0:44] =  45 'b010x0110001100xx110x0110x0100001101xx001x0001;
	cfgsin28[0:44] =  45 'bx0001001100xx110x0101x0001010001xx110x0101x01;
	cfgsin27[0:44] =  45 'b01010100xx001x0010x0101001101xx101x0110x01010;
	cfgsin26[0:44] =  45 'b01101xx010x0001x0010010101xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
end
endtask
task get_wl_pat364; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000010000000000000000000000000000000000100;
	cfgsin3[0:44] =  45 'b000000000000100000000000100000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000001000000000000000000001000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000010000100010010100000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000100000100000000100000000000000010000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000010000100000101000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000100000100000100000000100;
	cfgsin13[0:44] =  45 'b100100000000000000000000001010000000000100110;
	cfgsin12[0:44] =  45 'b000000011000000100010000100000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000100000000000000000010000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0101x01100010100;
	cfgsin17[0:44] =  45 'b0010x0110x011000010000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x0110x011000100000010x0110x011000110000010x0;
	cfgsin19[0:44] =  45 'b110x011000101000010x0110x011000000000010x0110;
	cfgsin20[0:44] =  45 'bx011001010000010x0110x011001010000010x1010x10;
	cfgsin21[0:44] =  45 'b1001010000000x0110x011000110000001x0010x00000;
	cfgsin22[0:44] =  45 'b1010000001x0110x011000110000001x1010x01100011;
	cfgsin23[0:44] =  45 'b0000001x0110x011000110000000x1000x01100101000;
// BR
	cfgsin31[0:44] =  45 'b0001x1000x011001000000001x0001x01010010000000;
	cfgsin30[0:44] =  45 'b1x0110x101000101000010x0000x010001010000000x0;
	cfgsin29[0:44] =  45 'b110x010001010000010x0110x101000101000000x0110;
	cfgsin28[0:44] =  45 'bx011000100001010x0110x011000110000010x0110x01;
	cfgsin27[0:44] =  45 'b1000110000010x0110x011000110000010x0001x01100;
	cfgsin26[0:44] =  45 'b0110000010x0010x011001010000010x0000x01100011;
	cfgsin25[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat363; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000001000000000000000000000000010;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000001000000000000;
	cfgsin5[0:44] =  45 'b000000010000000000000000000010000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000010000000000000000000;
	cfgsin7[0:44] =  45 'b010000000000000001000000000000001000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000001010000000010010000001000000010000000;
	cfgsin14[0:44] =  45 'b000000000000010000000000000000000000010000000;
	cfgsin13[0:44] =  45 'b001000000000000000000000000000000010000000000;
	cfgsin12[0:44] =  45 'b000000000010000000000000000000010000000000000;
	cfgsin11[0:44] =  45 'b000001000000000000000000000000000000001000000;
	cfgsin10[0:44] =  45 'b000000000000001000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b010000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000010010000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000001000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000010000000000;
	cfgsin21[0:44] =  45 'b000000001000000000000000000001000001000001100;
	cfgsin22[0:44] =  45 'b000001000000000000000000010000000000000000000;
	cfgsin23[0:44] =  45 'b001000000000000000000000000000001000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000001001000;
	cfgsin30[0:44] =  45 'b000000000000000000000001010000100000000000000;
	cfgsin29[0:44] =  45 'b000000010000000000000000000000000000000100000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000010000000000000000000000100000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat362; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1000100000001100xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1000100000100001xx0xx10100000010;
	cfgsin5[0:44] =  45 'b00010xx0xx1010000001000100xx0xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx0xx1001000000100100xx0xx1100000010000100x;
	cfgsin7[0:44] =  45 'bx0xx1010000001000100xx1xx1100000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000000100100xx0xx0010000000010010xx1xx11;
	cfgsin14[0:44] =  45 'b00000000010010xx1xx1010000001000100xx0xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1100000001000100xx0xx01000000;
	cfgsin12[0:44] =  45 'b00100010xx0xx1100000100000100xx0xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000001000100xx1xx11000000000100;
	cfgsin10[0:44] =  45 'b10xx1xx1010000000010010xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx0xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000010000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000001000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000010010000000000;
	cfgsin20[0:44] =  45 'b000000000010000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000001000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000010001000000000000000010;
// BR
	cfgsin31[0:44] =  45 'b000000001000000001010000001000000000000000010;
	cfgsin30[0:44] =  45 'b000000000000000010000000000000000000010001000;
	cfgsin29[0:44] =  45 'b000000000000000010000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000001010000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000010000000000000000000010000000100000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000001000000000;
	cfgsin25[0:44] =  45 'b010000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat361; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000001000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx1010000100000100xx0xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1100000001000010xx0xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1100000000001100xx0xx11000000010;
	cfgsin5[0:44] =  45 'b00001xx0xx1000100001000001xx0xx11000001000001;
	cfgsin6[0:44] =  45 'b00xx1xx0100000001000100xx1xx0010000100000100x;
	cfgsin7[0:44] =  45 'bx0xx0000001001000001xx0xx0001000100000100xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1100000001000001xx0xx1001000001000100xx1xx00;
	cfgsin14[0:44] =  45 'b10000000100100xx1xx1100000001000001xx1xx01000;
	cfgsin13[0:44] =  45 'b00010000010xx0xx1000100001000001xx0xx00000100;
	cfgsin12[0:44] =  45 'b01000100xx0xx1100000000010100xx0xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1000100001000001xx1xx10100000010001;
	cfgsin10[0:44] =  45 'b00xx1xx1100000001000100xx0xx1100000100000010x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx0xx0010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx0xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx0xx1010000010000100xx1xx00100001000;
	cfgsin21[0:44] =  45 'b00100xx0xx1010000100000100xx0xx11000000010001;
	cfgsin22[0:44] =  45 'b00xx0xx1100000000010010xx0xx1001000000010100x;
	cfgsin23[0:44] =  45 'bx0xx1010000001000010xx0xx1010000001000100xx0x;
// BR
	cfgsin31[0:44] =  45 'bx1000010001000001xx0xx1000010000100100xx0xx01;
	cfgsin30[0:44] =  45 'b00000000100100xx0xx1100000001000100xx0xx11000;
	cfgsin29[0:44] =  45 'b00000010100xx1xx0010000100000100xx1xx10000100;
	cfgsin28[0:44] =  45 'b01000100xx0xx0010000001000100xx1xx10100000010;
	cfgsin27[0:44] =  45 'b00100xx0xx1010000100000100xx0xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1100000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx0xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0100000100000100xx1xx;
end
endtask
task get_wl_pat360; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000001000100x01000010000100000100xx00;
	cfgsin1[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin2[0:44] =  45 'b10000100000100xx0000010000100000100xx10000100;
	cfgsin3[0:44] =  45 'b00100000100xx0000000010010000001xx10000100001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000000010010xx10000010000010;
	cfgsin5[0:44] =  45 'b00100xx0000100000001000010xx00000100001000000;
	cfgsin6[0:44] =  45 'b10xx0001000100010000001xx0001001000000010010x;
	cfgsin7[0:44] =  45 'bx1000100000010000010xx1001100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00000010001000010xx0000100000000001001xx00000;
	cfgsin14[0:44] =  45 'b01000000100001xx0000000010100000001xx00100000;
	cfgsin13[0:44] =  45 'b10001000100xx1000001000001000001xx10010001000;
	cfgsin12[0:44] =  45 'b00010001xx1000000010100000100xx10000100001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000001000010xx00000100000000010;
	cfgsin10[0:44] =  45 'b01xx0000010000100000001xx1000010000001000100x;
	cfgsin9[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx00100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx01000001;
	cfgsin20[0:44] =  45 'b00000100xx1xx0100000100000100xx0xx01000001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx00010000010000;
	cfgsin22[0:44] =  45 'b01xx1xx1000010000001100xx1xx0010000001000010x;
	cfgsin23[0:44] =  45 'bx1xx1100000001000100xx1xx0000010000001001xx0x;
// BR
	cfgsin31[0:44] =  45 'bx0100000000010100xx1xx1100000001000100xx1xx10;
	cfgsin30[0:44] =  45 'b00010000001010xx0xx0001000000001001xx1xx00000;
	cfgsin29[0:44] =  45 'b10000001100xx0xx1010000100000100xx0xx10010000;
	cfgsin28[0:44] =  45 'b01000001xx1xx1100000001000001xx1xx11000000010;
	cfgsin27[0:44] =  45 'b00001xx1xx0010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx0010000100000100xx1xx1100000100000100x;
	cfgsin25[0:44] =  45 'bx0xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat359; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000000010100000010xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000001000001xx00000000101000;
	cfgsin5[0:44] =  45 'b00100xx0000000010001000010xx00000010000010001;
	cfgsin6[0:44] =  45 'b00xx0000000010100000001xx0000001000000100001x;
	cfgsin7[0:44] =  45 'bx0010000100001000010xx0000000010001000010xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000001000100xx0100000010100000001xx00000;
	cfgsin14[0:44] =  45 'b01000010000100xx0000000010001000010xx00000000;
	cfgsin13[0:44] =  45 'b10000001010xx0000000001001000010xx00000100001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000010xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000001000001xx00000010000010000;
	cfgsin10[0:44] =  45 'b01xx0000001000001000001xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x01000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000100000100xx0000010000100000100xx00010100;
	cfgsin19[0:44] =  45 'b00100000100xx0000010000100000100xx00010100001;
	cfgsin20[0:44] =  45 'b00000010xx0001010000100000001xx10010100001000;
	cfgsin21[0:44] =  45 'b00010xx0000010000100000100xx00000000100010000;
	cfgsin22[0:44] =  45 'b01xx0000010000100000001xx0001100000001000001x;
	cfgsin23[0:44] =  45 'bx0000010000001000001xx0001100000001000001xx00;
// BR
	cfgsin31[0:44] =  45 'b01010000001000001xx0000001000001000001xx00000;
	cfgsin30[0:44] =  45 'b01000010000001xx0000000100001000010xx00010001;
	cfgsin29[0:44] =  45 'b00001000001xx1000010000100000100xx10001000000;
	cfgsin28[0:44] =  45 'b01000001xx0000010000001000001xx00000100000010;
	cfgsin27[0:44] =  45 'b00001xx0000010000100000100xx00000100001000001;
	cfgsin26[0:44] =  45 'b00xx0001010000000100100xx0000010000100000100x;
	cfgsin25[0:44] =  45 'bx1000010000100000100xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000100000100x0000;
end
endtask
task get_wl_pat358; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000001000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000000100100xx00000010000000;
	cfgsin5[0:44] =  45 'b01001xx1000000001001000001xx10000000101000001;
	cfgsin6[0:44] =  45 'b00xx0000000010010000100xx0000000010010000100x;
	cfgsin7[0:44] =  45 'bx0000001000001000100xx0000001000100000100xx10;
// TR
	cfgsin15[0:44] =  45 'b00010000001000010xx0000001000000001010xx00010;
	cfgsin14[0:44] =  45 'b00010100000010xx0000001000001000100xx00000010;
	cfgsin13[0:44] =  45 'b00000100001xx0000001000000001100xx00001000000;
	cfgsin12[0:44] =  45 'b00010010xx0000001000000010100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000001000001xx00000010000010000;
	cfgsin10[0:44] =  45 'b01xx0000001000001000001xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000001000100000001xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000000100;
	cfgsin20[0:44] =  45 'b01000100xx0000000100001000100xx00000001000010;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000000010010000;
	cfgsin22[0:44] =  45 'b01xx0000000010010000010xx0000000010001000100x;
	cfgsin23[0:44] =  45 'bx0000001000001000001xx0000001000001000010xx00;
// BR
	cfgsin31[0:44] =  45 'b00000010000001010xx0000001000000001100xx00000;
	cfgsin30[0:44] =  45 'b00010100000010xx0101000001001000010xx00000000;
	cfgsin29[0:44] =  45 'b01001000010xx0000001000100000100xx00000010000;
	cfgsin28[0:44] =  45 'b01000010xx0000001000001000100xx00000010000010;
	cfgsin27[0:44] =  45 'b00001xx0001001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000000100001000100xx0000001000001000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000100000001xx000;
end
endtask
task get_wl_pat357; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000001000001xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000000001010000100xx00000010000100;
	cfgsin5[0:44] =  45 'b00010xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000000001010xx0000100000000001010x;
	cfgsin7[0:44] =  45 'bx0000000100001000001xx0000000010010000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000001000001xx0000010000010000100xx00010;
	cfgsin14[0:44] =  45 'b10000001000010xx0000001000001000001xx00000000;
	cfgsin13[0:44] =  45 'b01000010100xx0000001000100000001xx00010010000;
	cfgsin12[0:44] =  45 'b01000001xx0000000001000001001xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000001000001xx00000100000010000;
	cfgsin10[0:44] =  45 'b01xx0000010000001000001xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00001000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00010000010000010;
	cfgsin22[0:44] =  45 'b01xx0000001000000001100xx0000000010001000001x;
	cfgsin23[0:44] =  45 'bx0000001000001000001xx0000000010000001100xx10;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0000001000000010010xx00000;
	cfgsin30[0:44] =  45 'b00001000001100xx0000001000000001010xx00000000;
	cfgsin29[0:44] =  45 'b10000001100xx0000001000100000100xx00000010000;
	cfgsin28[0:44] =  45 'b00001001xx0000001000001000001xx00000000010010;
	cfgsin27[0:44] =  45 'b00001xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000000010100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000100000100x000x;
end
endtask
task get_wl_pat356; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000001000001xx10000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000000100100000100xx00100001000010;
	cfgsin5[0:44] =  45 'b00100xx0010001000001000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000000100010000100xx0000000010001000100x;
	cfgsin7[0:44] =  45 'bx0000001000001000010xx0001100000000100100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000001000100xx0000000100000100010xx00000;
	cfgsin14[0:44] =  45 'b01000000001100xx0000001000001000010xx00011000;
	cfgsin13[0:44] =  45 'b00100000010xx1000000100100000100xx01000001000;
	cfgsin12[0:44] =  45 'b01000010xx1000001000001000100xx10000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000001000100xx00000010000010000;
	cfgsin10[0:44] =  45 'b10xx0000001000001000001xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000001000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000000101;
	cfgsin20[0:44] =  45 'b00000100xx0000000100100000100xx00000001001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000010000000100;
	cfgsin22[0:44] =  45 'b10xx0000010000000001001xx0000010000001000001x;
	cfgsin23[0:44] =  45 'bx0000001000001000001xx0000000010001000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000010000001xx0000000010100000010xx00000;
	cfgsin30[0:44] =  45 'b01000001000001xx0000000001001000001xx00000010;
	cfgsin29[0:44] =  45 'b00010000001xx0000001000100000100xx00000010000;
	cfgsin28[0:44] =  45 'b00001001xx0000000100000010001xx00000010000010;
	cfgsin27[0:44] =  45 'b00001xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000000100000100100xx0000001000000100100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000100000100x0000;
end
endtask
task get_wl_pat355; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx1000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx01000010;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000001000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000000100000100001xx10000001000010;
	cfgsin5[0:44] =  45 'b00010xx1000001000001000001xx00000001001000001;
	cfgsin6[0:44] =  45 'b00xx0001100000000010100xx0000001000000001010x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx1000000010000001100xx00;
// TR
	cfgsin15[0:44] =  45 'b01000010001000010xx0001000001000001100xx10000;
	cfgsin14[0:44] =  45 'b00010000001010xx1000000010001000100xx01000100;
	cfgsin13[0:44] =  45 'b00100000100xx0001000100000001001xx00000010000;
	cfgsin12[0:44] =  45 'b00001001xx0000001000010000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000001000001xx00000010000000011;
	cfgsin10[0:44] =  45 'b00xx0000001000001000100xx0000000010100000001x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00010000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000001000010001;
	cfgsin22[0:44] =  45 'b00xx0000000100000001010xx0000000100001000010x;
	cfgsin23[0:44] =  45 'bx0000000100001000010xx0000000100001000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000001000100xx0000001000010000100xx00000;
	cfgsin30[0:44] =  45 'b01000000001100xx0000001000001000100xx00000010;
	cfgsin29[0:44] =  45 'b00000001100xx0100001000100000100xx00000000100;
	cfgsin28[0:44] =  45 'b01000100xx0000001000001000100xx00000010000010;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000010xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000100000100xx00x;
end
endtask
task get_wl_pat354; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx1001000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b01000100000100xx1xx1001000100000100xx0xx10010;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1000010000100010xx0xx10010001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1001000001000100xx0xx00100000100;
	cfgsin5[0:44] =  45 'b00010xx0xx0001000001000001xx1xx10010000001001;
	cfgsin6[0:44] =  45 'b00xx1xx0001000100000100xx1xx1000100000100001x;
	cfgsin7[0:44] =  45 'bx1xx1000010100000100xx0xx0000100010000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx0000100000010001xx1xx0000010100000010xx0xx00;
	cfgsin14[0:44] =  45 'b00100010000100xx0xx1001000100000001xx0xx00010;
	cfgsin13[0:44] =  45 'b00000100001xx0xx0001000010000001xx0xx00000010;
	cfgsin12[0:44] =  45 'b01000010xx0xx1001000010000100xx0xx10010001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1001000000001001xx1xx10010001000000;
	cfgsin10[0:44] =  45 'b01xx1xx1000010100000010xx1xx1001000000100010x;
	cfgsin9[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000001xx1001001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000100000100xx00010010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00011000000000010;
	cfgsin22[0:44] =  45 'b01xx0000000100000001100xx0000100000001000100x;
	cfgsin23[0:44] =  45 'bx0000000100001000100xx0000001000001000001xx00;
// BR
	cfgsin31[0:44] =  45 'b01001000000100010xx1001000010001000001xx01000;
	cfgsin30[0:44] =  45 'b00100000001100xx0001001000000001001xx01000001;
	cfgsin29[0:44] =  45 'b00000001001xx0001001000100000100xx00100001000;
	cfgsin28[0:44] =  45 'b01000001xx0000000010001000001xx10000010000010;
	cfgsin27[0:44] =  45 'b00001xx1000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000000001001xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000000001001xx000;
end
endtask
task get_wl_pat353; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000001x00xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x01xx1100000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00100000100x01xx1100000000100100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x00xx1010000010000001x00xx10010000000;
	cfgsin5[0:44] =  45 'b01100x00xx1010000000001100x10xx10100001000000;
	cfgsin6[0:44] =  45 'b10x00xx1010000000001100x00xx1010000001000001x;
	cfgsin7[0:44] =  45 'b00xx1100000000001100x01xx1010000001000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1100000001000100x01xx0000010000001001x11xx00;
	cfgsin14[0:44] =  45 'b10000001000010x00xx1001000000100001x00xx10100;
	cfgsin13[0:44] =  45 'b00000010001x00xx1001000000001001x01xx10010000;
	cfgsin12[0:44] =  45 'b00010100x01xx1010000100000100x00xx10100001000;
	cfgsin11[0:44] =  45 'b00100x01xx1010000010000100x01xx10000101000000;
	cfgsin10[0:44] =  45 'b10x01xx1000010100000010x00xx1010000100000100x;
	cfgsin9[0:44] =  45 'b00xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100x00xx0001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx00010001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010000100;
	cfgsin21[0:44] =  45 'b00100xx1xx1001000100000100xx1xx00010001000000;
	cfgsin22[0:44] =  45 'b01xx1xx1001000100000010xx1xx1001000001000001x;
	cfgsin23[0:44] =  45 'bx1xx1000100100000001xx1xx1000100100000001xx1x;
// BR
	cfgsin31[0:44] =  45 'bx0000100000001001xx0xx0000010000100001xx0xx10;
	cfgsin30[0:44] =  45 'b10000001000100xx1xx0000100000001001xx0xx10010;
	cfgsin29[0:44] =  45 'b00100000001xx0xx0001000100000100xx1xx00010001;
	cfgsin28[0:44] =  45 'b00000001xx1xx1000100100000001xx0xx10000101000;
	cfgsin27[0:44] =  45 'b00001xx0xx1001000100000100xx1xx10010001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat352; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx1000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000000001001000001x100001000001;
	cfgsin4[0:44] =  45 'b00000100x00000001000010000010x000000100000010;
	cfgsin5[0:44] =  45 'b00001x00000000010010000010x010000100001000001;
	cfgsin6[0:44] =  45 'b00x00000100000100000001x00000001000100000010x;
	cfgsin7[0:44] =  45 'b01000100000001000010x00000000010010000010x000;
// TR
	cfgsin15[0:44] =  45 'b00000010000100010x10001010000001000100x100010;
	cfgsin14[0:44] =  45 'b10000100000001x00000010000100000001x110000000;
	cfgsin13[0:44] =  45 'b01000001010x00000010000010000001x000000100000;
	cfgsin12[0:44] =  45 'b10000010x00000010000010000100x010000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000010000010x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000000001100x00000010000000001100x;
	cfgsin9[0:44] =  45 'b01000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000001x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000100x01xx1010000100000100x01xx10100;
	cfgsin19[0:44] =  45 'b00100000100x00xx1100000100000100x00xx10100000;
	cfgsin20[0:44] =  45 'b10000010x01xx1010000100000010x00xx00100001000;
	cfgsin21[0:44] =  45 'b00010x00xx0010000100000100x00xx10100000001000;
	cfgsin22[0:44] =  45 'b10x10xx1010000010000100x00xx1010000100000010x;
	cfgsin23[0:44] =  45 'b00xx1001000100000001x00xx1001000000001100x00x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000001x10xx1010000000001001x00xx00;
	cfgsin30[0:44] =  45 'b10000010000001x01xx0000010001000100x01xx10100;
	cfgsin29[0:44] =  45 'b00000100100x01xx0010000100000100x01xx00100000;
	cfgsin28[0:44] =  45 'b00100001x01xx1010000100000001x00xx11000001000;
	cfgsin27[0:44] =  45 'b00001x00xx1010000100000100x00xx10100001000001;
	cfgsin26[0:44] =  45 'b00x01xx1010000100000010x00xx1010000100000010x;
	cfgsin25[0:44] =  45 'b00xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000001x01x0;
end
endtask
task get_wl_pat351; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000001xx0000100000100000100x100;
	cfgsin1[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin2[0:44] =  45 'b00000100000100x10000100000100000100x100001000;
	cfgsin3[0:44] =  45 'b00100000100x10000010000100000010x100001000001;
	cfgsin4[0:44] =  45 'b00000100x11000000100100000100x100000100000010;
	cfgsin5[0:44] =  45 'b00010x10000010000100000001x100001000000000100;
	cfgsin6[0:44] =  45 'b01x10000001000001000010x10000000010010000100x;
	cfgsin7[0:44] =  45 'b10000010000010000001x10000100000100000001x100;
// TR
	cfgsin15[0:44] =  45 'b00010000010000001x10000000100001000010x100000;
	cfgsin14[0:44] =  45 'b00100000100100x10000010000100000001x100000001;
	cfgsin13[0:44] =  45 'b00100000100x10000010000010000001x100000100001;
	cfgsin12[0:44] =  45 'b00000001x10000001000010000100x100000100001000;
	cfgsin11[0:44] =  45 'b00100x10000010000100000001x100000100000100000;
	cfgsin10[0:44] =  45 'b01x10000010000010000001x10000001000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin19[0:44] =  45 'b00100000100x00100100000100000100x010000100000;
	cfgsin20[0:44] =  45 'b10000100x00000010000100000100x000010100001000;
	cfgsin21[0:44] =  45 'b00100x01000010000100000100x000000100001000001;
	cfgsin22[0:44] =  45 'b00x00100010000001000001x00000001000100000100x;
	cfgsin23[0:44] =  45 'b00000010000100000001x00100010000100000010x100;
// BR
	cfgsin31[0:44] =  45 'b00000010000010010x00100000010000100010x010010;
	cfgsin30[0:44] =  45 'b10000100000100x00001010000100000010x000000000;
	cfgsin29[0:44] =  45 'b10100000010x00001010000100000100x000000000101;
	cfgsin28[0:44] =  45 'b00000001x00000010000100000001x000001000001000;
	cfgsin27[0:44] =  45 'b00001x00000010000100000100x010000100001000001;
	cfgsin26[0:44] =  45 'b00x00000000010100000100x00000001000100000100x;
	cfgsin25[0:44] =  45 'b01000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001010000100000100xx00x;
end
endtask
task get_wl_pat350; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000010000001x000000100001;
	cfgsin4[0:44] =  45 'b00000100x00000001000010000100x010000010000010;
	cfgsin5[0:44] =  45 'b00010x00100010000010000001x000001000001000001;
	cfgsin6[0:44] =  45 'b00x01000100000000001010x00100010000001000010x;
	cfgsin7[0:44] =  45 'b00000001000001000001x00000001000000010010x100;
// TR
	cfgsin15[0:44] =  45 'b00010000100000001x00000000010001000010x000001;
	cfgsin14[0:44] =  45 'b00000001000010x00100010000100000001x000000010;
	cfgsin13[0:44] =  45 'b00000001001x11000100000001000100x100001000000;
	cfgsin12[0:44] =  45 'b01000001x10000001000000001010x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000010000001x000000100001000000;
	cfgsin10[0:44] =  45 'b01x00000010000100000001x01000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100000;
	cfgsin18[0:44] =  45 'b10000100000100x10000010000100000100x100000100;
	cfgsin19[0:44] =  45 'b00100000100x10000100000100000100x100001000000;
	cfgsin20[0:44] =  45 'b00010001x10000100000000010001x110001000000000;
	cfgsin21[0:44] =  45 'b10001x10001010000100000100x110000100000000010;
	cfgsin22[0:44] =  45 'b01x10000010000001000010x10000010000000001001x;
	cfgsin23[0:44] =  45 'b10000010000100000001x10000010000010000001x101;
// BR
	cfgsin31[0:44] =  45 'b00010000010000100x10000010000010000100x100000;
	cfgsin30[0:44] =  45 'b00010001000010x10000010000010000001x100000100;
	cfgsin29[0:44] =  45 'b00010000001x10000010000100000100x100100100001;
	cfgsin28[0:44] =  45 'b00000001x10000010000100000001x101000100001000;
	cfgsin27[0:44] =  45 'b00001x10000010000100000100x100000100001000001;
	cfgsin26[0:44] =  45 'b00x10000100000000010001x10100100000000010001x;
	cfgsin25[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat349; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000010000001x000000100001;
	cfgsin4[0:44] =  45 'b00000100x00000010000010000100x000000100001000;
	cfgsin5[0:44] =  45 'b00001x10000010000000010001x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000000100100x00001100000000001100x;
	cfgsin7[0:44] =  45 'b01000100000001000001x01000010000000001100x010;
// TR
	cfgsin15[0:44] =  45 'b00100000100000001x00010010000001000010x000000;
	cfgsin14[0:44] =  45 'b10000000001001x10000010000100000001x010000000;
	cfgsin13[0:44] =  45 'b10001000100x00000100000000001010x000000000100;
	cfgsin12[0:44] =  45 'b00001010x00000100000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00001010000010000001x000000000101000000;
	cfgsin10[0:44] =  45 'b01x00000001000100000001x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000100000100000100x000000100;
	cfgsin19[0:44] =  45 'b00100000100x00000010000100000100x000000100000;
	cfgsin20[0:44] =  45 'b10000100x00000001000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000000100001000000;
	cfgsin22[0:44] =  45 'b01x00000100000000001001x01000010000100000001x;
	cfgsin23[0:44] =  45 'b01000010000100000001x00000010000100000001x000;
// BR
	cfgsin31[0:44] =  45 'b00001000000100010x00000000001000001100x000000;
	cfgsin30[0:44] =  45 'b10000000001100x00000010000001000010x000000010;
	cfgsin29[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin28[0:44] =  45 'b00000001x10000100000100000100x100000100001000;
	cfgsin27[0:44] =  45 'b00100x10100010000100000100x000000100001000001;
	cfgsin26[0:44] =  45 'b00x00000010000001000100x00000010000001000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat348; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x01000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000100x01000100000000001001x000000100001;
	cfgsin4[0:44] =  45 'b00000100x01000010000010000100x000100100000010;
	cfgsin5[0:44] =  45 'b00010x00000001000010000001x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000000100100x00000001000000010100x;
	cfgsin7[0:44] =  45 'b00000000001000010001x00000010000000100100x000;
// TR
	cfgsin15[0:44] =  45 'b00001000100000001x00000100000001000010x000000;
	cfgsin14[0:44] =  45 'b10000000010010x00001010000100000001x000011000;
	cfgsin13[0:44] =  45 'b00010000100x00000100000100000001x000000010000;
	cfgsin12[0:44] =  45 'b00100100x00000100000001000001x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000010000001x000001000001000000;
	cfgsin10[0:44] =  45 'b01x00100100000100000001x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000100000100000100x000000100;
	cfgsin19[0:44] =  45 'b00100000100x00000010000100000100x000000100000;
	cfgsin20[0:44] =  45 'b10000100x00000010000100000100x000000000101000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000000100000010001;
	cfgsin22[0:44] =  45 'b00x00010000001010000001x00000010000000100001x;
	cfgsin23[0:44] =  45 'b00000010000100000001x00000100000000100100x010;
// BR
	cfgsin31[0:44] =  45 'b00100000001000100x10000100000001000010x000000;
	cfgsin30[0:44] =  45 'b00010000010001x00000100000000010001x000011000;
	cfgsin29[0:44] =  45 'b00001000001x00000010000100000100x000000100000;
	cfgsin28[0:44] =  45 'b01000100x00000100000000100001x000000100000000;
	cfgsin27[0:44] =  45 'b10001x00000010000100000100x000000100001000001;
	cfgsin26[0:44] =  45 'b00x00000010000000001010x10100001000010000010x;
	cfgsin25[0:44] =  45 'b10000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat347; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000001001000001000100000100x000;
	cfgsin1[0:44] =  45 'b00001000100000100x00000001000100000100x000000;
	cfgsin2[0:44] =  45 'b01000100000100x00000001000100000100x010000010;
	cfgsin3[0:44] =  45 'b00100000100x00000000001000001001x010000010001;
	cfgsin4[0:44] =  45 'b00000100x00000001000000001001x100000010000000;
	cfgsin5[0:44] =  45 'b01001x10001000010010000100x110001000000000011;
	cfgsin6[0:44] =  45 'b00x00001000001000001100x00100010000100000001x;
	cfgsin7[0:44] =  45 'b00000001000001000001x00001010000010000100x000;
// TR
	cfgsin15[0:44] =  45 'b00000010000001001x00100001000001000010x000000;
	cfgsin14[0:44] =  45 'b00001001000001x10000010000000001001x000000100;
	cfgsin13[0:44] =  45 'b00000001100x00001010000001000100x001100010000;
	cfgsin12[0:44] =  45 'b01000001x00100010000000001001x010010100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000010000001x000000000100010000;
	cfgsin10[0:44] =  45 'b01x00000010000000001001x01000010000000001100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000100000100000100x000000100;
	cfgsin19[0:44] =  45 'b00100000100x00000010000100000100x000000100000;
	cfgsin20[0:44] =  45 'b10000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000001000001000000;
	cfgsin22[0:44] =  45 'b01x00000010000000001010x00000100000001000001x;
	cfgsin23[0:44] =  45 'b00000010000100000001x00000000001100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00000010000001010x00000001000100000001x000001;
	cfgsin30[0:44] =  45 'b00000001000010x00000010000100000100x001000100;
	cfgsin29[0:44] =  45 'b00000001010x01000010000100000100x000000100001;
	cfgsin28[0:44] =  45 'b00000100x00000100000000100001x000000100001000;
	cfgsin27[0:44] =  45 'b00001x00000010000100000100x000000100001000001;
	cfgsin26[0:44] =  45 'b00x00000010000100000010x10000010000100000010x;
	cfgsin25[0:44] =  45 'b10000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat346; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1001000100000100x01x;
	cfgsin1[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin2[0:44] =  45 'b01000100000100x00xx1001000100000100x00xx10010;
	cfgsin3[0:44] =  45 'b00100000100x00xx1010000010000001x00xx10010001;
	cfgsin4[0:44] =  45 'b00000100x00xx1100000000100100x01xx00001000010;
	cfgsin5[0:44] =  45 'b00010x01xx0100000001000001x00xx10100000010001;
	cfgsin6[0:44] =  45 'b00x01xx0001000001000010x00xx0000010001000010x;
	cfgsin7[0:44] =  45 'b10xx1000100001000001x00xx0100000001000010x00x;
// TR
	cfgsin15[0:44] =  45 'bx1010000001000001x00xx0010000000100001x01xx10;
	cfgsin14[0:44] =  45 'b01000100000010x01xx0010000100000001x00xx01000;
	cfgsin13[0:44] =  45 'b00001000010x01xx0001000100000010x00xx01000000;
	cfgsin12[0:44] =  45 'b01000100x00xx1001000001000010x10xx00100001000;
	cfgsin11[0:44] =  45 'b00100x01xx0100000100000001x01xx10100001000000;
	cfgsin10[0:44] =  45 'b01x00xx1010000000100001x00xx1010000001000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000001001001100000100000100x000;
	cfgsin17[0:44] =  45 'b01010000100000100x00000100000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin19[0:44] =  45 'b00100000100x00000010000100000100x000001000000;
	cfgsin20[0:44] =  45 'b00001100x01000100000000001100x010001000000000;
	cfgsin21[0:44] =  45 'b01100x00000001000100000100x000010100000010000;
	cfgsin22[0:44] =  45 'b10x00000000001001000001x00000000001100000010x;
	cfgsin23[0:44] =  45 'b00000000001000001001x00000000001100000001x000;
// BR
	cfgsin31[0:44] =  45 'b00100000000001100x10001010000000001100x010100;
	cfgsin30[0:44] =  45 'b10000000100010x10001001000001000001x000000000;
	cfgsin29[0:44] =  45 'b10000010100x10000010000100000100x000000100001;
	cfgsin28[0:44] =  45 'b00000001x10100001000000001100x101000010000000;
	cfgsin27[0:44] =  45 'b01001x00000010000100000100x000000100001000001;
	cfgsin26[0:44] =  45 'b00x00000100000100000100x00000100000000001100x;
	cfgsin25[0:44] =  45 'b01000001000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000010100001000000010000x;
end
endtask
task get_wl_pat345; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000001xx0xx1001000100000100x01x;
	cfgsin1[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin2[0:44] =  45 'b01000100000100x01xx1001000100000100x01xx10010;
	cfgsin3[0:44] =  45 'b00100000100x01xx1100000000001001x01xx10010001;
	cfgsin4[0:44] =  45 'b00000100x01xx1000010001000100x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1000100100000010x01xx10100000010001;
	cfgsin6[0:44] =  45 'b00x01xx0100000001000001x11xx0000001001000100x;
	cfgsin7[0:44] =  45 'b01xx0010000000001001x11xx0010000001000001x11x;
// TR
	cfgsin15[0:44] =  45 'bx0010000000001001x01xx1000010000010100x01xx10;
	cfgsin14[0:44] =  45 'b00100000001100x01xx1000001000001001x01xx00000;
	cfgsin13[0:44] =  45 'b01001000001x00xx0010000001000100x00xx00100000;
	cfgsin12[0:44] =  45 'b00001010x01xx0010000001000100x01xx10100001000;
	cfgsin11[0:44] =  45 'b00100x00xx1010000100000001x01xx10100000001000;
	cfgsin10[0:44] =  45 'b01x01xx1010000100000001x00xx1010000001000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x0xx0100000100000100x01x;
	cfgsin17[0:44] =  45 'bx0010000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000100x01xx1010000100000100x01xx10100;
	cfgsin19[0:44] =  45 'b00100000100x01xx1010000100000100x01xx10000100;
	cfgsin20[0:44] =  45 'b01000100x00xx1010000001000100x00xx10010000010;
	cfgsin21[0:44] =  45 'b00100x01xx1001000100000100x01xx00100001000000;
	cfgsin22[0:44] =  45 'b01x01xx0001000000100010x01xx1010000001000001x;
	cfgsin23[0:44] =  45 'b01xx1010000001000001x01xx1010000000100100x00x;
// BR
	cfgsin31[0:44] =  45 'bx1001000010000010x01xx0000001001000010x00xx00;
	cfgsin30[0:44] =  45 'b10000100000001x01xx0010000010000100x00xx00010;
	cfgsin29[0:44] =  45 'b00001000001x00xx1010000100000100x01xx10100001;
	cfgsin28[0:44] =  45 'b00000010x00xx1010000010000001x00xx10001000100;
	cfgsin27[0:44] =  45 'b00010x01xx1010000100000100x01xx10100001000001;
	cfgsin26[0:44] =  45 'b00x01xx1010000001000010x00xx1010000001000010x;
	cfgsin25[0:44] =  45 'b00xx1001000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx00100001000001000x1x0;
end
endtask
task get_wl_pat344; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000010000100000001xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000001000100xx00000100000100;
	cfgsin5[0:44] =  45 'b00010xx0000001000001000001xx00000010000010001;
	cfgsin6[0:44] =  45 'b00xx0001001000001000100xx0000001000100000001x;
	cfgsin7[0:44] =  45 'bx0001001000100000001xx0000001000001000100xx00;
// TR
	cfgsin15[0:44] =  45 'b01001000001000001xx0000000001100000010xx00000;
	cfgsin14[0:44] =  45 'b10000001000001xx0000100000001000001xx00100010;
	cfgsin13[0:44] =  45 'b00000001001xx0000000001100000010xx10100000101;
	cfgsin12[0:44] =  45 'b00000010xx0010001000001000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000001xx00000001000010000;
	cfgsin10[0:44] =  45 'b01xx0000100000001000001xx1000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000100xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1000010100000001xx0xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000100x01xx1010000100000100x01xx10100;
	cfgsin19[0:44] =  45 'b00100000100x01xx1010000100000100x01xx00100000;
	cfgsin20[0:44] =  45 'b01000100x01xx1010000001000100x01xx10010000010;
	cfgsin21[0:44] =  45 'b00100x01xx0001000100000100x01xx00100001000001;
	cfgsin22[0:44] =  45 'b00x01xx0001000001000100x01xx0010000000100001x;
	cfgsin23[0:44] =  45 'b01xx0010000010000001x01xx0010000100000010x01x;
// BR
	cfgsin31[0:44] =  45 'bx0100000001000001x01xx0000010000001001x11xx10;
	cfgsin30[0:44] =  45 'b01000001000100x01xx0010000010000010x00xx00100;
	cfgsin29[0:44] =  45 'b00001000010x00xx0010000100000100x01xx10100001;
	cfgsin28[0:44] =  45 'b00000100x01xx1010000000100010x01xx10001000100;
	cfgsin27[0:44] =  45 'b00100x01xx1010000100000100x00xx10100001000001;
	cfgsin26[0:44] =  45 'b00x01xx0010000001000001x01xx0010000001000001x;
	cfgsin25[0:44] =  45 'b00xx1001000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0000010100000001xx1xx;
end
endtask
task get_wl_pat343; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000010000000010010xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000001000100xx00000001000000;
	cfgsin5[0:44] =  45 'b10010xx0000010000000010001xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0010010000001000100x;
	cfgsin7[0:44] =  45 'bx0000001000000100010xx0000001000000001001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000001xx0000001000010000100xx00000;
	cfgsin14[0:44] =  45 'b00100001000100xx0000100000100000001xx00000010;
	cfgsin13[0:44] =  45 'b00001000010xx1001000010100000010xx00001000000;
	cfgsin12[0:44] =  45 'b00100001xx0000000001001000010xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0100100000000001001xx00000001000100000;
	cfgsin10[0:44] =  45 'b01xx0000100000010000001xx0000001000001000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00010010000;
	cfgsin20[0:44] =  45 'b01000100xx0000001000001000100xx00000010000010;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00010000011000000;
	cfgsin22[0:44] =  45 'b01xx0000010000000001001xx0001001000100000001x;
	cfgsin23[0:44] =  45 'bx0001010000100000001xx0001000001000100001xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000100000001xx0010001000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000001000001xx0000100000010000001xx10000010;
	cfgsin29[0:44] =  45 'b00010000001xx0010100000100000100xx00000010001;
	cfgsin28[0:44] =  45 'b00000001xx0000100000010000001xx00001000000100;
	cfgsin27[0:44] =  45 'b00001xx0000100000100000100xx10001000001000001;
	cfgsin26[0:44] =  45 'b00xx0001001000000001100xx0010001000001000100x;
	cfgsin25[0:44] =  45 'bx1000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat342; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx001x001xx0000100000xx100x100xx00;
	cfgsin1[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin2[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin3[0:44] =  45 'b00xx100x100xx0000000100xx010x100xx0000100000x;
	cfgsin4[0:44] =  45 'bx100x100xx0000001000xx010x001xx0000000001xx01;
	cfgsin5[0:44] =  45 'b0x100xx0000100000xx100x100xx0000001000xx010x1;
	cfgsin6[0:44] =  45 'b00xx0000000100xx010x010xx0000001000xx001x010x;
	cfgsin7[0:44] =  45 'bx0000010000xx100x100xx0001001000xx100x010xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000xx010x100xx0000000001xx100x001xx00000;
	cfgsin14[0:44] =  45 'b01000xx001x010xx0000000010xx010x100xx00000001;
	cfgsin13[0:44] =  45 'b00xx100x100xx0000000001xx001x100xx0000010000x;
	cfgsin12[0:44] =  45 'bx001x100xx0000000001xx010x001xx0000100000xx10;
	cfgsin11[0:44] =  45 'b0x100xx0000100000xx100x001xx0000000100xx001x0;
	cfgsin10[0:44] =  45 'b01xx0000100000xx010x001xx0000001000xx010x100x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000100000xx001x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000100000100000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0001100000100000100xx00000001000100000;
	cfgsin22[0:44] =  45 'b01xx0001000100100000100xx0000001000010000001x;
	cfgsin23[0:44] =  45 'bx0000010000010000001xx0000000010010000001xx00;
// BR
	cfgsin31[0:44] =  45 'b10000010001000001xx0000001000001000001xx00000;
	cfgsin30[0:44] =  45 'b00100010000010xx0001001000000001001xx00001000;
	cfgsin29[0:44] =  45 'b00000001100xx1000100000100000100xx00000001001;
	cfgsin28[0:44] =  45 'b00000001xx0000100000010000001xx00000001000100;
	cfgsin27[0:44] =  45 'b00001xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat341; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx001x001x00000100000xx100x1000x00;
	cfgsin1[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin2[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin3[0:44] =  45 'b00xx100x1000x0000010000xx001x0101x0000100000x;
	cfgsin4[0:44] =  45 'bx100x1000x0000001000xx100x0101x0000010000xx00;
	cfgsin5[0:44] =  45 'b1x0101x0010000001xx001x1001x0000001000xx100x0;
	cfgsin6[0:44] =  45 'b101x0000001000xx100x0011x0001001000xx100x0011;
	cfgsin7[0:44] =  45 'bx0101000001xx001x1001x0000001000xx100x0011x00;
// TR
	cfgsin15[0:44] =  45 'b00001000xx001x0101x0000000001xx010x1001x00010;
	cfgsin14[0:44] =  45 'b10000xx010x0011x0000100000xx001x0101x00000010;
	cfgsin13[0:44] =  45 'b00xx100x0101x0000000100xx010x1001x0000100000x;
	cfgsin12[0:44] =  45 'bx010x0011x0010001000xx100x0011x0000100000xx10;
	cfgsin11[0:44] =  45 'b0x1000x0000000001xx001x1001x0000000100xx010x0;
	cfgsin10[0:44] =  45 'b011x0000100000xx001x0101x0000001000xx100x0101;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000100000xx001x001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin19[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000001000x;
	cfgsin20[0:44] =  45 'bx010x100xx0000001000xx010x100xx0000001000xx01;
	cfgsin21[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx010x0;
	cfgsin22[0:44] =  45 'b01xx0000001000xx001x010xx0000001000xx100x010x;
	cfgsin23[0:44] =  45 'bx0000010000xx010x001xx0000001000xx001x100xx00;
// BR
	cfgsin31[0:44] =  45 'b00000001xx001x100xx0000001000xx100x010xx00000;
	cfgsin30[0:44] =  45 'b00010xx010x100xx0000010000xx100x001xx00010010;
	cfgsin29[0:44] =  45 'b00xx010x010xx0000100000xx100x100xx0000000100x;
	cfgsin28[0:44] =  45 'bx100x100xx0000010000xx010x010xx0000010000xx01;
	cfgsin27[0:44] =  45 'b0x001xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin26[0:44] =  45 'b00xx0000001000xx100x100xx0000001000xx100x100x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
end
endtask
task get_wl_pat340; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b100000000000000000000000000010000000000000000;
	cfgsin4[0:44] =  45 'b000000001000000100110000000000000000000000000;
	cfgsin5[0:44] =  45 'b000001000000000001000000000000000000000001000;
	cfgsin6[0:44] =  45 'b000000000000000000000001000000000000000000010;
	cfgsin7[0:44] =  45 'b000001000000000100000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000100000001000001001000000000000000;
	cfgsin14[0:44] =  45 'b000001000000000000000000000000000000000010001;
	cfgsin13[0:44] =  45 'b000000000000001000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x001x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin18[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin19[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000001000x;
	cfgsin20[0:44] =  45 'bx100x0101x0000001000xx100x0101x0000001000xx10;
	cfgsin21[0:44] =  45 'b0x0101x0000100000xx100x1000x0000100000xx010x0;
	cfgsin22[0:44] =  45 'b011x0000000010xx010x1001x0000000001xx001x1001;
	cfgsin23[0:44] =  45 'bx0000010000xx001x0101x0000000001xx001x1001x00;
// BR
	cfgsin31[0:44] =  45 'b01001000xx100x0101x0001010000xx001x0101x00010;
	cfgsin30[0:44] =  45 'b01000xx100x0011x0001000100xx010x0011x00000010;
	cfgsin29[0:44] =  45 'b00xx100x0011x0000100000xx100x1000x0000000001x;
	cfgsin28[0:44] =  45 'bx001x1001x0000010000xx001x0101x0000010000xx00;
	cfgsin27[0:44] =  45 'b1x0101x0000100000xx100x1000x0000100000xx100x1;
	cfgsin26[0:44] =  45 'b000x0000001000xx100x0011x0000001000xx100x0101;
	cfgsin25[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx100x001x0000;
end
endtask
task get_wl_pat339; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000010000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000010000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000100000000000100000010000000001000;
	cfgsin5[0:44] =  45 'b000100010000000000000000001000000000000000000;
	cfgsin6[0:44] =  45 'b000000010000100001000000000000100000000100000;
	cfgsin7[0:44] =  45 'b000000000000000000000010010000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000101000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000010010010000000000000000000000001000;
	cfgsin13[0:44] =  45 'b000000100000000100000100100000000010100100100;
	cfgsin12[0:44] =  45 'b001010000001001000000000000000010000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000001000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b010000000000000000000010000000000000000000010;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000100000000000000;
	cfgsin23[0:44] =  45 'b000000010000000000000000000000000000010000000;
// BR
	cfgsin31[0:44] =  45 'b000001000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b010000000000001000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000100100000000000000000100000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat338; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x0110001101x;
	cfgsin1[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin2[0:44] =  45 'b0x0110x0110001101xx110x0110x0110000101xx110x0;
	cfgsin3[0:44] =  45 'b010x0110001101xx110x0100x0100001101xx110x0110;
	cfgsin4[0:44] =  45 'bx0110001001xx000x0000x0100101000xx101x0100x01;
	cfgsin5[0:44] =  45 'b01000000xx010x0100x0110001001xx110x0110x00100;
	cfgsin6[0:44] =  45 'b01101xx001x0001x0001010001xx000x0110x01000001;
	cfgsin7[0:44] =  45 'b00xx000x1010x0100001100xx001x1001x0101010011x;
// TR
	cfgsin15[0:44] =  45 'bx100x0001x0100010100xx110x0000x1010010011xx01;
	cfgsin14[0:44] =  45 'b0x1000x0100000100xx110x0101x0110010101xx000x0;
	cfgsin13[0:44] =  45 'b010x0100001100xx001x0001x0001010100xx000x0010;
	cfgsin12[0:44] =  45 'bx0000001100xx000x0110x0110001100xx110x0101x01;
	cfgsin11[0:44] =  45 'b10010101xx110x0110x0110001101xx110x0110x01100;
	cfgsin10[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000100000000000000000000100000000000000;
	cfgsin21[0:44] =  45 'b000001000000000000000000000000010000000000000;
	cfgsin22[0:44] =  45 'b000000100000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000100000000000000000000000000001;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000010000000010000000000001000;
	cfgsin30[0:44] =  45 'b000001001000000001000000000000000000000000000;
	cfgsin29[0:44] =  45 'b100000000000000000000000001000000000010000000;
	cfgsin28[0:44] =  45 'b100000000001000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000001010000000000000000001000000000100000000;
	cfgsin26[0:44] =  45 'b000000000001000010000000000000000100000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat337; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin1[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000000;
	cfgsin2[0:44] =  45 'b1x0110x001000110000000x0110x011000110000001x1;
	cfgsin3[0:44] =  45 'b010x001001010100000x0110x001001010010001x1010;
	cfgsin4[0:44] =  45 'bx011001010010010x1010x001001010000001x0101x01;
	cfgsin5[0:44] =  45 'b0001010000010x0010x011000110000010x0000x01000;
	cfgsin6[0:44] =  45 'b0100000000x0100x001000100000001x0000x00010001;
	cfgsin7[0:44] =  45 'b0000001x0110x001000110000001x0110x01100011000;
// TR
	cfgsin15[0:44] =  45 'b0000x0110x001000110000010x0101x01010101000001;
	cfgsin14[0:44] =  45 'b0x0000x011000101000000x1010x001001010000000x0;
	cfgsin13[0:44] =  45 'b100x011000101000000x0100x010100010000000x1000;
	cfgsin12[0:44] =  45 'bx010000000000001x0010x011000110000010x0110x01;
	cfgsin11[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin10[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001100xx110x0101x0110010101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx110x0110x0010001101xx110x0;
	cfgsin19[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x1010;
	cfgsin20[0:44] =  45 'bx0010001001xx110x0110x0010001001xx110x1010x00;
	cfgsin21[0:44] =  45 'b10001001xx110x0110x0110001101xx001x1001x01010;
	cfgsin22[0:44] =  45 'b10011xx001x0110x0101001101xx100x1010x01010010;
	cfgsin23[0:44] =  45 'b11xx100x0110x0100001101xx101x1010x0100001100x;
// BR
	cfgsin31[0:44] =  45 'bx001x0010x0101001100xx001x1000x0101010100xx00;
	cfgsin30[0:44] =  45 'b1x0100x0001001100xx010x1001x0110010101xx110x0;
	cfgsin29[0:44] =  45 'b000x0110001100xx110x0110x0010001101xx001x0110;
	cfgsin28[0:44] =  45 'bx0001001000xx010x0110x0110001001xx110x0110x01;
	cfgsin27[0:44] =  45 'b10001000xx110x1010x0110001001xx110x0010x01100;
	cfgsin26[0:44] =  45 'b01101xx110x0010x0010001101xx110x0010x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
end
endtask
task get_wl_pat336; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000100000000000001000000001000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b100000000000001000000000000000000001010000100;
	cfgsin6[0:44] =  45 'b001010000100000010000001000000000000001000100;
	cfgsin7[0:44] =  45 'b000000000000010000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000001000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b010000000000000000000000000100000000000000100;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000001;
	cfgsin12[0:44] =  45 'b000010000000000001000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100001000;
	cfgsin17[0:44] =  45 'b0010x0110x011001010000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x1010x011000110000001x0101x010100110000001x1;
	cfgsin19[0:44] =  45 'b001x000101010000010x1010x010000110000010x0110;
	cfgsin20[0:44] =  45 'bx101000001000010x0100x011000010000010x0110x01;
	cfgsin21[0:44] =  45 'b1000110000010x0110x011000110000000x0110x01100;
	cfgsin22[0:44] =  45 'b1010000000x0010x000001010000010x1000x01100100;
	cfgsin23[0:44] =  45 'b1000010x0110x001000110000000x0100x00100011000;
// BR
	cfgsin31[0:44] =  45 'b0000x0000x001000010000000x0010x00100011010000;
	cfgsin30[0:44] =  45 'b0x0000x100000101000000x0010x011001010000000x0;
	cfgsin29[0:44] =  45 'b000x011001010000001x0010x011000110000000x0100;
	cfgsin28[0:44] =  45 'bx010001010000001x0110x011000110000001x0110x01;
	cfgsin27[0:44] =  45 'b1000110000010x1010x010001010000010x0110x01100;
	cfgsin26[0:44] =  45 'b0110000010x1000x101001001000010x0010x01100011;
	cfgsin25[0:44] =  45 'b0000010x0110x010100110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000101x1001x10010100100x;
end
endtask
task get_wl_pat335; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000001000000000001000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000001000000000000000000000;
	cfgsin5[0:44] =  45 'b000000001000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000001000000000010000001001000000000;
	cfgsin7[0:44] =  45 'b010000000000000000000000000000000000000000001;
// TR
	cfgsin15[0:44] =  45 'b001000000000000000010000000000000000000000010;
	cfgsin14[0:44] =  45 'b000001000000000000001000000000000000000010000;
	cfgsin13[0:44] =  45 'b000100000000000000100001000000100000000100000;
	cfgsin12[0:44] =  45 'b000000100110000000000000000000010000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000001000000;
	cfgsin19[0:44] =  45 'b000100000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000010001000000010000000000001000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000101000100100000000000000010000000000;
	cfgsin23[0:44] =  45 'b000000000000010000000000000100010100000000000;
// BR
	cfgsin31[0:44] =  45 'b000101010000000000000001000000010000000000001;
	cfgsin30[0:44] =  45 'b001001000000000000000100000000000000000000000;
	cfgsin29[0:44] =  45 'b100000000000000000000100000000000000000100000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000010000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat334; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000001000100xx1xx1010000100000100xx1xx10001;
	cfgsin3[0:44] =  45 'b00000001100xx0xx1010000010000001xx0xx10100000;
	cfgsin4[0:44] =  45 'b10000001xx0xx1000100000010010xx1xx10100000010;
	cfgsin5[0:44] =  45 'b00010xx0xx1001000001000100xx1xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx0xx1001000100000100xx0xx1100000100000100x;
	cfgsin7[0:44] =  45 'bx0xx1010000001000100xx1xx1010000001000010xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1000100000100010xx0xx1010000000010100xx1xx00;
	cfgsin14[0:44] =  45 'b00100100000001xx1xx1000010100000010xx1xx00100;
	cfgsin13[0:44] =  45 'b00001000100xx1xx1000010010000100xx1xx10010000;
	cfgsin12[0:44] =  45 'b10000100xx0xx1000100100000100xx0xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000010000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000010000000000000001000010010000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000010000000000000000;
	cfgsin21[0:44] =  45 'b000000010000000000000000000000000100000000000;
	cfgsin22[0:44] =  45 'b000001010000000000000000000010000000000000000;
	cfgsin23[0:44] =  45 'b010000000000000000000010000000000000000000010;
// BR
	cfgsin31[0:44] =  45 'b010000000001000010010000000100000000000000010;
	cfgsin30[0:44] =  45 'b000000000100000010000000100000000000010011000;
	cfgsin29[0:44] =  45 'b010000000000010000000000000000000000000000001;
	cfgsin28[0:44] =  45 'b000100000010010000000000000000010010000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000001000001000000000000000;
	cfgsin26[0:44] =  45 'b000010000000001000000000010100000000000000000;
	cfgsin25[0:44] =  45 'b010000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000100000000000000000000000;
end
endtask
task get_wl_pat333; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000001000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx11;
	cfgsin2[0:44] =  45 'b00000001000010xx0xx1010000100000100xx0xx00000;
	cfgsin3[0:44] =  45 'b10001000010xx1xx0000100010000010xx1xx00100000;
	cfgsin4[0:44] =  45 'b00010010xx0xx0100000001000100xx0xx01000000000;
	cfgsin5[0:44] =  45 'b10001xx0xx1010000001000001xx0xx11000001000001;
	cfgsin6[0:44] =  45 'b00xx0xx0100000100000100xx0xx1001000000100100x;
	cfgsin7[0:44] =  45 'bx1xx1000010001000001xx1xx1100000001000001xx1x;
// TR
	cfgsin15[0:44] =  45 'bx0100000001000001xx1xx0100000001000010xx1xx10;
	cfgsin14[0:44] =  45 'b10000000010010xx1xx1010000001000100xx1xx11000;
	cfgsin13[0:44] =  45 'b00001000001xx1xx1010000010000010xx0xx00010000;
	cfgsin12[0:44] =  45 'b10000010xx1xx1100000100000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0100000001000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx1000010100000100xx0xx11000;
	cfgsin19[0:44] =  45 'b00100000010xx0xx1001000001000100xx0xx00100001;
	cfgsin20[0:44] =  45 'b00000100xx0xx1010000000010100xx0xx10100000010;
	cfgsin21[0:44] =  45 'b00100xx0xx1010000100000100xx1xx10010000000101;
	cfgsin22[0:44] =  45 'b00xx0xx0100000000010010xx1xx0001000000100010x;
	cfgsin23[0:44] =  45 'bx0xx1001000000100100xx0xx1000010100000100xx0x;
// BR
	cfgsin31[0:44] =  45 'bx0100000100000001xx0xx1100000001000010xx0xx00;
	cfgsin30[0:44] =  45 'b00010000010010xx0xx1100000001000100xx0xx00010;
	cfgsin29[0:44] =  45 'b00001000001xx0xx1000010000100100xx1xx10100000;
	cfgsin28[0:44] =  45 'b00100100xx0xx0001000001000100xx0xx01000000010;
	cfgsin27[0:44] =  45 'b00100xx1xx1000010000001100xx0xx10010000010001;
	cfgsin26[0:44] =  45 'b00xx0xx1010000100000100xx0xx0010000100000100x;
	cfgsin25[0:44] =  45 'bx0xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx0xx0010000100000100xx1xx;
end
endtask
task get_wl_pat332; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000001000100x01000010000100000100xx00;
	cfgsin1[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000000001001xx0000010000100000100xx10011000;
	cfgsin3[0:44] =  45 'b00010000001xx0000100000010000100xx00011000000;
	cfgsin4[0:44] =  45 'b10000100xx0001010000001000001xx00010000010010;
	cfgsin5[0:44] =  45 'b00100xx0000100000001000010xx00000100001000000;
	cfgsin6[0:44] =  45 'b10xx0010001000100000010xx0100010000100000010x;
	cfgsin7[0:44] =  45 'bx0000100000001000010xx0000010000001000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000001000100xx0001001000001000001xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000000001010xx00000100;
	cfgsin13[0:44] =  45 'b00001000001xx0000100000010000010xx10011000000;
	cfgsin12[0:44] =  45 'b10000010xx0000010000000001100xx00000100001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin10[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin9[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000001000100xx0xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx00;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx1100000100000100xx1xx00010;
	cfgsin19[0:44] =  45 'b00000001100xx1xx0010000001000010xx1xx10100001;
	cfgsin20[0:44] =  45 'b00000100xx1xx1100000100000100xx1xx11000000010;
	cfgsin21[0:44] =  45 'b00001xx1xx1010000100000100xx1xx00100000010000;
	cfgsin22[0:44] =  45 'b10xx1xx0000010001000100xx1xx0010000000100001x;
	cfgsin23[0:44] =  45 'bx0xx1100000001000001xx0xx1000100000010010xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1100000001000100xx0xx1010000000001100xx0xx11;
	cfgsin30[0:44] =  45 'b00000001000100xx0xx1010000000001001xx0xx00001;
	cfgsin29[0:44] =  45 'b00001000001xx1xx1100000010000001xx1xx10001001;
	cfgsin28[0:44] =  45 'b00000010xx0xx1100000001000001xx0xx10000100001;
	cfgsin27[0:44] =  45 'b00001xx0xx1010000010000001xx0xx10100000010000;
	cfgsin26[0:44] =  45 'b10xx1xx0100000100000100xx0xx0100000100000010x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
end
endtask
task get_wl_pat331; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000001000001xx1000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00100000010xx0001001000100000010xx00000000101;
	cfgsin4[0:44] =  45 'b00000001xx1000010000001000001xx01001000000010;
	cfgsin5[0:44] =  45 'b00100xx0000000001001000010xx00000010000010001;
	cfgsin6[0:44] =  45 'b00xx0000001000001000100xx0000001000010000001x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0000001000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b01010000001000010xx0000000001001000100xx00000;
	cfgsin14[0:44] =  45 'b00010001000001xx0000001000100000001xx00000000;
	cfgsin13[0:44] =  45 'b10001000010xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000010xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000001000100x01000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00010;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00011000;
	cfgsin19[0:44] =  45 'b00000010010xx0001100000000010001xx00000100001;
	cfgsin20[0:44] =  45 'b00000100xx0000010000100000001xx00000100000010;
	cfgsin21[0:44] =  45 'b00010xx0000010000100000100xx00011000000010000;
	cfgsin22[0:44] =  45 'b01xx0001001000000001001xx0001100000001000100x;
	cfgsin23[0:44] =  45 'bx0100001000001000010xx0100100000001000010xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000001000010xx0000000010000001001xx00000;
	cfgsin30[0:44] =  45 'b10000100000001xx0000000100000001010xx01011000;
	cfgsin29[0:44] =  45 'b00001000100xx0000100000100000010xx00001000000;
	cfgsin28[0:44] =  45 'b00100010xx0000000010001000001xx00000100000010;
	cfgsin27[0:44] =  45 'b00001xx1000100000001000010xx10001000001000000;
	cfgsin26[0:44] =  45 'b01xx0000010000100000100xx0100010000001000100x;
	cfgsin25[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
end
endtask
task get_wl_pat330; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000001000001xx0000001000100000100xx00000001;
	cfgsin3[0:44] =  45 'b00001000001xx0000000001010000100xx00000001000;
	cfgsin4[0:44] =  45 'b10000010xx0000001000000001001xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx1000000010001000001xx10000000101000001;
	cfgsin6[0:44] =  45 'b00xx1000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0000001000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00000001001000001xx0000000100001000001xx00000;
	cfgsin14[0:44] =  45 'b01000100000010xx0000001000100000010xx00000010;
	cfgsin13[0:44] =  45 'b00001000001xx0000000010000100010xx00000001000;
	cfgsin12[0:44] =  45 'b10000010xx0000010000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000001000001000001xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b00100100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00000100100xx0000000100001000001xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000001000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00001xx0000001000100000100xx00000000100010000;
	cfgsin22[0:44] =  45 'b01xx0000000010010000100xx0000001000001000001x;
	cfgsin23[0:44] =  45 'bx0000001000001000001xx0000001000010000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00000001001000010xx0000000010001000100xx00000;
	cfgsin30[0:44] =  45 'b00001000001100xx0100001000010000010xx00000001;
	cfgsin29[0:44] =  45 'b00001000010xx0000000100000001100xx00000000010;
	cfgsin28[0:44] =  45 'b01000001xx0100001000001000001xx00000010000010;
	cfgsin27[0:44] =  45 'b00100xx0000000100100000010xx00000010000010000;
	cfgsin26[0:44] =  45 'b01xx0010000010001000100xx0001001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
end
endtask
task get_wl_pat329; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000001000001xx0000001000100000100xx00000000;
	cfgsin3[0:44] =  45 'b10000010100xx0000100000000001100xx00000010000;
	cfgsin4[0:44] =  45 'b10000010xx0000000001001000010xx00000001000010;
	cfgsin5[0:44] =  45 'b00010xx0000001000010000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000000001100x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0000001000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000001000001xx1000010000001000001xx00000;
	cfgsin14[0:44] =  45 'b10000000100100xx0000001000100000010xx00000010;
	cfgsin13[0:44] =  45 'b00100000001xx0000001000001000010xx00000001000;
	cfgsin12[0:44] =  45 'b01000010xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00001000001000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b00100100000100xx0000001000100000100xx00000001;
	cfgsin19[0:44] =  45 'b00100000010xx0000000100001000001xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010000010;
	cfgsin21[0:44] =  45 'b00001xx0000001000100000100xx00000010000010000;
	cfgsin22[0:44] =  45 'b01xx0000010000100000010xx0000000100001000100x;
	cfgsin23[0:44] =  45 'bx0000001000001000001xx0000000010000010010xx00;
// BR
	cfgsin31[0:44] =  45 'b00000010100000001xx1000001000000001001xx10000;
	cfgsin30[0:44] =  45 'b01000001000001xx0000001000000001010xx00000010;
	cfgsin29[0:44] =  45 'b00001000001xx0000010000001000001xx00000010000;
	cfgsin28[0:44] =  45 'b00001010xx0000001000001000001xx10000010001000;
	cfgsin27[0:44] =  45 'b00001xx0000000100010000010xx00000000100010000;
	cfgsin26[0:44] =  45 'b01xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
end
endtask
task get_wl_pat328; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b00100001000010xx1000000100100000100xx00000010;
	cfgsin3[0:44] =  45 'b00001000001xx0000001000000010001xx10000001000;
	cfgsin4[0:44] =  45 'b00100001xx0000001000001000100xx00000000100010;
	cfgsin5[0:44] =  45 'b00100xx0000001000001000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000000100000001100x;
	cfgsin7[0:44] =  45 'bx0001000001001000100xx0100000100001000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000000001010xx0000000100001000010xx00000;
	cfgsin14[0:44] =  45 'b10000100000010xx0000001000000100010xx10000010;
	cfgsin13[0:44] =  45 'b00001000100xx0000100000000001100xx00000010000;
	cfgsin12[0:44] =  45 'b01000100xx0000001000001000010xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000001000001000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b00100100000100xx0000001000000001010xx00000000;
	cfgsin19[0:44] =  45 'b10000001001xx0000000010001000100xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000000100100000100xx00000010000010;
	cfgsin21[0:44] =  45 'b00001xx0000001000100000100xx00000100000010000;
	cfgsin22[0:44] =  45 'b01xx0000001000000001001xx0000000100001000100x;
	cfgsin23[0:44] =  45 'bx1000001000001000001xx0000010000000001010xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000000001100xx0000001000001000001xx00000;
	cfgsin30[0:44] =  45 'b10000000100001xx0000001000000100001xx00000001;
	cfgsin29[0:44] =  45 'b00000001100xx0000000010000010010xx00000010000;
	cfgsin28[0:44] =  45 'b10000010xx0000001000001000001xx00000010000010;
	cfgsin27[0:44] =  45 'b00010xx0000000010000010010xx00000010000010000;
	cfgsin26[0:44] =  45 'b10xx0000000010000100010xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000100000100x0000;
end
endtask
task get_wl_pat327; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx1000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx01000;
	cfgsin2[0:44] =  45 'b00100001000100xx0000000100100000100xx10001000;
	cfgsin3[0:44] =  45 'b00001000100xx0000100000010000100xx00001000000;
	cfgsin4[0:44] =  45 'b10000100xx0000000010001000010xx01010001000010;
	cfgsin5[0:44] =  45 'b00001xx1000010000001000001xx10010001001000001;
	cfgsin6[0:44] =  45 'b00xx0000000100100000100xx1001001000000001100x;
	cfgsin7[0:44] =  45 'bx0000000001001000001xx0000000100001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00000100001000100xx0001000100001000100xx10001;
	cfgsin14[0:44] =  45 'b00000000001100xx0000000010100000001xx00000010;
	cfgsin13[0:44] =  45 'b00001000001xx0100001000010000010xx10101000000;
	cfgsin12[0:44] =  45 'b10000010xx0100000010100000100xx01000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00010000001000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000000100100000100xx00000100;
	cfgsin19[0:44] =  45 'b00000010100xx0000001000001000010xx00000010001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000010000010;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000001000010000;
	cfgsin22[0:44] =  45 'b10xx0000001000000001010xx0000100000001000100x;
	cfgsin23[0:44] =  45 'bx0000100000001000100xx0000001000000001100xx00;
// BR
	cfgsin31[0:44] =  45 'b00000100000010100xx0000000010001000010xx00000;
	cfgsin30[0:44] =  45 'b10000001000100xx0000001000100000100xx00000000;
	cfgsin29[0:44] =  45 'b10001000100xx0000000100001000001xx00000010000;
	cfgsin28[0:44] =  45 'b01000100xx0000000100001000100xx00000010000000;
	cfgsin27[0:44] =  45 'b01100xx0000001000010000010xx00000010000010000;
	cfgsin26[0:44] =  45 'b01xx0000100000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
end
endtask
task get_wl_pat326; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx1001000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx0xx10;
	cfgsin2[0:44] =  45 'b01000000001001xx0xx1000100100000100xx0xx10001;
	cfgsin3[0:44] =  45 'b00000100010xx1xx1000001000100010xx0xx10010000;
	cfgsin4[0:44] =  45 'b00100010xx1xx1001000010000001xx0xx00010000100;
	cfgsin5[0:44] =  45 'b00001xx0xx1000100000001001xx0xx00010000001001;
	cfgsin6[0:44] =  45 'b00xx1xx1001000000100100xx0xx0000001000100100x;
	cfgsin7[0:44] =  45 'bx1xx0000001000001001xx0xx1001000100000001xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1000010100000001xx0xx0001000001000001xx0xx10;
	cfgsin14[0:44] =  45 'b00100000100010xx1xx1000100001000100xx0xx10010;
	cfgsin13[0:44] =  45 'b00010000001xx0xx1010000001000010xx0xx00100000;
	cfgsin12[0:44] =  45 'b01000010xx0xx1001000100000001xx0xx10010001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000010000001000001xx1000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00100;
	cfgsin18[0:44] =  45 'b01000100000100xx0001000100100000100xx00010010;
	cfgsin19[0:44] =  45 'b00000001001xx0000001000001000001xx10000010001;
	cfgsin20[0:44] =  45 'b00000100xx0001001000100000100xx00000010000010;
	cfgsin21[0:44] =  45 'b00001xx0000001000100000100xx00000001000010001;
	cfgsin22[0:44] =  45 'b00xx0001001000000001100xx0000000010001000010x;
	cfgsin23[0:44] =  45 'bx0000000010001000010xx0000000100100000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00000010000100010xx1000001000000001100xx00000;
	cfgsin30[0:44] =  45 'b01000010000001xx0000000100000001010xx01010001;
	cfgsin29[0:44] =  45 'b00001000001xx0101000010001000010xx00010010000;
	cfgsin28[0:44] =  45 'b00100010xx1010100000001000001xx00011000000000;
	cfgsin27[0:44] =  45 'b01001xx1000001000010000001xx10000010000010000;
	cfgsin26[0:44] =  45 'b10xx0000001000100000100xx0000001000100000001x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
end
endtask
task get_wl_pat325; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000001x00xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx11;
	cfgsin2[0:44] =  45 'b00000100000001x01xx1100000100000100x01xx10000;
	cfgsin3[0:44] =  45 'b10000001100x00xx1001000000100100x00xx10000010;
	cfgsin4[0:44] =  45 'b01000100x01xx1010000000001100x00xx10010000010;
	cfgsin5[0:44] =  45 'b00010x00xx1010000100000010x10xx10100001000000;
	cfgsin6[0:44] =  45 'b10x00xx1010000010000010x00xx1010000010000010x;
	cfgsin7[0:44] =  45 'b00xx1100000100000100x00xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1000010001000010x00xx1100000010000010x01xx00;
	cfgsin14[0:44] =  45 'b00010001000100x01xx0010000001000010x01xx00000;
	cfgsin13[0:44] =  45 'b10001000001x01xx0010000001000100x00xx10100000;
	cfgsin12[0:44] =  45 'b01000100x00xx1010000000100100x00xx10100001000;
	cfgsin11[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin10[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100x00xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx00;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx0001000100000100xx1xx00000;
	cfgsin19[0:44] =  45 'b01001000010xx1xx1100000001000100xx0xx10010001;
	cfgsin20[0:44] =  45 'b00000100xx1xx0001000100000100xx1xx10010000010;
	cfgsin21[0:44] =  45 'b00001xx1xx1001000100000100xx1xx10010000000010;
	cfgsin22[0:44] =  45 'b01xx1xx0001000100000001xx1xx1001000100000001x;
	cfgsin23[0:44] =  45 'bx0xx1001000000100001xx1xx1001000001000010xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1001000000001001xx0xx1000100100000001xx1xx11;
	cfgsin30[0:44] =  45 'b00000001000010xx1xx1000010000100001xx0xx00100;
	cfgsin29[0:44] =  45 'b00100000001xx0xx0001000000010100xx1xx00010000;
	cfgsin28[0:44] =  45 'b01000010xx0xx0001000010000001xx1xx00100000010;
	cfgsin27[0:44] =  45 'b00001xx0xx1100000001000100xx0xx10010000000011;
	cfgsin26[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000001000010x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0000001100000100x01xx;
end
endtask
task get_wl_pat324; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx1000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000001x00000100000100000100x000000000;
	cfgsin3[0:44] =  45 'b01001000010x00100010000000001001x010000100000;
	cfgsin4[0:44] =  45 'b10000001x00000010000000100010x000000100000100;
	cfgsin5[0:44] =  45 'b00100x10100010000010000100x010000100001000001;
	cfgsin6[0:44] =  45 'b00x01000010000010000100x00000100000010000001x;
	cfgsin7[0:44] =  45 'b01000100000100000010x00100010000100000010x000;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100x01000000010010000100x000010;
	cfgsin14[0:44] =  45 'b10000001000010x00010010000100000010x000010001;
	cfgsin13[0:44] =  45 'b00010000001x00000010000001000001x001000100000;
	cfgsin12[0:44] =  45 'b01000001x00000010000100000100x010000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000001x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000100x01xx1010000000001010x00xx10010;
	cfgsin19[0:44] =  45 'b00000001001x00xx1001000000100100x00xx00100001;
	cfgsin20[0:44] =  45 'b00000100x01xx0010000100000010x00xx10100001000;
	cfgsin21[0:44] =  45 'b00010x01xx1010000100000100x00xx10100001000000;
	cfgsin22[0:44] =  45 'b10x01xx1010000010000010x00xx0010000100000100x;
	cfgsin23[0:44] =  45 'b00xx0010000001000100x00xx1010000001000100x00x;
// BR
	cfgsin31[0:44] =  45 'bx1010000000010010x00xx1000010100000100x01xx00;
	cfgsin30[0:44] =  45 'b10000001000001x00xx0010000001000100x00xx10010;
	cfgsin29[0:44] =  45 'b00000100010x00xx1000001001000001x01xx10100000;
	cfgsin28[0:44] =  45 'b01000100x01xx1010000010000100x01xx10100000010;
	cfgsin27[0:44] =  45 'b00010x00xx1001000001000100x00xx10010000000010;
	cfgsin26[0:44] =  45 'b01x00xx0010000000001010x00xx0010000100000100x;
	cfgsin25[0:44] =  45 'b00xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000001x01x0;
end
endtask
task get_wl_pat323; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000001xx0000100000100000100x100;
	cfgsin1[0:44] =  45 'b00100000100000100x10000100000100000100x100000;
	cfgsin2[0:44] =  45 'b10000100000001x10000100000100000100x100000100;
	cfgsin3[0:44] =  45 'b00100000001x10000100000001000010x100001000001;
	cfgsin4[0:44] =  45 'b00000010x10000010000100000001x100000100000000;
	cfgsin5[0:44] =  45 'b10001x10000010000000010001x100001000000000100;
	cfgsin6[0:44] =  45 'b01x10000100000100000001x10100100000100000100x;
	cfgsin7[0:44] =  45 'b10000010000010000001x10000010000010000001x100;
// TR
	cfgsin15[0:44] =  45 'b00010000000010001x10000010000100000001x100001;
	cfgsin14[0:44] =  45 'b00000100000001x10000000100001000010x100000100;
	cfgsin13[0:44] =  45 'b00010000001x10010000010001000010x100000010000;
	cfgsin12[0:44] =  45 'b01000010x10100001000100000100x100000100001000;
	cfgsin11[0:44] =  45 'b00100x10000010000100000100x100000100001000001;
	cfgsin10[0:44] =  45 'b00x10000010000100000100x10000010000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000010000100000010x000000100;
	cfgsin19[0:44] =  45 'b00000100100x00000000001000100010x010010100001;
	cfgsin20[0:44] =  45 'b00000100x00001000010100000100x000000000011000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x010000100001000001;
	cfgsin22[0:44] =  45 'b00x00000010000100000001x00001001000000001010x;
	cfgsin23[0:44] =  45 'b01010010000100000010x00000010000000001001x000;
// BR
	cfgsin31[0:44] =  45 'b00000010010000100x01000010000100000010x000010;
	cfgsin30[0:44] =  45 'b10000000001010x00001010000100000001x000000000;
	cfgsin29[0:44] =  45 'b10100000100x01000010000100000100x100000100000;
	cfgsin28[0:44] =  45 'b01000010x00000010000010000010x000000100000010;
	cfgsin27[0:44] =  45 'b00100x10000010000100000001x000000000100010000;
	cfgsin26[0:44] =  45 'b01x00001000010100000100x00001001000000001100x;
	cfgsin25[0:44] =  45 'b01000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001000100100000100xx00x;
end
endtask
task get_wl_pat322; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000001x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00010000001x00000100000001000010x000000100000;
	cfgsin4[0:44] =  45 'b01000010x00000010000000001001x010000100000001;
	cfgsin5[0:44] =  45 'b00010x10000001000010000001x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000010000100x00000100000010000100x;
	cfgsin7[0:44] =  45 'b00000010000100000001x00000010000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000001x00000010000010000001x000000;
	cfgsin14[0:44] =  45 'b10000001000010x00000010000001000010x000001000;
	cfgsin13[0:44] =  45 'b00000001010x00000100000001000001x100001000000;
	cfgsin12[0:44] =  45 'b00100100x00000100000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000001xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100000;
	cfgsin18[0:44] =  45 'b10000100000100x10000010000001000010x100000100;
	cfgsin19[0:44] =  45 'b00001000010x10000010000100000001x100000100001;
	cfgsin20[0:44] =  45 'b00000100x10000100000001000001x100000100000100;
	cfgsin21[0:44] =  45 'b00001x10000010000100000100x100000100000000100;
	cfgsin22[0:44] =  45 'b01x10000010000000010100x10000010000010000001x;
	cfgsin23[0:44] =  45 'b10000010000010000001x10000001000001000010x100;
// BR
	cfgsin31[0:44] =  45 'b00010000100000001x10000010000010000001x100000;
	cfgsin30[0:44] =  45 'b10000010000100x10000001000001000010x100000100;
	cfgsin29[0:44] =  45 'b00100000001x10000010000001000010x100001000001;
	cfgsin28[0:44] =  45 'b00000001x10000010000100000001x100000100000100;
	cfgsin27[0:44] =  45 'b00001x10000000010001000010x100000100001000000;
	cfgsin26[0:44] =  45 'b01x11000100000000010001x10100000010100000100x;
	cfgsin25[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat321; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000001x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00000100100x10000100000000010100x100000000010;
	cfgsin4[0:44] =  45 'b01000010x00000010000000010010x000000100001000;
	cfgsin5[0:44] =  45 'b00001x00010010000000100001x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000010000100x00000010000010000100x;
	cfgsin7[0:44] =  45 'b00001100000100000001x00000100000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00010000000001001x00000010000010000001x000000;
	cfgsin14[0:44] =  45 'b10000000001100x00000010000001000010x000001000;
	cfgsin13[0:44] =  45 'b00100000001x01000100000000010010x000010000010;
	cfgsin12[0:44] =  45 'b10000010x10000100000000010100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000100000001000100x001000100;
	cfgsin19[0:44] =  45 'b00001000010x01000010000010000001x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x010000100001000;
	cfgsin21[0:44] =  45 'b00001x00000010000100000100x000000100001000000;
	cfgsin22[0:44] =  45 'b01x00000100000100000100x01000010000100000001x;
	cfgsin23[0:44] =  45 'b00000010000001000001x01000100000001000001x110;
// BR
	cfgsin31[0:44] =  45 'b00010000000100100x00000010000001000010x000000;
	cfgsin30[0:44] =  45 'b10000000001100x01000100000001000010x010000100;
	cfgsin29[0:44] =  45 'b00000001001x00000000001000001100x100000010000;
	cfgsin28[0:44] =  45 'b01000001x10000100000010000001x000000100000000;
	cfgsin27[0:44] =  45 'b01100x01000010000001000010x010000100000100000;
	cfgsin26[0:44] =  45 'b01x00000010000100000100x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat320; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000001x01000100000100000100x000000000;
	cfgsin3[0:44] =  45 'b01010000001x00000000010001000010x000000100000;
	cfgsin4[0:44] =  45 'b01000010x00000010000010000010x000000100000000;
	cfgsin5[0:44] =  45 'b01001x01000000010010000001x010001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000010000100x00000010000000001100x;
	cfgsin7[0:44] =  45 'b00000010000100000001x00000010000100000001x010;
// TR
	cfgsin15[0:44] =  45 'b00100000000001001x00000100000010000001x000000;
	cfgsin14[0:44] =  45 'b00010001000010x00000000001001000010x000001000;
	cfgsin13[0:44] =  45 'b00010000100x10000001000001000010x000001000000;
	cfgsin12[0:44] =  45 'b01000100x00000100000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000100000001000100x100010100;
	cfgsin19[0:44] =  45 'b00000001100x10000000001000001010x100000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000010000011000;
	cfgsin21[0:44] =  45 'b00001x00000010000100000100x000000100001000000;
	cfgsin22[0:44] =  45 'b01x00000000001100000100x00100100000000100001x;
	cfgsin23[0:44] =  45 'b00000100000001000001x00000010000000010010x001;
// BR
	cfgsin31[0:44] =  45 'b00001000001000100x10000100000000100100x000001;
	cfgsin30[0:44] =  45 'b00000100000001x00000010000000001001x000000000;
	cfgsin29[0:44] =  45 'b10010000100x00001010000001000001x010000100000;
	cfgsin28[0:44] =  45 'b01000010x01000100000000100100x000000010001000;
	cfgsin27[0:44] =  45 'b00010x10000010000001000100x000000000010000100;
	cfgsin26[0:44] =  45 'b10x00000010000001000100x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000001000001x0000;
end
endtask
task get_wl_pat319; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000001001000001000100000100x000;
	cfgsin1[0:44] =  45 'b00001000100000100x00000001000100000100x000000;
	cfgsin2[0:44] =  45 'b01000000001001x00000001000100000100x000000000;
	cfgsin3[0:44] =  45 'b01010000001x01000001000100000100x000000000010;
	cfgsin4[0:44] =  45 'b01000100x00000000100000001001x000011000000000;
	cfgsin5[0:44] =  45 'b01001x00000100000010000001x100011000000000011;
	cfgsin6[0:44] =  45 'b00x00001100000000001100x00001010000010000001x;
	cfgsin7[0:44] =  45 'b00000001000100000001x00000000010000001001x000;
// TR
	cfgsin15[0:44] =  45 'b00010000000001010x00001001000000001100x110100;
	cfgsin14[0:44] =  45 'b10000001000100x10000010000001000100x000000010;
	cfgsin13[0:44] =  45 'b00000001100x00001000001001000100x010000010000;
	cfgsin12[0:44] =  45 'b01000100x00000001000000001010x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000000000010010000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000100000001000010x000000100;
	cfgsin19[0:44] =  45 'b00001000010x00000010000000100001x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00001x00000010000100000100x000001000001000000;
	cfgsin22[0:44] =  45 'b01x00000010000000001100x00000001000001000001x;
	cfgsin23[0:44] =  45 'b00000001000001000001x00000010000000100010x000;
// BR
	cfgsin31[0:44] =  45 'b00100000000001100x10000000010000001001x001000;
	cfgsin30[0:44] =  45 'b00001000001010x00000001000010000100x010001000;
	cfgsin29[0:44] =  45 'b00000010010x00000100000010000010x000000010000;
	cfgsin28[0:44] =  45 'b01000010x00000001000010000100x000000100000001;
	cfgsin27[0:44] =  45 'b00100x00000001000001000100x000000100001000001;
	cfgsin26[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100x0000;
end
endtask
task get_wl_pat318; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1001000100000100x01x;
	cfgsin1[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin2[0:44] =  45 'b01000100000001x00xx1001000100000100x01xx11000;
	cfgsin3[0:44] =  45 'b00000001010x00xx1010000000100001x01xx10100000;
	cfgsin4[0:44] =  45 'b00100010x11xx1100000000001100x01xx00010000010;
	cfgsin5[0:44] =  45 'b00010x00xx0001000001000100x00xx00100000010001;
	cfgsin6[0:44] =  45 'b00x01xx0000001001000100x01xx0000010001000100x;
	cfgsin7[0:44] =  45 'b01xx0010000010000001x01xx1010000000100001x00x;
// TR
	cfgsin15[0:44] =  45 'bx1010000000010001x01xx0000010001000001x00xx01;
	cfgsin14[0:44] =  45 'b00000000001001x01xx1010000000001010x01xx10000;
	cfgsin13[0:44] =  45 'b01010000100x00xx0010000001000010x10xx00001000;
	cfgsin12[0:44] =  45 'b10000001x11xx1010000001000100x01xx10100001000;
	cfgsin11[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin10[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000001001000100000100000100x000;
	cfgsin17[0:44] =  45 'b00010000100000100x00000100000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00001010000000001010x000001000;
	cfgsin19[0:44] =  45 'b00001000001x00010001000000100001x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00001100000000001100x000001000000000;
	cfgsin21[0:44] =  45 'b01001x00000001000100000100x000000100001000000;
	cfgsin22[0:44] =  45 'b01x00001001000100000001x00010010000100000010x;
	cfgsin23[0:44] =  45 'b00000010000000001001x00100010000001000100x000;
// BR
	cfgsin31[0:44] =  45 'b00001000000001001x01000001000001000001x000000;
	cfgsin30[0:44] =  45 'b00010000001100x10000001000001000100x000010100;
	cfgsin29[0:44] =  45 'b00001000010x10000000010010000010x000010100000;
	cfgsin28[0:44] =  45 'b01000010x00001010000000001001x000001000000010;
	cfgsin27[0:44] =  45 'b00001x00000001000001000010x010000000011000000;
	cfgsin26[0:44] =  45 'b01x00100100000000001100x00100010000000001100x;
	cfgsin25[0:44] =  45 'b00000001000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000010100001000001000000x;
end
endtask
task get_wl_pat317; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000001xx0xx1001000100000100x01x;
	cfgsin1[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin2[0:44] =  45 'b01000100000001x01xx1001000100000100x01xx00100;
	cfgsin3[0:44] =  45 'b00000001100x00xx1100000000001010x00xx01000000;
	cfgsin4[0:44] =  45 'b10000010x00xx0001000010000010x00xx00001000001;
	cfgsin5[0:44] =  45 'b00100x01xx0010000010000010x01xx10100000010001;
	cfgsin6[0:44] =  45 'b00x01xx1001000001000100x01xx1010000001000100x;
	cfgsin7[0:44] =  45 'b01xx1010000010000001x00xx1010000010000001x00x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000001x01xx0010000000001001x01xx00;
	cfgsin14[0:44] =  45 'b10000010000010x00xx1010000100000010x00xx10100;
	cfgsin13[0:44] =  45 'b00010000010x01xx1100000010000001x01xx01000000;
	cfgsin12[0:44] =  45 'b00010010x01xx0010000001000100x01xx10100001000;
	cfgsin11[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin10[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x0xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000100x01xx0010000001000001x01xx00100;
	cfgsin19[0:44] =  45 'b00000100010x01xx0100000010000010x01xx10100001;
	cfgsin20[0:44] =  45 'b00000100x01xx0010000001000100x01xx00010000100;
	cfgsin21[0:44] =  45 'b00001x01xx1001000100000100x01xx10100001000000;
	cfgsin22[0:44] =  45 'b01x01xx0001000000001100x00xx0010000000010001x;
	cfgsin23[0:44] =  45 'b01xx1000001100000001x00xx1010000100000001x00x;
// BR
	cfgsin31[0:44] =  45 'bx1000010100000100x00xx1010000001000010x00xx10;
	cfgsin30[0:44] =  45 'b01000000001010x01xx1000001001000010x00xx00010;
	cfgsin29[0:44] =  45 'b00001000001x01xx0000001000001001x00xx01000001;
	cfgsin28[0:44] =  45 'b00000001x00xx0100000100000100x01xx10010000100;
	cfgsin27[0:44] =  45 'b00010x01xx1010000000010001x00xx10100000100001;
	cfgsin26[0:44] =  45 'b00x00xx1010000001000010x00xx1010000001000100x;
	cfgsin25[0:44] =  45 'b01xx1001000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx00100001000000010x1x0;
end
endtask
task get_wl_pat316; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000000100001xx0000100000100000100xx00010100;
	cfgsin3[0:44] =  45 'b00100000001xx0100010000001000010xx10100100001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000010000001xx10000100000100;
	cfgsin5[0:44] =  45 'b00001xx0010001000001000001xx00000010000010001;
	cfgsin6[0:44] =  45 'b00xx0000001000001000100xx0000001000001000100x;
	cfgsin7[0:44] =  45 'bx0000010000010000001xx1000010000010000001xx10;
// TR
	cfgsin15[0:44] =  45 'b00100000000100010xx0001001000100000001xx00000;
	cfgsin14[0:44] =  45 'b00001001000010xx1000100000000100010xx01000000;
	cfgsin13[0:44] =  45 'b10010000001xx0000001000001000100xx00010000010;
	cfgsin12[0:44] =  45 'b10000001xx0000001000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000001xx0xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx1100000100000100x01xx00;
	cfgsin18[0:44] =  45 'b10000100000100x01xx0010000001000100x01xx00100;
	cfgsin19[0:44] =  45 'b00000010100x01xx0010000000001100x00xx00100001;
	cfgsin20[0:44] =  45 'b00000100x00xx1010000001000100x01xx10100000100;
	cfgsin21[0:44] =  45 'b00001x01xx1001000100000100x01xx00100001000000;
	cfgsin22[0:44] =  45 'b01x01xx0001000000010100x01xx0010000001000001x;
	cfgsin23[0:44] =  45 'b01xx0010000100000001x01xx1010000100000010x00x;
// BR
	cfgsin31[0:44] =  45 'bx1100000000100010x01xx1010000000001100x10xx10;
	cfgsin30[0:44] =  45 'b00001100000001x00xx1010000001000001x00xx00100;
	cfgsin29[0:44] =  45 'b00000001100x00xx0010000001000100x00xx10010001;
	cfgsin28[0:44] =  45 'b00000100x11xx1010000100000010x01xx10000100000;
	cfgsin27[0:44] =  45 'b01100x01xx0100000000010100x01xx00100000100000;
	cfgsin26[0:44] =  45 'b10x01xx0010000001000001x01xx0010000001000100x;
	cfgsin25[0:44] =  45 'b01xx1001000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000010xx1xx;
end
endtask
task get_wl_pat315; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000001xx0000100000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00000010001xx0000100000000010100xx00000000010;
	cfgsin4[0:44] =  45 'b00010010xx0010000010100000001xx00000000011000;
	cfgsin5[0:44] =  45 'b00010xx0000000010100000001xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0000010000100000001xx0000010000100000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000010000001xx0000000010010000001xx00000;
	cfgsin14[0:44] =  45 'b00100000001010xx0000010000100000010xx00001000;
	cfgsin13[0:44] =  45 'b00010000001xx0000000001000100010xx00000000010;
	cfgsin12[0:44] =  45 'b00100010xx0000001000001000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00011;
	cfgsin18[0:44] =  45 'b00000100000100xx0010000100001000010xx00010000;
	cfgsin19[0:44] =  45 'b10010000100xx0000010000001000001xx01001000001;
	cfgsin20[0:44] =  45 'b00000100xx1000001000001000100xx00000100000100;
	cfgsin21[0:44] =  45 'b00001xx0000100000100000100xx00011000000001000;
	cfgsin22[0:44] =  45 'b01xx0000001000000010001xx0000100000100000001x;
	cfgsin23[0:44] =  45 'bx0000100000100000001xx0000100000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00000100001000010xx0000000010000100001xx00000;
	cfgsin30[0:44] =  45 'b00100001000010xx1000100000001000100xx00010000;
	cfgsin29[0:44] =  45 'b01100000100xx0001100000000001001xx00001000001;
	cfgsin28[0:44] =  45 'b00000010xx0000000001100000001xx00000010000100;
	cfgsin27[0:44] =  45 'b00100xx0001100000001000010xx00000010000010000;
	cfgsin26[0:44] =  45 'b01xx0001001000001000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat314; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx001x001xx0000100000xx100x100xx00;
	cfgsin1[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin2[0:44] =  45 'b00000xx010x001xx0000100000xx100x100xx00000001;
	cfgsin3[0:44] =  45 'b00xx100x100xx0000000001xx100x001xx0000001000x;
	cfgsin4[0:44] =  45 'bx100x001xx1000010000xx010x001xx0001000010xx01;
	cfgsin5[0:44] =  45 'b0x100xx0000000100xx100x100xx0000001000xx010x1;
	cfgsin6[0:44] =  45 'b00xx0000001000xx010x100xx0000001000xx001x010x;
	cfgsin7[0:44] =  45 'bx0000010000xx100x001xx0000010000xx010x001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000xx010x100xx0000000100xx010x100xx00010;
	cfgsin14[0:44] =  45 'b00010xx001x100xx0000100000xx100x001xx00000010;
	cfgsin13[0:44] =  45 'b00xx010x100xx0000100000xx010x001xx0000100000x;
	cfgsin12[0:44] =  45 'bx010x100xx0010001000xx010x001xx0000100000xx10;
	cfgsin11[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin10[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000000001100000010xx00000010;
	cfgsin19[0:44] =  45 'b00100000010xx0001000100100000001xx00011000001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000100000100xx00000100001000;
	cfgsin21[0:44] =  45 'b00001xx0000100000100000100xx00001000000100000;
	cfgsin22[0:44] =  45 'b01xx0000001000001000100xx0000100000010000001x;
	cfgsin23[0:44] =  45 'bx0000100000010000001xx0000000001000001001xx00;
// BR
	cfgsin31[0:44] =  45 'b00000010010000001xx0000001000100000100xx10000;
	cfgsin30[0:44] =  45 'b00010001000001xx0000001000000001100xx01000001;
	cfgsin29[0:44] =  45 'b00010000001xx0000000010010000001xx10000000100;
	cfgsin28[0:44] =  45 'b00001001xx0000000100010000001xx00000001001000;
	cfgsin27[0:44] =  45 'b00001xx0000000100010000010xx00001000000100000;
	cfgsin26[0:44] =  45 'b01xx0000001000100000100xx0000001000001000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000000100100000001x0000;
end
endtask
task get_wl_pat313; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx001x001x00000100000xx100x1000x00;
	cfgsin1[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin2[0:44] =  45 'b00000xx001x0101x0000100000xx100x1000x00100000;
	cfgsin3[0:44] =  45 'b01xx001x1001x0000000001xx010x1001x0000000001x;
	cfgsin4[0:44] =  45 'bx010x1001x0000010000xx001x0101x0000010000xx00;
	cfgsin5[0:44] =  45 'b1x0101x0000000001xx001x1001x0000001000xx100x0;
	cfgsin6[0:44] =  45 'b101x0000001000xx100x0101x0000001000xx100x0011;
	cfgsin7[0:44] =  45 'bx0000000001xx001x1001x0001010000xx001x0101x00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx001x0101x0001001000xx001x0101x00010;
	cfgsin14[0:44] =  45 'b00001xx010x1001x0000000001xx010x1001x10000100;
	cfgsin13[0:44] =  45 'b00xx001x0101x0000000001xx010x1001x0000000001x;
	cfgsin12[0:44] =  45 'bx010x1001x0000001000xx100x0101x0000100000xx10;
	cfgsin11[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin10[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000100000xx010x001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx100x100xx0000100000xx010x010xx00000000;
	cfgsin19[0:44] =  45 'b01xx010x001xx0000010000xx001x001xx0000100000x;
	cfgsin20[0:44] =  45 'bx100x100xx0000001000xx010x100xx0000010000xx01;
	cfgsin21[0:44] =  45 'b0x001xx0000100000xx100x100xx0000100000xx100x0;
	cfgsin22[0:44] =  45 'b01xx0001001000xx001x010xx0010100000xx100x010x;
	cfgsin23[0:44] =  45 'bx0010100000xx010x001xx0000000001xx010x010xx10;
// BR
	cfgsin31[0:44] =  45 'b00000001xx001x100xx0000000010xx100x010xx00000;
	cfgsin30[0:44] =  45 'b10000xx010x100xx0000001000xx100x100xx00000000;
	cfgsin29[0:44] =  45 'b01xx010x010xx1000000100xx100x100xx0000010000x;
	cfgsin28[0:44] =  45 'bx010x100xx0000100000xx001x001xx0000001000xx01;
	cfgsin27[0:44] =  45 'b0x010xx0000000010xx010x010xx0010010000xx100x0;
	cfgsin26[0:44] =  45 'b01xx0000001000xx100x100xx0010001000xx010x100x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx001x001xx00x;
end
endtask
task get_wl_pat312; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000001000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b001000000000010000000000000000000100000000000;
	cfgsin4[0:44] =  45 'b000010000000000000000000000001010000000000000;
	cfgsin5[0:44] =  45 'b000000000010000000000000010000000000000001000;
	cfgsin6[0:44] =  45 'b000000000000010000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b001000000000000000000010001000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000001000000000100001000000000000010000000000;
	cfgsin14[0:44] =  45 'b000000000000000000101000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000001000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x001x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin18[0:44] =  45 'b00000xx100x1000x0000001000xx100x0101x00000100;
	cfgsin19[0:44] =  45 'b00xx010x0011x1001000001xx001x1001x0000100000x;
	cfgsin20[0:44] =  45 'bx100x1000x0000001000xx100x0101x0000010000xx00;
	cfgsin21[0:44] =  45 'b1x0101x0000100000xx100x1000x0000000001xx001x1;
	cfgsin22[0:44] =  45 'b001x0000001000xx100x0011x0000000001xx001x1001;
	cfgsin23[0:44] =  45 'bx0000100000xx001x0101x0000000001xx010x1001x00;
// BR
	cfgsin31[0:44] =  45 'b00001000xx100x0101x1000010000xx010x0011x00100;
	cfgsin30[0:44] =  45 'b01000xx100x0101x0000010000xx010x0011x00000000;
	cfgsin29[0:44] =  45 'b01xx001x1001x0010000001xx001x1001x0001000001x;
	cfgsin28[0:44] =  45 'bx010x1001x0000100000xx001x0101x0000010000xx01;
	cfgsin27[0:44] =  45 'b0x0011x0001000001xx010x1001x0000000001xx001x1;
	cfgsin26[0:44] =  45 'b001x0000001000xx100x0101x0000001000xx100x0101;
	cfgsin25[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx001x001x0000;
end
endtask
task get_wl_pat311; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000000010;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b100000000000000000000100000000000001010000100;
	cfgsin4[0:44] =  45 'b000000000000100000100100000000000010000100000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000001000000000000000;
	cfgsin6[0:44] =  45 'b000100000000000000000000000010000000000000000;
	cfgsin7[0:44] =  45 'b000001000000000000000000000000100000000000000;
// TR
	cfgsin15[0:44] =  45 'b000100000000000000000000000000000000100010000;
	cfgsin14[0:44] =  45 'b000000000000000000000000100000100000000100000;
	cfgsin13[0:44] =  45 'b000000000000010000001010000001000001000000000;
	cfgsin12[0:44] =  45 'b000000000010000000000000000000001000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b001000000000000000001000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000100000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000100000000000000000;
// BR
	cfgsin31[0:44] =  45 'b001000000010000000000000000000100000000010000;
	cfgsin30[0:44] =  45 'b000000000000000000000010000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000010000000001;
	cfgsin28[0:44] =  45 'b010000000000000001000000000100000000001000010;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat310; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x0110001101x;
	cfgsin1[0:44] =  45 'bx110x0110x0110001101xx110x0101x0110001101xx00;
	cfgsin2[0:44] =  45 'b1x0110x0100001101xx101x0110x0101001101xx010x0;
	cfgsin3[0:44] =  45 'b000x0110001100xx110x0010x0110001000xx001x0010;
	cfgsin4[0:44] =  45 'bx0100001101xx010x0010x0010001000xx001x0010x01;
	cfgsin5[0:44] =  45 'b01010101xx010x0110x0110000100xx110x0101x00100;
	cfgsin6[0:44] =  45 'b01001xx101x0100x0110010101xx001x0101x01010101;
	cfgsin7[0:44] =  45 'b00xx100x0110x0101001100xx000x0010x0101001011x;
// TR
	cfgsin15[0:44] =  45 'bx100x0010x0101000100xx001x1001x0100000100xx01;
	cfgsin14[0:44] =  45 'b0x0110x1010001011xx000x0010x0100001100xx010x0;
	cfgsin13[0:44] =  45 'b110x1010001010xx110x0000x0110000100xx110x1010;
	cfgsin12[0:44] =  45 'bx0110001100xx110x0100x0110001100xx110x0110x01;
	cfgsin11[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin10[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000010000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000100000010000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000100000000000000000000000010000000000000;
	cfgsin22[0:44] =  45 'b000000100000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000001;
// BR
	cfgsin31[0:44] =  45 'b010000110000000001000100000000000000000000000;
	cfgsin30[0:44] =  45 'b000000001000000000100000100000010000010000000;
	cfgsin29[0:44] =  45 'b000000000000001000000000000100000000000000000;
	cfgsin28[0:44] =  45 'b000000000110010000000000000000001100000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000010000010000000000;
	cfgsin26[0:44] =  45 'b000000000000010001000001000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat309; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin1[0:44] =  45 'b0010x0110x011000110000000x0110x10100010100001;
	cfgsin2[0:44] =  45 'b0x0100x011000010000010x0110x011000110000000x0;
	cfgsin3[0:44] =  45 'b010x001000010010010x1000x100001000000000x0010;
	cfgsin4[0:44] =  45 'bx001000110010010x0100x011000010000010x1010x01;
	cfgsin5[0:44] =  45 'b1000010000010x0000x011000010000010x0100x01000;
	cfgsin6[0:44] =  45 'b0010000001x0000x001000100000010x0010x01100011;
	cfgsin7[0:44] =  45 'b0000000x0101x000000110000001x0101x01010001000;
// TR
	cfgsin15[0:44] =  45 'b0001x0110x011000110000000x0110x01010011000000;
	cfgsin14[0:44] =  45 'b0x0000x010000100000000x0101x000100110010000x0;
	cfgsin13[0:44] =  45 'b101x001001000000000x0010x000000010000010x0100;
	cfgsin12[0:44] =  45 'bx010100110000010x0010x010100110000010x0110x01;
	cfgsin11[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin10[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x1010x0110001101xx010x0110x0101001101xx110x1;
	cfgsin19[0:44] =  45 'b000x0101010100xx010x0010x0100001100xx110x0110;
	cfgsin20[0:44] =  45 'bx1010001101xx110x0101x0110010011xx110x0110x01;
	cfgsin21[0:44] =  45 'b10001001xx110x0110x0110001101xx001x0110x01010;
	cfgsin22[0:44] =  45 'b01011xx000x1001x1010010101xx110x1010x10100010;
	cfgsin23[0:44] =  45 'b11xx110x0110x0110001101xx100x0110x0110001100x;
// BR
	cfgsin31[0:44] =  45 'bx000x0000x0001001000xx001x0100x0101001100xx01;
	cfgsin30[0:44] =  45 'b0x0110x0010001101xx000x0010x0100001100xx101x1;
	cfgsin29[0:44] =  45 'b001x0101010100xx010x0110x0100001100xx010x0100;
	cfgsin28[0:44] =  45 'bx0010001000xx001x0010x0101000100xx010x0010x00;
	cfgsin27[0:44] =  45 'b01001101xx010x1010x0110001100xx110x0010x01100;
	cfgsin26[0:44] =  45 'b01101xx110x1000x0010001001xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001011x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001110001xx;
end
endtask
task get_wl_pat308; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000100000000000000000000;
	cfgsin2[0:44] =  45 'b000010000000000000000000000000000000000000101;
	cfgsin3[0:44] =  45 'b000010000010000000000000000000000000001001000;
	cfgsin4[0:44] =  45 'b010000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000010000000001000000000000000000000010000100;
	cfgsin6[0:44] =  45 'b100000000000100100000001000000001000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000001000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000100000000000000000001;
	cfgsin14[0:44] =  45 'b001001000010001000001000000001000000000000000;
	cfgsin13[0:44] =  45 'b000001000000000000101000100010010000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000100000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x10100101000;
	cfgsin17[0:44] =  45 'b0010x0110x100000101000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x0100x011000010000010x0010x011000110000010x0;
	cfgsin19[0:44] =  45 'b101x010100010000001x0010x010000100000010x0110;
	cfgsin20[0:44] =  45 'bx011000110000010x0110x011000100000010x0101x10;
	cfgsin21[0:44] =  45 'b0100100000010x0110x000000100000001x0100x00010;
	cfgsin22[0:44] =  45 'b0110000000x0010x100000100000010x0100x01100011;
	cfgsin23[0:44] =  45 'b0000001x0110x000100110000000x0001x01000011000;
// BR
	cfgsin31[0:44] =  45 'b0000x0000x011000100000000x0000x00000011000000;
	cfgsin30[0:44] =  45 'b1x0000x000100100000010x0100x001000110100010x0;
	cfgsin29[0:44] =  45 'b110x010000101000000x0010x001000010000001x0000;
	cfgsin28[0:44] =  45 'bx011001010000000x0101x010000100000000x0100x01;
	cfgsin27[0:44] =  45 'b0100100000010x0010x000001010000010x0000x00000;
	cfgsin26[0:44] =  45 'b0110000010x0110x011000110000010x0110x10100011;
	cfgsin25[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x101000101000101x1001x10010100100x;
end
endtask
task get_wl_pat307; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000010000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000010000000000000000000000001000000;
	cfgsin3[0:44] =  45 'b000000000000000010000001000010001000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000100000010000000000000000;
	cfgsin5[0:44] =  45 'b000000010000000001000000010010000000000000000;
	cfgsin6[0:44] =  45 'b000000000000001000000000010000000000000000000;
	cfgsin7[0:44] =  45 'b010000100000001010000010000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000010000000000000000000000000100;
	cfgsin13[0:44] =  45 'b000000000000110000000000000000000000000000001;
	cfgsin12[0:44] =  45 'b000000000010000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000100000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000010000000001000000100000100000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000001000001000000000000001000;
	cfgsin22[0:44] =  45 'b000000000101000000010000001000000000000000000;
	cfgsin23[0:44] =  45 'b010000000000001000000000000100000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000001001000000000001000010000000000000000000;
	cfgsin30[0:44] =  45 'b000000001000000000000000000010000000000000000;
	cfgsin29[0:44] =  45 'b000000000000010001000100010000000000000000100;
	cfgsin28[0:44] =  45 'b000000000001001000000000000000000010000000000;
	cfgsin27[0:44] =  45 'b000000100000000100000000000000000000100001000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat306; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx0010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b01000100000100xx1xx1010000010000010xx0xx10010;
	cfgsin3[0:44] =  45 'b00000100100xx0xx0100000010000001xx1xx10000100;
	cfgsin4[0:44] =  45 'b10000001xx0xx1100000010000010xx1xx10010000010;
	cfgsin5[0:44] =  45 'b00100xx0xx1001000001000010xx0xx10100001000000;
	cfgsin6[0:44] =  45 'b10xx1xx1100000100000001xx0xx1001000001000010x;
	cfgsin7[0:44] =  45 'bx0xx1010000001000100xx0xx1000010000001100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000000010010xx1xx1100000000100100xx1xx10;
	cfgsin14[0:44] =  45 'b01000000010100xx0xx1100000000001100xx0xx10000;
	cfgsin13[0:44] =  45 'b10100000100xx0xx1001000001000100xx1xx10010000;
	cfgsin12[0:44] =  45 'b10000100xx0xx1010000100000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000010000000000000000000;
	cfgsin17[0:44] =  45 'b010000000000100000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000010000000000000000000100000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000010000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000001000010000000000;
	cfgsin21[0:44] =  45 'b000001000100000000000001000000000000001000000;
	cfgsin22[0:44] =  45 'b000010010000000000000001000000000001000000000;
	cfgsin23[0:44] =  45 'b000010000000000000000010010001000000001000010;
// BR
	cfgsin31[0:44] =  45 'b000010000000000001000010100000110001000010010;
	cfgsin30[0:44] =  45 'b001001000000001010010000001000000000000000000;
	cfgsin29[0:44] =  45 'b000000010000000010000000000000010010010000001;
	cfgsin28[0:44] =  45 'b000000000000010000000000100001001000010001000;
	cfgsin27[0:44] =  45 'b000000000010000000001001000010010000001000100;
	cfgsin26[0:44] =  45 'b000001010000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000010000000000000000000010000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000000000000000000000000;
end
endtask
task get_wl_pat305; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000001000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b01000100000100xx0xx1100000001000010xx0xx01000;
	cfgsin3[0:44] =  45 'b00000100001xx0xx0010000001000010xx1xx10001000;
	cfgsin4[0:44] =  45 'b01000100xx1xx1010000001000010xx1xx00100000010;
	cfgsin5[0:44] =  45 'b00001xx0xx0100000001000001xx0xx00100001000000;
	cfgsin6[0:44] =  45 'b10xx1xx1010000000001100xx1xx1010000001000001x;
	cfgsin7[0:44] =  45 'bx1xx1001000001000001xx1xx1010000100000010xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1100000001000100xx0xx1010000100000010xx1xx11;
	cfgsin14[0:44] =  45 'b00000001000010xx1xx1100000001000001xx1xx01000;
	cfgsin13[0:44] =  45 'b00000001001xx0xx1100000001000001xx0xx10100000;
	cfgsin12[0:44] =  45 'b00001010xx0xx1010000100000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx0010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx0010000100000100xx1xx1001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1100000100000100xx1xx11000;
	cfgsin19[0:44] =  45 'b00100000010xx1xx1100000100000100xx0xx10010000;
	cfgsin20[0:44] =  45 'b01000100xx1xx1010000100000100xx1xx00100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx0100000100000100xx1xx10100000000101;
	cfgsin22[0:44] =  45 'b00xx0xx0001000001000100xx0xx1001000001000100x;
	cfgsin23[0:44] =  45 'bx0xx0100000000001100xx0xx0001000100000100xx0x;
// BR
	cfgsin31[0:44] =  45 'bx1010000100000100xx0xx0000010100000001xx0xx00;
	cfgsin30[0:44] =  45 'b01000000100100xx0xx0100000000100100xx0xx11000;
	cfgsin29[0:44] =  45 'b00100000001xx0xx0010000000010100xx0xx00010000;
	cfgsin28[0:44] =  45 'b01000100xx0xx0001000010000100xx0xx00100000000;
	cfgsin27[0:44] =  45 'b10100xx1xx0100000010000010xx0xx00001000100001;
	cfgsin26[0:44] =  45 'b00xx0xx0010000001000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx0010000100000100xx1xx0010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0000001100000100xx1xx;
end
endtask
task get_wl_pat304; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000001000100x01000010000100000100xx00;
	cfgsin1[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0100010000001000100xx00000001;
	cfgsin3[0:44] =  45 'b00100000010xx0101000010000001100xx00001000000;
	cfgsin4[0:44] =  45 'b00100010xx0000100000010000100xx00011000000010;
	cfgsin5[0:44] =  45 'b00010xx0001001000001000100xx01011000001000001;
	cfgsin6[0:44] =  45 'b00xx0000000010010000010xx0000100000001000100x;
	cfgsin7[0:44] =  45 'bx0000100000001000010xx0000100000100000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000001000001xx0000000100100000001xx00000;
	cfgsin14[0:44] =  45 'b00100001000001xx0000001000100000010xx00010001;
	cfgsin13[0:44] =  45 'b00000010100xx1000001000100000001xx10001000000;
	cfgsin12[0:44] =  45 'b10000010xx1000010000100000100xx00000100001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin10[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin9[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000001000100xx0xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx0000010000010010xx0xx01000;
	cfgsin19[0:44] =  45 'b00000100100xx0xx1010000000100010xx0xx10100000;
	cfgsin20[0:44] =  45 'b01000001xx0xx1010000100000100xx0xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000100000100xx1xx00010000010000;
	cfgsin22[0:44] =  45 'b10xx1xx1000010001000001xx1xx1010000001000001x;
	cfgsin23[0:44] =  45 'bx0xx1000100100000001xx1xx1100000100000010xx0x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000100xx1xx1010000100000100xx1xx10;
	cfgsin30[0:44] =  45 'b00010100000001xx0xx1001000000001010xx0xx10001;
	cfgsin29[0:44] =  45 'b00000001100xx0xx1100000001000010xx1xx01000000;
	cfgsin28[0:44] =  45 'b01000001xx1xx1100000010000100xx0xx11000000010;
	cfgsin27[0:44] =  45 'b00010xx0xx0000100000010100xx1xx11000000100000;
	cfgsin26[0:44] =  45 'b10xx1xx0100000001000001xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx0010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0100000000001100xx1xx;
end
endtask
task get_wl_pat303; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000000001100000100xx10010001;
	cfgsin3[0:44] =  45 'b00000010001xx0000000100100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000010xx0000000100100000100xx00000000100010;
	cfgsin5[0:44] =  45 'b00001xx0000001000001000001xx00000000010010000;
	cfgsin6[0:44] =  45 'b10xx0000001000001000100xx0000000001001000001x;
	cfgsin7[0:44] =  45 'bx0000001000001000100xx0000001000010000010xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000001000001xx0000001000010000010xx00000;
	cfgsin14[0:44] =  45 'b01000001000001xx0000000010001000100xx00000001;
	cfgsin13[0:44] =  45 'b00000100001xx0000001000001000010xx00000010000;
	cfgsin12[0:44] =  45 'b00100001xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000001000100x01000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000100000100xx0001010000100000100xx00100010;
	cfgsin19[0:44] =  45 'b00000100010xx0000100000001000010xx10001000000;
	cfgsin20[0:44] =  45 'b01000001xx1000010000100000100xx10000100001000;
	cfgsin21[0:44] =  45 'b00100xx0000000010100000010xx00101000000010000;
	cfgsin22[0:44] =  45 'b01xx0000100000001000010xx0000100000001000010x;
	cfgsin23[0:44] =  45 'bx0000010000001000010xx0000100000000001100xx10;
// BR
	cfgsin31[0:44] =  45 'b00001000100000010xx0000100000100000010xx00001;
	cfgsin30[0:44] =  45 'b00000001000010xx0000010000000001001xx10001000;
	cfgsin29[0:44] =  45 'b00001000010xx0000010000100000001xx00100000100;
	cfgsin28[0:44] =  45 'b01000001xx0000010000010000100xx00000100000010;
	cfgsin27[0:44] =  45 'b00001xx0001010000010000010xx00001000000000101;
	cfgsin26[0:44] =  45 'b00xx0001000100001000001xx0000010000100000100x;
	cfgsin25[0:44] =  45 'bx0010010000100000100xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000000001100x0000;
end
endtask
task get_wl_pat302; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000000010001000010xx00000001;
	cfgsin3[0:44] =  45 'b00001000100xx0000010000001000001xx00000000100;
	cfgsin4[0:44] =  45 'b01000100xx0000000010000001001xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx1000000100001000001xx00000010001000000;
	cfgsin6[0:44] =  45 'b10xx0000010000000001010xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000001000001xx1000001000100000010xx00000;
	cfgsin14[0:44] =  45 'b01000001000001xx0000001000001000001xx00000010;
	cfgsin13[0:44] =  45 'b00000010100xx0000000010001000001xx00000010000;
	cfgsin12[0:44] =  45 'b10000010xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000001000001000001xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000000010100000100xx01000010;
	cfgsin19[0:44] =  45 'b00010000001xx0100010000100000001xx00000010000;
	cfgsin20[0:44] =  45 'b01000001xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000000001100xx00000010000010000;
	cfgsin22[0:44] =  45 'b01xx0000001000001000001xx0000001000001000001x;
	cfgsin23[0:44] =  45 'bx0000001000010000010xx0000001000010000010xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000010000100xx0000000010010000100xx00000;
	cfgsin30[0:44] =  45 'b01000010000100xx1000001000010000100xx00000001;
	cfgsin29[0:44] =  45 'b00010000010xx1000001000001000001xx00000001000;
	cfgsin28[0:44] =  45 'b01000001xx0000001000100000010xx10000010000010;
	cfgsin27[0:44] =  45 'b00001xx0000001000010000001xx00000000101000000;
	cfgsin26[0:44] =  45 'b10xx0000001000001000001xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000000001001xx000;
end
endtask
task get_wl_pat301; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000000100001xx00000010;
	cfgsin3[0:44] =  45 'b00001000010xx0000000100001000001xx00001000000;
	cfgsin4[0:44] =  45 'b00010001xx0000001000000100010xx00000000100010;
	cfgsin5[0:44] =  45 'b00001xx0000000100001000001xx00000000011000000;
	cfgsin6[0:44] =  45 'b10xx0000001000001000001xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0000001000001000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000001000001xx0000001000100000010xx00000;
	cfgsin14[0:44] =  45 'b10000001000001xx0000001000001000001xx00000001;
	cfgsin13[0:44] =  45 'b00010000010xx0000001000010000001xx00000010000;
	cfgsin12[0:44] =  45 'b01000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00001000001000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000001xx00000001;
	cfgsin19[0:44] =  45 'b00100000010xx0000010000100000100xx00000010000;
	cfgsin20[0:44] =  45 'b01000001xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000000010100000100xx00000010000010000;
	cfgsin22[0:44] =  45 'b01xx0000001000001000001xx0000001000001000001x;
	cfgsin23[0:44] =  45 'bx1000001000001000010xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000000010100xx0000001000100000010xx00000;
	cfgsin30[0:44] =  45 'b10000100000001xx0000001000100000001xx00000100;
	cfgsin29[0:44] =  45 'b00100000001xx0000001000001000001xx00000010000;
	cfgsin28[0:44] =  45 'b01000001xx0000001000000100100xx00000010000010;
	cfgsin27[0:44] =  45 'b00001xx1000000010001000010xx00000000100000011;
	cfgsin26[0:44] =  45 'b00xx0000001000001000001xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000000001100x000x;
end
endtask
task get_wl_pat300; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000010000001000100xx00001000;
	cfgsin3[0:44] =  45 'b00001000100xx0000001000001000100xx00010001000;
	cfgsin4[0:44] =  45 'b00001100xx0000010000000001100xx00100010000010;
	cfgsin5[0:44] =  45 'b00100xx0000001000001000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000001000100x;
	cfgsin7[0:44] =  45 'bx0000000100001000100xx0000001000001000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00000100001000010xx0100001000100000100xx00000;
	cfgsin14[0:44] =  45 'b00010001000010xx1000001000001000001xx00000100;
	cfgsin13[0:44] =  45 'b00001000001xx1000001000001000001xx00000100001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000001000001000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000010000000001010xx00000001;
	cfgsin19[0:44] =  45 'b00000100100xx0000001000000100010xx00000010000;
	cfgsin20[0:44] =  45 'b01000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00000100000010000;
	cfgsin22[0:44] =  45 'b01xx0000001000001000001xx0000001000001000001x;
	cfgsin23[0:44] =  45 'bx0000001000000100010xx0000001000001000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00000010000001100xx0000001000000001010xx00001;
	cfgsin30[0:44] =  45 'b00000000001010xx0000100000001000010xx00001000;
	cfgsin29[0:44] =  45 'b00000100100xx0000010000001000001xx00000001000;
	cfgsin28[0:44] =  45 'b01000001xx0000001000000001100xx00000100000010;
	cfgsin27[0:44] =  45 'b00001xx0000100000100000100xx00000001000001001;
	cfgsin26[0:44] =  45 'b00xx0000001000001000001xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000000001100x0000;
end
endtask
task get_wl_pat299; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx1000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000001000001xx00000001;
	cfgsin3[0:44] =  45 'b00001000001xx1000001000000001010xx10000010000;
	cfgsin4[0:44] =  45 'b01000010xx0000100000010000100xx01000010000010;
	cfgsin5[0:44] =  45 'b00001xx0000001000001000001xx10010010001000000;
	cfgsin6[0:44] =  45 'b10xx0000000100000001001xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0001001000001000001xx0001000100000100100xx00;
// TR
	cfgsin15[0:44] =  45 'b00000100001000100xx0000000100000001010xx01000;
	cfgsin14[0:44] =  45 'b00100001000100xx0001001000001000010xx10010010;
	cfgsin13[0:44] =  45 'b00000010100xx0000001000001000010xx00011000000;
	cfgsin12[0:44] =  45 'b10000010xx1000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00010000001000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000000100000010100xx00001000;
	cfgsin19[0:44] =  45 'b00000001010xx0000000100000001010xx00000010000;
	cfgsin20[0:44] =  45 'b01000100xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000001xx00000001000010000;
	cfgsin22[0:44] =  45 'b10xx0000001000001000100xx0000001000001000100x;
	cfgsin23[0:44] =  45 'bx0000100000100000010xx0000000100001000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100xx0100001000000001010xx00000;
	cfgsin30[0:44] =  45 'b01000000010010xx0000000010000010100xx00001000;
	cfgsin29[0:44] =  45 'b00000010100xx1000001000001000100xx01000010000;
	cfgsin28[0:44] =  45 'b01000100xx1001010000010000100xx00000010000010;
	cfgsin27[0:44] =  45 'b00100xx0000000100000001001xx00001000000010001;
	cfgsin26[0:44] =  45 'b00xx0100001000001000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000000001100xx00x;
end
endtask
task get_wl_pat298; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx1001000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin2[0:44] =  45 'b01000100000100xx1xx1100000001000001xx1xx10100;
	cfgsin3[0:44] =  45 'b00010000010xx0xx1000001100000001xx0xx01000000;
	cfgsin4[0:44] =  45 'b00100001xx1xx1001000001000100xx0xx00010000000;
	cfgsin5[0:44] =  45 'b01001xx1xx1001000010000001xx0xx00001000010000;
	cfgsin6[0:44] =  45 'b10xx1xx1000010000100010xx1xx1001000100000001x;
	cfgsin7[0:44] =  45 'bx1xx0000001000001001xx1xx0100000001000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1000010100000001xx0xx1000100001000010xx0xx10;
	cfgsin14[0:44] =  45 'b00010000100001xx0xx0000010001000100xx0xx01000;
	cfgsin13[0:44] =  45 'b00010000010xx0xx1001000100000100xx1xx00010000;
	cfgsin12[0:44] =  45 'b01000010xx0xx1001000100000100xx1xx10010001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000010000001000001xx1000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0010001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000000010000001010xx00010010;
	cfgsin19[0:44] =  45 'b00100000100xx0001000010100000100xx10100001000;
	cfgsin20[0:44] =  45 'b01000001xx0000001000100000100xx00010010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000000001010xx00010001000010001;
	cfgsin22[0:44] =  45 'b00xx0000000010001000001xx0000001000001000001x;
	cfgsin23[0:44] =  45 'bx0001000100000001100xx0001000010000100001xx00;
// BR
	cfgsin31[0:44] =  45 'b00000100100000100xx0000000001100000100xx10010;
	cfgsin30[0:44] =  45 'b00010100000001xx1010001000000001010xx10100001;
	cfgsin29[0:44] =  45 'b00000001001xx0000001000001000001xx00100010000;
	cfgsin28[0:44] =  45 'b01000001xx0000100000010000100xx10001000000010;
	cfgsin27[0:44] =  45 'b00010xx0100000100000001010xx01010001000100000;
	cfgsin26[0:44] =  45 'b01xx0000001000001000001xx0100001000100000100x;
	cfgsin25[0:44] =  45 'bx0001001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000000001001xx000;
end
endtask
task get_wl_pat297; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000001x00xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx0100000100000100x01xx01;
	cfgsin2[0:44] =  45 'b00000100000100x00xx1001000000001100x00xx10010;
	cfgsin3[0:44] =  45 'b00000001001x00xx0000010001000010x00xx00010000;
	cfgsin4[0:44] =  45 'b01000010x00xx1010000001000010x01xx10100001000;
	cfgsin5[0:44] =  45 'b00010x00xx1001000010000100x00xx10100000010000;
	cfgsin6[0:44] =  45 'b10x00xx1010000001000010x00xx1100000100000010x;
	cfgsin7[0:44] =  45 'b00xx1100000100000010x00xx1010000000001010x01x;
// TR
	cfgsin15[0:44] =  45 'bx1000010100000100x01xx1100000001000100x00xx10;
	cfgsin14[0:44] =  45 'b10000100000100x00xx1000010000100100x00xx10100;
	cfgsin13[0:44] =  45 'b00000010001x00xx1000010000010001x00xx10100000;
	cfgsin12[0:44] =  45 'b01000001x00xx1010000100000100x01xx10100001000;
	cfgsin11[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin10[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100x00xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx0001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx1001000000001100xx1xx00000;
	cfgsin19[0:44] =  45 'b10001000001xx1xx0001000001000001xx0xx00010000;
	cfgsin20[0:44] =  45 'b10000001xx1xx1001000100000100xx1xx00010001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1001000000010100xx1xx00010000000010;
	cfgsin22[0:44] =  45 'b01xx1xx1001000000001001xx1xx1001000000001001x;
	cfgsin23[0:44] =  45 'bx1xx0001000001000001xx1xx0100000100000010xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1001000000100100xx0xx1001000010000010xx0xx00;
	cfgsin30[0:44] =  45 'b00100000010100xx0xx0000100001000010xx0xx00010;
	cfgsin29[0:44] =  45 'b00000010100xx0xx1001000001000010xx0xx01000001;
	cfgsin28[0:44] =  45 'b00000001xx0xx0001000000010100xx0xx10000101000;
	cfgsin27[0:44] =  45 'b00001xx0xx1001000001000100xx0xx00010001000000;
	cfgsin26[0:44] =  45 'b10xx0xx1001000010000001xx0xx1001000100000100x;
	cfgsin25[0:44] =  45 'bx1xx0001000100000100xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat296; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx1000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00001100000100000100x000101;
	cfgsin2[0:44] =  45 'b00000100000100x00100010000001000001x000000001;
	cfgsin3[0:44] =  45 'b00000100100x11001010000010000100x001000001001;
	cfgsin4[0:44] =  45 'b00000100x01000010000010000100x100000100001000;
	cfgsin5[0:44] =  45 'b00100x00000010000010000010x010000100000010001;
	cfgsin6[0:44] =  45 'b00x01000010000001000100x01000100000100000100x;
	cfgsin7[0:44] =  45 'b00000001000100000100x01000010000010000001x000;
// TR
	cfgsin15[0:44] =  45 'b00100000100000010x00000010000001000001x001000;
	cfgsin14[0:44] =  45 'b10000100000010x00000001000100000010x001000100;
	cfgsin13[0:44] =  45 'b00000001010x01000010000000010001x000000100000;
	cfgsin12[0:44] =  45 'b01000100x01000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000001x01xx0100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx0100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000100x01xx1010000001000100x01xx10001;
	cfgsin19[0:44] =  45 'b00000001001x00xx1001000001000010x00xx10100000;
	cfgsin20[0:44] =  45 'b10000010x01xx1010000100000100x01xx00100001000;
	cfgsin21[0:44] =  45 'b00100x01xx0010000100000001x00xx00100001000000;
	cfgsin22[0:44] =  45 'b10x00xx0010000100000010x01xx0010000100000100x;
	cfgsin23[0:44] =  45 'b00xx1010000001000100x00xx1010000010000010x00x;
// BR
	cfgsin31[0:44] =  45 'bx1010000010000010x00xx0000100001000100x01xx10;
	cfgsin30[0:44] =  45 'b00100001000100x00xx0001000001000100x00xx10100;
	cfgsin29[0:44] =  45 'b00000100010x00xx1010000100000100x00xx10100001;
	cfgsin28[0:44] =  45 'b00000010x00xx1010000000100010x00xx11000000000;
	cfgsin27[0:44] =  45 'b10010x00xx0000010001000010x00xx00100000010000;
	cfgsin26[0:44] =  45 'b10x00xx1010000010000001x01xx1010000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx0100000100000100x01xx0010000100000001x01x0;
end
endtask
task get_wl_pat295; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000001xx0000100000100000100x100;
	cfgsin1[0:44] =  45 'b00100000100000100x10000100000100000100x100001;
	cfgsin2[0:44] =  45 'b00000100000100x10000010000100000010x100000100;
	cfgsin3[0:44] =  45 'b00100000010x10000010000000001001x100000100000;
	cfgsin4[0:44] =  45 'b00010001x10000000010000001001x100000100000000;
	cfgsin5[0:44] =  45 'b10001x11000010000100000001x100001000000000100;
	cfgsin6[0:44] =  45 'b01x10000100000000010001x10000010000000001001x;
	cfgsin7[0:44] =  45 'b10000010000000100001x10000000010100000100x100;
// TR
	cfgsin15[0:44] =  45 'b00010000010000001x10000100000001000010x100000;
	cfgsin14[0:44] =  45 'b10000010000001x10000010000010000001x100000010;
	cfgsin13[0:44] =  45 'b00100000100x10000010000100000001x100000010000;
	cfgsin12[0:44] =  45 'b01000010x10000010000100000100x100000100001000;
	cfgsin11[0:44] =  45 'b00100x10000010000100000100x100000100001000001;
	cfgsin10[0:44] =  45 'b00x10000010000100000100x10000010000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0001100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000010000000100100x100000100;
	cfgsin19[0:44] =  45 'b00100000100x00000010000100000010x110000100000;
	cfgsin20[0:44] =  45 'b10000100x00000010000100000100x000010100001000;
	cfgsin21[0:44] =  45 'b00100x00001100000000001100x000010000101000001;
	cfgsin22[0:44] =  45 'b00x01001010000100000100x00001010000100000010x;
	cfgsin23[0:44] =  45 'b00000010000100000001x00000010000000001001x010;
// BR
	cfgsin31[0:44] =  45 'b00100000010000001x00010010000001000001x000000;
	cfgsin30[0:44] =  45 'b10000100000001x10100010000001000001x001000001;
	cfgsin29[0:44] =  45 'b00100000001x00000001000000001010x000000100001;
	cfgsin28[0:44] =  45 'b00000100x00000000010000010001x001000000100001;
	cfgsin27[0:44] =  45 'b00100x00000010000000001010x001000000100001000;
	cfgsin26[0:44] =  45 'b01x00100010000010000001x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx01100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat294; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000010000010x101001000;
	cfgsin3[0:44] =  45 'b00000001100x00000100000001000001x000010100000;
	cfgsin4[0:44] =  45 'b10000100x00000010000000100010x100000100001000;
	cfgsin5[0:44] =  45 'b00001x00000010000010000001x000001000000010000;
	cfgsin6[0:44] =  45 'b10x00000000001001000100x00000010000100000001x;
	cfgsin7[0:44] =  45 'b01000010000100000001x00000100000001000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000001x00000100000001000010x000000;
	cfgsin14[0:44] =  45 'b10000100000001x01000010000000100001x000000010;
	cfgsin13[0:44] =  45 'b00000001010x00000001000100000100x101001000000;
	cfgsin12[0:44] =  45 'b01000100x00000100000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000001xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10001100000100000100x100000;
	cfgsin18[0:44] =  45 'b10000100000100x10000010000100000100x100000100;
	cfgsin19[0:44] =  45 'b00001000010x10000000010001000010x100000100000;
	cfgsin20[0:44] =  45 'b00100001x10000010000100000100x100000100001000;
	cfgsin21[0:44] =  45 'b00100x10000010000001000010x100000100000010000;
	cfgsin22[0:44] =  45 'b01x10000010000000100001x10000010000010000001x;
	cfgsin23[0:44] =  45 'b10000001000001000010x10000001000000100100x100;
// BR
	cfgsin31[0:44] =  45 'b00100000000001100x10000100000001000010x100000;
	cfgsin30[0:44] =  45 'b01000001000010x10001000010001000010x100000010;
	cfgsin29[0:44] =  45 'b00000001100x10000010000010000001x110000100000;
	cfgsin28[0:44] =  45 'b10000001x10000010000010000100x100000100000100;
	cfgsin27[0:44] =  45 'b00001x10110001000001000010x100000000010100001;
	cfgsin26[0:44] =  45 'b00x10000010000010000001x10000010000100000100x;
	cfgsin25[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat293; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000000001001000001x000000010;
	cfgsin3[0:44] =  45 'b00001000010x00000000001000010001x000000100000;
	cfgsin4[0:44] =  45 'b00001001x00000010000000010100x000000100001000;
	cfgsin5[0:44] =  45 'b00001x00000010000010000001x000001000000010000;
	cfgsin6[0:44] =  45 'b10x00010000001010000001x00000010000100000001x;
	cfgsin7[0:44] =  45 'b00000010000100000001x00000010000000001100x100;
// TR
	cfgsin15[0:44] =  45 'b01100000100000001x00000010000001000010x000001;
	cfgsin14[0:44] =  45 'b00000100000001x00000100000000100001x010001000;
	cfgsin13[0:44] =  45 'b00000001100x00100100000000010001x001001000000;
	cfgsin12[0:44] =  45 'b00100010x00000100000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000100000001000100x000000000;
	cfgsin19[0:44] =  45 'b10001000010x01000010000001000100x000000100000;
	cfgsin20[0:44] =  45 'b00001001x00000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x010000100001000000;
	cfgsin22[0:44] =  45 'b01x00000010000100000001x00000010000100000001x;
	cfgsin23[0:44] =  45 'b01000100000001000010x01000100000010000010x100;
// BR
	cfgsin31[0:44] =  45 'b00100000000001010x01000100000001000010x000001;
	cfgsin30[0:44] =  45 'b00000001000010x00000100000001000010x000001000;
	cfgsin29[0:44] =  45 'b00100000100x01000010000100000001x000000100001;
	cfgsin28[0:44] =  45 'b00000001x01000100000000010100x000000100000001;
	cfgsin27[0:44] =  45 'b00010x00000010000001000010x000100100000000011;
	cfgsin26[0:44] =  45 'b00x00000010000010000100x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00010100000100000100xx00x;
end
endtask
task get_wl_pat292; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000100000100x00000100000100000100x001001;
	cfgsin2[0:44] =  45 'b00000100000100x01000001000000010001x000000000;
	cfgsin3[0:44] =  45 'b10000001001x00000100000001000001x000000100000;
	cfgsin4[0:44] =  45 'b10000001x00000010000100000001x000000100001000;
	cfgsin5[0:44] =  45 'b00001x00000010000010000001x000001000000010000;
	cfgsin6[0:44] =  45 'b10x00000000010001000010x00000010000100000001x;
	cfgsin7[0:44] =  45 'b00000100000001000001x00000010000010000010x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000001x00000010000001000010x000000;
	cfgsin14[0:44] =  45 'b10000100000001x00000000001000100001x000011000;
	cfgsin13[0:44] =  45 'b00000010010x00000000010100000001x000000010000;
	cfgsin12[0:44] =  45 'b01000100x00010100000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000100000000010010x000000100;
	cfgsin19[0:44] =  45 'b00001000010x00100010000000010010x010000100001;
	cfgsin20[0:44] =  45 'b00000010x10000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000100x000000100001000000;
	cfgsin22[0:44] =  45 'b01x00001010000100000001x00000100000100000001x;
	cfgsin23[0:44] =  45 'b00000010000001000001x10000001000001000010x001;
// BR
	cfgsin31[0:44] =  45 'b01010000100000001x10000000010000100100x100000;
	cfgsin30[0:44] =  45 'b10000001000100x10000010000001000001x100000010;
	cfgsin29[0:44] =  45 'b00010000010x10000100000100000001x000000000100;
	cfgsin28[0:44] =  45 'b00010100x00000001000100000001x100100010000010;
	cfgsin27[0:44] =  45 'b00001x00000010000000010100x000000000011000000;
	cfgsin26[0:44] =  45 'b01x00010010000100000001x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat291; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000001001000001000100000100x000;
	cfgsin1[0:44] =  45 'b00001000100000100x00000001000100000100x000000;
	cfgsin2[0:44] =  45 'b00100100000100x00000000001000001010x000001000;
	cfgsin3[0:44] =  45 'b00000001001x00000100000001000010x110001000000;
	cfgsin4[0:44] =  45 'b10000001x00000100000001000100x000001000001000;
	cfgsin5[0:44] =  45 'b00001x00000010000000001001x000011000000010000;
	cfgsin6[0:44] =  45 'b10x00000100000001000001x10000100000100000001x;
	cfgsin7[0:44] =  45 'b00001000010100000100x00000010000001000100x000;
// TR
	cfgsin15[0:44] =  45 'b00000010000001001x00000010000001000010x000000;
	cfgsin14[0:44] =  45 'b00010000001001x00001010000000001100x100000100;
	cfgsin13[0:44] =  45 'b00000001010x00010010000000001100x100011000000;
	cfgsin12[0:44] =  45 'b01000100x01000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000000001001000010x010000010;
	cfgsin19[0:44] =  45 'b00001000100x10000010000001000010x000000010000;
	cfgsin20[0:44] =  45 'b10000001x01000010000100000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00001010000100000100x000001000001000000;
	cfgsin22[0:44] =  45 'b01x00000100000100000001x00000010000100000001x;
	cfgsin23[0:44] =  45 'b00000010000001000001x10000010000001000100x000;
// BR
	cfgsin31[0:44] =  45 'b00010000010000010x00000001000001000010x010000;
	cfgsin30[0:44] =  45 'b01000001000010x00000000001001000010x000000100;
	cfgsin29[0:44] =  45 'b00001000100x01000010000100000001x000000100001;
	cfgsin28[0:44] =  45 'b00000100x00101100000001000100x000000100000000;
	cfgsin27[0:44] =  45 'b10001x00000000001100000001x000000100000000100;
	cfgsin26[0:44] =  45 'b01x00000000010010000001x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000000001001x0000;
end
endtask
task get_wl_pat290; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1001000100000100x01x;
	cfgsin1[0:44] =  45 'bx1001000100000100x01xx1001000100000100x00xx10;
	cfgsin2[0:44] =  45 'b00100100000100x00xx1010000010000001x01xx10100;
	cfgsin3[0:44] =  45 'b00000010010x01xx1000001000100001x00xx10000010;
	cfgsin4[0:44] =  45 'b00100010x01xx1000001000100010x01xx10010000100;
	cfgsin5[0:44] =  45 'b00001x01xx1100000001000001x01xx00100000001000;
	cfgsin6[0:44] =  45 'b10x01xx0001000000001100x01xx1010000000010001x;
	cfgsin7[0:44] =  45 'b01xx0010000001000001x01xx1001000100000010x01x;
// TR
	cfgsin15[0:44] =  45 'bx0010000001000001x01xx1010000100000010x01xx10;
	cfgsin14[0:44] =  45 'b10000010000001x01xx0001000100000001x00xx01000;
	cfgsin13[0:44] =  45 'b00001000100x10xx0010000100000010x00xx00001000;
	cfgsin12[0:44] =  45 'b01000010x10xx0010000100000100x01xx10100001000;
	cfgsin11[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin10[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000001001000100000100000100x000;
	cfgsin17[0:44] =  45 'b00010000100000100x00000100000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000010000001000001x000011000;
	cfgsin19[0:44] =  45 'b00001000010x00000010000001000010x000011000000;
	cfgsin20[0:44] =  45 'b10000001x00000010000100000100x010010010001000;
	cfgsin21[0:44] =  45 'b00100x00000100000100000100x000010100001000000;
	cfgsin22[0:44] =  45 'b01x00000001000100000001x00000010000100000001x;
	cfgsin23[0:44] =  45 'b00101010000001000010x00100010000000001010x000;
// BR
	cfgsin31[0:44] =  45 'b00100000000001100x00000001000001000100x100010;
	cfgsin30[0:44] =  45 'b01000001000010x00110010000001000010x001000100;
	cfgsin29[0:44] =  45 'b00100000100x00000001000000001001x000001000000;
	cfgsin28[0:44] =  45 'b00001001x00000010000000001001x000001000000000;
	cfgsin27[0:44] =  45 'b01001x01001010000001000100x000010100000000011;
	cfgsin26[0:44] =  45 'b00x10000010000000001001x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000001000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000010100000010000010000x;
end
endtask
task get_wl_pat289; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000001xx0xx1001000100000100x01x;
	cfgsin1[0:44] =  45 'bx1001000100000100x01xx1001000100000100x01xx10;
	cfgsin2[0:44] =  45 'b00100100000100x01xx1100000000100100x11xx00000;
	cfgsin3[0:44] =  45 'b01000001100x01xx1010000001000001x01xx00100000;
	cfgsin4[0:44] =  45 'b00001100x01xx1010000000010001x00xx00010000100;
	cfgsin5[0:44] =  45 'b00001x00xx0010000100000001x01xx00100000100000;
	cfgsin6[0:44] =  45 'b10x00xx0001000000100010x00xx1010000010000001x;
	cfgsin7[0:44] =  45 'b01xx1010000000100001x01xx1010000001000001x11x;
// TR
	cfgsin15[0:44] =  45 'bx1010000010000001x01xx1010000100000010x01xx10;
	cfgsin14[0:44] =  45 'b10000010000001x01xx1010000010000001x01xx00010;
	cfgsin13[0:44] =  45 'b00001000001x00xx0010000100000001x00xx10010000;
	cfgsin12[0:44] =  45 'b10000001x00xx1010000100000100x00xx10100001000;
	cfgsin11[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin10[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x0xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000100x01xx1010000001000100x10xx00100;
	cfgsin19[0:44] =  45 'b00010000100x00xx1010000100000100x00xx00001000;
	cfgsin20[0:44] =  45 'b01000010x00xx1010000100000100x00xx00010001000;
	cfgsin21[0:44] =  45 'b00100x01xx0001000001000100x01xx00100001000000;
	cfgsin22[0:44] =  45 'b01x01xx0001000100000001x01xx1010000100000001x;
	cfgsin23[0:44] =  45 'b00xx0010000100000100x00xx1000001001000001x00x;
// BR
	cfgsin31[0:44] =  45 'bx0001000001000010x01xx1010000001000001x00xx00;
	cfgsin30[0:44] =  45 'b10000000010001x00xx0010000100000100x00xx10000;
	cfgsin29[0:44] =  45 'b01000010010x00xx1010000010000001x01xx10100000;
	cfgsin28[0:44] =  45 'b10000010x00xx0001000001000010x01xx00010000100;
	cfgsin27[0:44] =  45 'b00010x00xx0000100000001001x01xx00010000010000;
	cfgsin26[0:44] =  45 'b10x01xx0001000100000010x01xx1010000100000100x;
	cfgsin25[0:44] =  45 'b01xx1001000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx00100001000001000x1x0;
end
endtask
task get_wl_pat288; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001xx1000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000000001000001001xx00000100;
	cfgsin3[0:44] =  45 'b00000010001xx0000010000010000001xx00100010000;
	cfgsin4[0:44] =  45 'b10000100xx0000001000001000100xx10010100000100;
	cfgsin5[0:44] =  45 'b00001xx1010100000100000001xx00100100000100000;
	cfgsin6[0:44] =  45 'b10xx0100010000001000010xx0100010000010000001x;
	cfgsin7[0:44] =  45 'bx0000001000001000010xx0000000100001000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000000100001xx0000100000100000010xx00000;
	cfgsin14[0:44] =  45 'b10000000001001xx0000100000001000001xx00010010;
	cfgsin13[0:44] =  45 'b00000001010xx0000001000001000001xx10000000010;
	cfgsin12[0:44] =  45 'b01000100xx0000100000100000100xx10001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000001xx0xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000100x01xx0010000000001010x01xx00100;
	cfgsin19[0:44] =  45 'b00000100001x01xx0010000000010001x01xx10100000;
	cfgsin20[0:44] =  45 'b00001100x01xx1010000100000100x01xx10010001000;
	cfgsin21[0:44] =  45 'b00100x01xx1001000001000100x01xx10100001000000;
	cfgsin22[0:44] =  45 'b01x01xx1001000100000001x01xx1010000100000001x;
	cfgsin23[0:44] =  45 'b01xx1010000100000001x01xx1010000001000100x11x;
// BR
	cfgsin31[0:44] =  45 'bx1100000001000001x00xx1010000000010010x00xx10;
	cfgsin30[0:44] =  45 'b00001010000100x01xx1001000010000001x10xx10100;
	cfgsin29[0:44] =  45 'b00001000001x10xx1000001010000001x00xx00100000;
	cfgsin28[0:44] =  45 'b10000100x01xx0100000001000100x00xx10001000100;
	cfgsin27[0:44] =  45 'b00100x00xx0000001000100010x00xx01000000010000;
	cfgsin26[0:44] =  45 'b01x10xx1010000100000100x01xx1010000100000100x;
	cfgsin25[0:44] =  45 'b01xx1001000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000001xx1xx;
end
endtask
task get_wl_pat287; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000100000100xx0000000010001000010xx00010001;
	cfgsin3[0:44] =  45 'b00100000010xx0000010000100000001xx00000001001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000001xx00000100001000;
	cfgsin5[0:44] =  45 'b00001xx0000100000000010001xx00000100001000000;
	cfgsin6[0:44] =  45 'b10xx0000000100100000010xx0000010000100000001x;
	cfgsin7[0:44] =  45 'bx0000000001010000001xx0000001000001000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000100000001xx0000100000000001010xx00000;
	cfgsin14[0:44] =  45 'b10000100000001xx0000000001000100001xx00000001;
	cfgsin13[0:44] =  45 'b00001000100xx0000010000100000001xx00000000011;
	cfgsin12[0:44] =  45 'b00000010xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0001000010001000001xx00000001;
	cfgsin19[0:44] =  45 'b00000010001xx0010000010001000010xx00000010000;
	cfgsin20[0:44] =  45 'b01000001xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000000001100xx00001000000001000;
	cfgsin22[0:44] =  45 'b01xx0000100000100000001xx0000100000100000001x;
	cfgsin23[0:44] =  45 'bx0000100000000001010xx0000000001100000010xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000001000100xx1000100000100000010xx10001;
	cfgsin30[0:44] =  45 'b00000000001010xx0000100000100000010xx10000010;
	cfgsin29[0:44] =  45 'b00000001100xx0000010000010000001xx10100000010;
	cfgsin28[0:44] =  45 'b10000001xx0000001000001000100xx00000100000100;
	cfgsin27[0:44] =  45 'b00001xx0001010000001000001xx01000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000000001100000001xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat286; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx001x001xx0000100000xx100x100xx00;
	cfgsin1[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin2[0:44] =  45 'b00000xx100x100xx0000100000xx010x100xx00000010;
	cfgsin3[0:44] =  45 'b00xx010x100xx0000000001xx001x100xx0000000001x;
	cfgsin4[0:44] =  45 'bx100x001xx0000001000xx100x010xx0000010000xx10;
	cfgsin5[0:44] =  45 'b0x001xx0000100000xx010x001xx0000010000xx100x0;
	cfgsin6[0:44] =  45 'b10xx0010010000xx001x100xx0000010000xx100x001x;
	cfgsin7[0:44] =  45 'bx0000100000xx100x100xx0000000100xx100x001xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000xx010x001xx0000100000xx001x010xx00000;
	cfgsin14[0:44] =  45 'b10000xx010x001xx0000000010xx010x100xx00000010;
	cfgsin13[0:44] =  45 'b00xx100x001xx1010001000xx010x100xx0000010000x;
	cfgsin12[0:44] =  45 'bx010x001xx1000100000xx100x100xx0000100000xx10;
	cfgsin11[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin10[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000010000001000010xx00010010;
	cfgsin19[0:44] =  45 'b00100000010xx0000000100100000001xx00000100001;
	cfgsin20[0:44] =  45 'b00000001xx0000100000100000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00001000000100000;
	cfgsin22[0:44] =  45 'b01xx0000100000010000001xx0000100000000001001x;
	cfgsin23[0:44] =  45 'bx0000000001000100010xx0000000100001000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000001000100xx0000100000010000010xx00000;
	cfgsin30[0:44] =  45 'b01000000100100xx0000000001000100100xx00000010;
	cfgsin29[0:44] =  45 'b00001000010xx0100010000100000001xx00000001001;
	cfgsin28[0:44] =  45 'b00000001xx0000000001001000100xx00000001001000;
	cfgsin27[0:44] =  45 'b00001xx0000000010100000100xx00000000100010000;
	cfgsin26[0:44] =  45 'b10xx1000010000100000001xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat285; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx100x001x00000100000xx100x1000x00;
	cfgsin1[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin2[0:44] =  45 'b00000xx100x1000x0000000001xx001x0101x00000000;
	cfgsin3[0:44] =  45 'b10xx001x0101x0000010000xx010x0011x0000000001x;
	cfgsin4[0:44] =  45 'bx001x1001x0000000001xx010x1001x0000000001xx00;
	cfgsin5[0:44] =  45 'b1x1001x0000100000xx001x0101x0000000001xx010x1;
	cfgsin6[0:44] =  45 'b001x0000001000xx010x0011x0000000001xx001x1001;
	cfgsin7[0:44] =  45 'bx0000000001xx001x1001x0000000001xx010x0011x00;
// TR
	cfgsin15[0:44] =  45 'b00010000xx001x0101x0001100000xx010x0011x00000;
	cfgsin14[0:44] =  45 'b10000xx001x0101x0001100000xx001x0101x00000010;
	cfgsin13[0:44] =  45 'b00xx100x0101x0000100000xx001x0101x0000000001x;
	cfgsin12[0:44] =  45 'bx010x1001x0000100000xx100x1000x0000100000xx10;
	cfgsin11[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin10[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000100000xx001x001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx100x100xx0000000100xx001x100xx00000001;
	cfgsin19[0:44] =  45 'b00xx010x100xx0000000100xx100x100xx0000001000x;
	cfgsin20[0:44] =  45 'bx001x001xx0000100000xx100x100xx0000100000xx10;
	cfgsin21[0:44] =  45 'b0x100xx0000001000xx001x100xx0000100000xx100x0;
	cfgsin22[0:44] =  45 'b01xx0000100000xx100x001xx0000100000xx100x001x;
	cfgsin23[0:44] =  45 'bx0000100000xx010x010xx0000000100xx001x100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000xx010x100xx0000000100xx100x001xx00000;
	cfgsin30[0:44] =  45 'b00001xx100x001xx0000001000xx001x001xx00000010;
	cfgsin29[0:44] =  45 'b00xx001x001xx0000010000xx010x001xx0000010000x;
	cfgsin28[0:44] =  45 'bx001x001xx0001001000xx100x010xx1000010000xx01;
	cfgsin27[0:44] =  45 'b0x001xx1000000010xx001x010xx0001000001xx100x0;
	cfgsin26[0:44] =  45 'b01xx0000100000xx010x001xx0000100000xx100x100x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x010xx00x;
end
endtask
task get_wl_pat284; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000010000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000010000;
	cfgsin3[0:44] =  45 'b000000000000000010000000000001000000010000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000010000;
	cfgsin6[0:44] =  45 'b000000000000001000000000000000000100000000000;
	cfgsin7[0:44] =  45 'b000001000000000000000001100000000000000000001;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000010000000;
	cfgsin13[0:44] =  45 'b010000000000010000100000100000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x001x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin18[0:44] =  45 'b00000xx100x1000x0000100000xx010x0011x00010000;
	cfgsin19[0:44] =  45 'b01xx010x1001x0000000001xx010x1001x0001000001x;
	cfgsin20[0:44] =  45 'bx001x1001x0000100000xx100x1000x0000100000xx10;
	cfgsin21[0:44] =  45 'b0x1000x0000001000xx100x0011x0000000001xx001x1;
	cfgsin22[0:44] =  45 'b001x0000000001xx001x1001x0000000001xx001x1001;
	cfgsin23[0:44] =  45 'bx0000100000xx010x0011x0000001000xx100x0101x00;
// BR
	cfgsin31[0:44] =  45 'b00001000xx100x0101x0000000001xx010x1001x00000;
	cfgsin30[0:44] =  45 'b00001xx010x1001x0000100000xx010x0011x00000010;
	cfgsin29[0:44] =  45 'b00xx100x0011x0000010000xx001x0101x0000010000x;
	cfgsin28[0:44] =  45 'bx001x0101x0000001000xx100x0101x0000010000xx00;
	cfgsin27[0:44] =  45 'b1x0101x0000100000xx010x0011x0000001000xx100x0;
	cfgsin26[0:44] =  45 'b101x0000100000xx001x0101x0000100000xx100x1000;
	cfgsin25[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx010x001x0000;
end
endtask
task get_wl_pat283; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000001000000;
	cfgsin2[0:44] =  45 'b000000000000000010000000000000000000000000000;
	cfgsin3[0:44] =  45 'b100100100000010001000000000000000010001000000;
	cfgsin4[0:44] =  45 'b000100000000100000000000000000100100000000000;
	cfgsin5[0:44] =  45 'b000000000000000000001000001000000000100000000;
	cfgsin6[0:44] =  45 'b000100000000000000001000000000000000000000000;
	cfgsin7[0:44] =  45 'b000010000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b001000000000000000001001000000000000000001000;
	cfgsin14[0:44] =  45 'b000000000000000001000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000001000000000;
	cfgsin12[0:44] =  45 'b000000000010000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000001000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000001000000001000000000;
	cfgsin19[0:44] =  45 'b000000000001000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000001000000000000001;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000100000000000101000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000010000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000001000000000000001000001000;
	cfgsin28[0:44] =  45 'b000000100000000001000010000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000001000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat282; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x0110001101x;
	cfgsin1[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001000xx11;
	cfgsin2[0:44] =  45 'b0x0110x0110001100xx110x0110x0110001101xx010x0;
	cfgsin3[0:44] =  45 'b010x0000001100xx000x1010x1000001100xx000x0110;
	cfgsin4[0:44] =  45 'bx0100001101xx001x0110x0101001001xx010x1010x01;
	cfgsin5[0:44] =  45 'b10001101xx110x1010x0010001001xx110x0010x00100;
	cfgsin6[0:44] =  45 'b01001xx110x0100x0110000101xx110x0010x01100011;
	cfgsin7[0:44] =  45 'b01xx000x0101x0101010100xx001x0101x0101010100x;
// TR
	cfgsin15[0:44] =  45 'bx100x0110x0101001100xx000x0110x0101001100xx10;
	cfgsin14[0:44] =  45 'b1x0110x0101001100xx010x0110x0110010100xx110x1;
	cfgsin13[0:44] =  45 'b000x0110010100xx100x0100x0110001100xx110x0101;
	cfgsin12[0:44] =  45 'bx0110010100xx110x0110x0110001101xx110x0110x01;
	cfgsin11[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin10[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000010000000100000000000000000;
	cfgsin19[0:44] =  45 'b000000000000001010010000100100000010000000000;
	cfgsin20[0:44] =  45 'b000000000000000000010000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000010000000000000;
	cfgsin22[0:44] =  45 'b000000100000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000010000000000000000000000000000000000000001;
// BR
	cfgsin31[0:44] =  45 'b000001000000000100000000000110010000000100100;
	cfgsin30[0:44] =  45 'b100000001010000000100000010000000000010000000;
	cfgsin29[0:44] =  45 'b100000000000010000000000000010000000001000000;
	cfgsin28[0:44] =  45 'b000100000001000000000000000001000000000100000;
	cfgsin27[0:44] =  45 'b000000010010001000010000000101101000000000000;
	cfgsin26[0:44] =  45 'b000001000000001000000000001000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat281; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x011000010000010x0100x01000011000;
	cfgsin1[0:44] =  45 'b0010x0110x011000110000000x1010x01100101000000;
	cfgsin2[0:44] =  45 'b1x1000x010001001000001x0010x000001010000001x0;
	cfgsin3[0:44] =  45 'b000x010001001000000x1001x000001010010010x0010;
	cfgsin4[0:44] =  45 'bx010001001000000x0101x010001010010000x0000x01;
	cfgsin5[0:44] =  45 'b1001010000001x0100x101000101000001x0001x10010;
	cfgsin6[0:44] =  45 'b0100000000x0110x011000010000000x0000x01100010;
	cfgsin7[0:44] =  45 'b0000010x1010x011001010000010x0101x01100001000;
// TR
	cfgsin15[0:44] =  45 'b0000x1001x011001010000001x0110x10100011000000;
	cfgsin14[0:44] =  45 'b0x0000x011000110000010x0001x001001010000100x0;
	cfgsin13[0:44] =  45 'b101x010100000000101x0000x011000100000010x0110;
	cfgsin12[0:44] =  45 'bx010000110000001x0110x011000110000010x0110x01;
	cfgsin11[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin10[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x0010001011x;
	cfgsin17[0:44] =  45 'bx110x0110x1010001011xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx001x1000x0001001001xx010x1;
	cfgsin19[0:44] =  45 'b001x0110010000xx010x0001x0000010100xx010x1001;
	cfgsin20[0:44] =  45 'bx0110001101xx110x0100x0110001001xx110x0101x00;
	cfgsin21[0:44] =  45 'b10001101xx110x0110x1010001101xx001x0101x01010;
	cfgsin22[0:44] =  45 'b10101xx010x0110x1010001101xx110x0110x01100011;
	cfgsin23[0:44] =  45 'b01xx010x0100x0101010101xx000x1001x0110010100x;
// BR
	cfgsin31[0:44] =  45 'bx110x0010x0110000010xx110x0000x0001001001xx00;
	cfgsin30[0:44] =  45 'b0x0101x0000010011xx010x0100x0110001100xx110x0;
	cfgsin29[0:44] =  45 'b010x0110001100xx110x0010x0100001100xx100x0010;
	cfgsin28[0:44] =  45 'bx0100000100xx110x0010x0010010001xx110x0001x01;
	cfgsin27[0:44] =  45 'b10010100xx001x0000x0001001000xx000x1010x01100;
	cfgsin26[0:44] =  45 'b10100xx110x0100x0110001100xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001011xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x1010001011xx001x1001x1001010101xx;
end
endtask
task get_wl_pat280; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000010000100000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000000000000001000;
	cfgsin2[0:44] =  45 'b000001000100000000000001000000100000000000000;
	cfgsin3[0:44] =  45 'b000000100000010001000000010000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000100100000000100000000000100100000;
	cfgsin5[0:44] =  45 'b000000010000000000000000000001000000000000000;
	cfgsin6[0:44] =  45 'b001001000000000000000000000001000000000000001;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000100000000000000000000;
	cfgsin13[0:44] =  45 'b000000000001000000000100000000000000000000000;
	cfgsin12[0:44] =  45 'b000100000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01000101000;
	cfgsin17[0:44] =  45 'b0010x0110x001000101000010x0100x10100010100001;
	cfgsin18[0:44] =  45 'b0x0010x001001000000000x0000x011001000000000x1;
	cfgsin19[0:44] =  45 'b010x011001010000010x0101x001000010000010x1010;
	cfgsin20[0:44] =  45 'bx100001001000010x0100x011000110000010x0110x01;
	cfgsin21[0:44] =  45 'b0001001000000x0000x101000101000010x0001x01010;
	cfgsin22[0:44] =  45 'b0110000010x0110x011001010000010x1000x01000101;
	cfgsin23[0:44] =  45 'b0000010x1000x010101010000000x1010x00100101000;
// BR
	cfgsin31[0:44] =  45 'b0001x0000x010000001000010x0110x01000001000001;
	cfgsin30[0:44] =  45 'b0x1000x000001010010000x0100x000000110000001x1;
	cfgsin29[0:44] =  45 'b000x000001000000001x0110x000000110000000x0101;
	cfgsin28[0:44] =  45 'bx010000110000010x0100x011000110000000x0110x00;
	cfgsin27[0:44] =  45 'b1000100000000x0000x000100110000000x0010x01000;
	cfgsin26[0:44] =  45 'b0110000010x0110x011000110000010x0110x01000011;
	cfgsin25[0:44] =  45 'b0000010x0010x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat279; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000010010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000100000000000000000010;
	cfgsin2[0:44] =  45 'b000000000000000010000000000001000000001010000;
	cfgsin3[0:44] =  45 'b110000000000000000000000000010000000010001000;
	cfgsin4[0:44] =  45 'b000100000010000000000000000000000000000001000;
	cfgsin5[0:44] =  45 'b000000000000000001000000000000010001000000000;
	cfgsin6[0:44] =  45 'b000000010100000000000010000000000100100000000;
	cfgsin7[0:44] =  45 'b001000000000000000000001000000000000000010000;
// TR
	cfgsin15[0:44] =  45 'b010010000000000000000000000000000000000000001;
	cfgsin14[0:44] =  45 'b000101000000000010000000000010000000000000100;
	cfgsin13[0:44] =  45 'b000000000100010000000001000000000101000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000001000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000001000000000000000000000000000000010;
	cfgsin18[0:44] =  45 'b000000001000001000000000101000000000101010000;
	cfgsin19[0:44] =  45 'b000000000000000000000000100000010000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000010000000000000000000000000;
	cfgsin21[0:44] =  45 'b010000001000110000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000010010000000000000000000000000000000100000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b010000100000000000000010000000000001000000000;
	cfgsin30[0:44] =  45 'b000000100000000000000000001001000000000000000;
	cfgsin29[0:44] =  45 'b000010000001000000000000001010000000000100000;
	cfgsin28[0:44] =  45 'b000100000000000000000000000000000011000000100;
	cfgsin27[0:44] =  45 'b000000100000001001001000000000000010000000010;
	cfgsin26[0:44] =  45 'b000010000000000000000000000000000000000010000;
	cfgsin25[0:44] =  45 'b000000001000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat278; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1010000001000100xx1x;
	cfgsin1[0:44] =  45 'bx1001000001000100xx1xx1010000001000010xx0xx00;
	cfgsin2[0:44] =  45 'b01000010000010xx0xx1001000010000001xx0xx00100;
	cfgsin3[0:44] =  45 'b00010000100xx0xx1000100100000001xx0xx00001000;
	cfgsin4[0:44] =  45 'b01000010xx0xx0100000001000001xx0xx10100000010;
	cfgsin5[0:44] =  45 'b00010xx0xx1010000001000010xx0xx00100001000000;
	cfgsin6[0:44] =  45 'b10xx0xx0100000000010010xx1xx1000100010000010x;
	cfgsin7[0:44] =  45 'bx0xx1000010001000010xx0xx1001000001000010xx1x;
// TR
	cfgsin15[0:44] =  45 'bx0000100100000100xx1xx1100000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b01000100000001xx0xx1000100100000001xx1xx00100;
	cfgsin13[0:44] =  45 'b00000001100xx0xx0010000001000100xx0xx10000100;
	cfgsin12[0:44] =  45 'b01000100xx1xx1010000010000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1000100010000100xx0xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1001000001000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000100000000;
	cfgsin17[0:44] =  45 'b100000000000000000000010000010000000000000000;
	cfgsin18[0:44] =  45 'b000100000000000000000100000000000000000000100;
	cfgsin19[0:44] =  45 'b000000000000010000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000001000010000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000001000000000000000001000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000010000000100000000;
	cfgsin23[0:44] =  45 'b000000000001000000000000001000000010000000010;
// BR
	cfgsin31[0:44] =  45 'b000000000100100010000000000000000010000000000;
	cfgsin30[0:44] =  45 'b000001000010000000000100000000010000010010000;
	cfgsin29[0:44] =  45 'b001000010000010000000000000000000010000000000;
	cfgsin28[0:44] =  45 'b000000000001000000000100000000010000000000000;
	cfgsin27[0:44] =  45 'b000000000000100000000000000010000100000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000010000000000000000000;
	cfgsin25[0:44] =  45 'b010000000000000000000010000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat277; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000001000100xx0xx1001000001000001xx1x;
	cfgsin1[0:44] =  45 'bx1010000001000001xx1xx0100000001000001xx0xx01;
	cfgsin2[0:44] =  45 'b00000001000100xx0xx0001000010000010xx0xx01000;
	cfgsin3[0:44] =  45 'b00000010010xx0xx0010000010000100xx0xx01000000;
	cfgsin4[0:44] =  45 'b00001001xx1xx0000100000001010xx0xx00100000010;
	cfgsin5[0:44] =  45 'b00001xx1xx0100000100000001xx0xx10001001000001;
	cfgsin6[0:44] =  45 'b00xx0xx1010000100000100xx0xx1010000010000010x;
	cfgsin7[0:44] =  45 'bx0xx0010000001000001xx0xx1010000001000001xx0x;
// TR
	cfgsin15[0:44] =  45 'bx0100000001000100xx0xx0010000000010010xx0xx11;
	cfgsin14[0:44] =  45 'b00000100000010xx0xx0100000000001010xx1xx11000;
	cfgsin13[0:44] =  45 'b00000100001xx0xx1100000001000001xx0xx11000000;
	cfgsin12[0:44] =  45 'b01000001xx0xx1000010010000100xx1xx11000001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1100000010000100xx1xx11000001000001;
	cfgsin10[0:44] =  45 'b00xx0xx1010000001000001xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx0001000100000100xx1xx0001000100000100xx1xx00;
	cfgsin18[0:44] =  45 'b10000001000001xx1xx1010000010000001xx0xx00001;
	cfgsin19[0:44] =  45 'b00000100010xx0xx1100000001000100xx1xx11000000;
	cfgsin20[0:44] =  45 'b00100100xx0xx1100000001000100xx1xx10010000010;
	cfgsin21[0:44] =  45 'b00100xx0xx1100000000010100xx1xx10001000010001;
	cfgsin22[0:44] =  45 'b00xx0xx0010000000010010xx1xx0100000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1010000001000100xx1xx1010000000010010xx0x;
// BR
	cfgsin31[0:44] =  45 'bx0100000100000100xx1xx0100000001000100xx1xx10;
	cfgsin30[0:44] =  45 'b00010000001100xx0xx1000010100000001xx0xx00100;
	cfgsin29[0:44] =  45 'b00000010010xx0xx1001000100000100xx0xx10001000;
	cfgsin28[0:44] =  45 'b01000010xx0xx1001000001000100xx0xx00000100001;
	cfgsin27[0:44] =  45 'b00100xx1xx1000100100000010xx0xx11000000000010;
	cfgsin26[0:44] =  45 'b10xx0xx1010000010000100xx0xx1001000100000100x;
	cfgsin25[0:44] =  45 'bx0xx1010000001000100xx0xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000010000100xx1xx;
end
endtask
task get_wl_pat276; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000001000100x01000100000001000010xx00;
	cfgsin1[0:44] =  45 'b00100000001000010xx0001010000001000100xx01010;
	cfgsin2[0:44] =  45 'b00010000100001xx1001100000000010100xx01010000;
	cfgsin3[0:44] =  45 'b10010000100xx1001100000100000010xx00010100000;
	cfgsin4[0:44] =  45 'b00010100xx0001000010010000100xx01001000001000;
	cfgsin5[0:44] =  45 'b00100xx0001000010001000100xx01001000000010000;
	cfgsin6[0:44] =  45 'b10xx0000100000100000001xx0100100000010000100x;
	cfgsin7[0:44] =  45 'bx1001100000001000100xx0000100000001000100xx00;
// TR
	cfgsin15[0:44] =  45 'b01000010000100010xx0000000001100000010xx00000;
	cfgsin14[0:44] =  45 'b01000001000100xx0101100000000100100xx00000010;
	cfgsin13[0:44] =  45 'b00001000010xx1000000100001000001xx10000100000;
	cfgsin12[0:44] =  45 'b10000010xx0000100000010000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000010000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx1000100000001000001xx0000010000100000100x;
	cfgsin9[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx0xx1001000100000100xx1xx11;
	cfgsin18[0:44] =  45 'b00000001000010xx0xx0100000010000010xx1xx01000;
	cfgsin19[0:44] =  45 'b00001000001xx0xx0001000000001010xx1xx00100000;
	cfgsin20[0:44] =  45 'b00010001xx0xx0010000001000010xx1xx11000000010;
	cfgsin21[0:44] =  45 'b00001xx1xx1000010100000010xx0xx11000000010000;
	cfgsin22[0:44] =  45 'b01xx1xx0100000001000001xx1xx0000010001000010x;
	cfgsin23[0:44] =  45 'bx1xx0100000001000001xx1xx0100000001000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1001000001000100xx1xx0000010000100100xx0xx00;
	cfgsin30[0:44] =  45 'b10000000010001xx0xx1100000000001010xx0xx01000;
	cfgsin29[0:44] =  45 'b00001000010xx0xx1100000100000100xx0xx11000000;
	cfgsin28[0:44] =  45 'b01000001xx1xx1100000001000001xx1xx11000000000;
	cfgsin27[0:44] =  45 'b01001xx0xx1100000000010001xx0xx10010000000101;
	cfgsin26[0:44] =  45 'b00xx0xx1100000010000100xx1xx1001000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1100000001000001xx0xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0100000001000100xx0xx;
end
endtask
task get_wl_pat275; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx0000001000001000001xx00;
	cfgsin1[0:44] =  45 'b00001000001000001xx0000001000001000001xx00000;
	cfgsin2[0:44] =  45 'b01000100000010xx0000000010100000100xx00000000;
	cfgsin3[0:44] =  45 'b10010000001xx0000100000000010001xx10000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000000001100000010xx00100001000010;
	cfgsin5[0:44] =  45 'b00010xx0000001000001000010xx00000000010010000;
	cfgsin6[0:44] =  45 'b10xx0000000001000100100xx0000000010100000010x;
	cfgsin7[0:44] =  45 'bx0000000100001000010xx1000001000001000001xx10;
// TR
	cfgsin15[0:44] =  45 'b00001000010000100xx0000000001000100001xx00000;
	cfgsin14[0:44] =  45 'b01000000010010xx0000010000001000001xx00000000;
	cfgsin13[0:44] =  45 'b10100000001xx0000001000001000100xx00000000101;
	cfgsin12[0:44] =  45 'b00000001xx0000001000001000100xx00000010000010;
	cfgsin11[0:44] =  45 'b00100xx0000001000001000100xx00000010000010001;
	cfgsin10[0:44] =  45 'b00xx0000001000001000001xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x00000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0100001000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000001000001xx0001000010010000100xx00010100;
	cfgsin19[0:44] =  45 'b00100000100xx1000100000100000001xx00010010000;
	cfgsin20[0:44] =  45 'b00010010xx0010010000001000100xx00000100000010;
	cfgsin21[0:44] =  45 'b00010xx0000001000000100001xx10000100000010000;
	cfgsin22[0:44] =  45 'b01xx0000010000001000100xx0001010000001000010x;
	cfgsin23[0:44] =  45 'bx0001010000001000010xx0001000010000001001xx00;
// BR
	cfgsin31[0:44] =  45 'b00000010000010010xx0001010000100000001xx00011;
	cfgsin30[0:44] =  45 'b00000001000010xx0100010000001000100xx00010000;
	cfgsin29[0:44] =  45 'b10100000001xx1000001000100000100xx10000000100;
	cfgsin28[0:44] =  45 'b01000100xx0000001000001000001xx00000001000010;
	cfgsin27[0:44] =  45 'b00100xx1000010000000001100xx00000001001000000;
	cfgsin26[0:44] =  45 'b10xx0000010000010000010xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000010000001000010xx1000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0100;
end
endtask
task get_wl_pat274; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100x00000000010001000001xx00;
	cfgsin1[0:44] =  45 'b00000010001000001xx0000000010001000001xx00001;
	cfgsin2[0:44] =  45 'b00000001000001xx0000001000010000010xx00000010;
	cfgsin3[0:44] =  45 'b00010000010xx0000000010001000010xx00001000000;
	cfgsin4[0:44] =  45 'b01000010xx0000000100000010100xx00000010000010;
	cfgsin5[0:44] =  45 'b00100xx0000000010001000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx1000000001100000010xx0000001000010000010x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0000001000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00000001000001001xx0110001000000001010xx01000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000001000010xx00000010;
	cfgsin13[0:44] =  45 'b00001000010xx0000000001000100010xx00000010000;
	cfgsin12[0:44] =  45 'b01000001xx0100001000010000100xx00000010000001;
	cfgsin11[0:44] =  45 'b00100xx0000001000000001100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000000100001000001xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000001000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b00010001000100xx0000000100100000010xx00000010;
	cfgsin19[0:44] =  45 'b00001000100xx0001001000001000100xx00000010000;
	cfgsin20[0:44] =  45 'b01000001xx0000001000100000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00001xx0000001000000001010xx00000000100010001;
	cfgsin22[0:44] =  45 'b00xx0001010000001000001xx0000000010000001001x;
	cfgsin23[0:44] =  45 'bx0000000100001000001xx0000001000001000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000000100001xx0000000100000001001xx01000;
	cfgsin30[0:44] =  45 'b00010001000001xx0000010000010000001xx01001000;
	cfgsin29[0:44] =  45 'b00001000100xx0000001000010000100xx00000000010;
	cfgsin28[0:44] =  45 'b01000001xx0000001000001000001xx00000010000100;
	cfgsin27[0:44] =  45 'b00010xx0000010000000100010xx00000000100100001;
	cfgsin26[0:44] =  45 'b00xx1000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000001000001xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
end
endtask
task get_wl_pat273; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000100x00000001000001000001xx00;
	cfgsin1[0:44] =  45 'b00001000001000001xx0000000010001000001xx00100;
	cfgsin2[0:44] =  45 'b00010000010001xx0000100000000100010xx10001000;
	cfgsin3[0:44] =  45 'b00100000010xx0000001000000001100xx00000000100;
	cfgsin4[0:44] =  45 'b10000001xx0000001000000100001xx00000000010010;
	cfgsin5[0:44] =  45 'b00001xx0000000001001000100xx00010010000000011;
	cfgsin6[0:44] =  45 'b00xx0000010000100000010xx0000001000000001010x;
	cfgsin7[0:44] =  45 'bx0000000010001000001xx0000001000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00000100000001001xx0000000001000001100xx00000;
	cfgsin14[0:44] =  45 'b10000100000100xx0000000100001000100xx10000010;
	cfgsin13[0:44] =  45 'b00010000010xx0000001000001000001xx00000010000;
	cfgsin12[0:44] =  45 'b00001001xx0000001000100000100xx00000010000000;
	cfgsin11[0:44] =  45 'b01100xx0000001000100000100xx00000010000000010;
	cfgsin10[0:44] =  45 'b10xx0000001000001000001xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000001000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000001000010xx1000000100001000100xx00000001;
	cfgsin19[0:44] =  45 'b00001000001xx0000000010001000001xx00000001000;
	cfgsin20[0:44] =  45 'b00001100xx1000100000010000100xx00000010000010;
	cfgsin21[0:44] =  45 'b00001xx0000001000100000010xx00000010000010000;
	cfgsin22[0:44] =  45 'b01xx0000000100001000001xx0000000010000001001x;
	cfgsin23[0:44] =  45 'bx0000000100001000001xx0000000010001000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000010xx0000000010100000100xx00001;
	cfgsin30[0:44] =  45 'b00000000001100xx0000001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00001000010xx0000001000100000100xx00000010000;
	cfgsin28[0:44] =  45 'b01000001xx0000000001001000001xx00000010000000;
	cfgsin27[0:44] =  45 'b10001xx0000000010010000001xx10000010000000010;
	cfgsin26[0:44] =  45 'b01xx0000000010010000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000001000001xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
end
endtask
task get_wl_pat272; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100xx0000001000001000100xx00;
	cfgsin1[0:44] =  45 'b00001000001000100xx0000000100001000100xx00000;
	cfgsin2[0:44] =  45 'b10000001000100xx0000001000010000010xx00000010;
	cfgsin3[0:44] =  45 'b00000001001xx0000000001001000001xx00000001000;
	cfgsin4[0:44] =  45 'b01000100xx0100010000001000100xx00000010000010;
	cfgsin5[0:44] =  45 'b00010xx0000000100000010100xx00000001001000001;
	cfgsin6[0:44] =  45 'b00xx1000010000000001001xx0000000010010000100x;
	cfgsin7[0:44] =  45 'bx0000001000000001100xx0100000010001000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000001000010xx1000001000000001100xx01000;
	cfgsin14[0:44] =  45 'b00010001000100xx0000100000001000100xx00000001;
	cfgsin13[0:44] =  45 'b00001000001xx0000100000001000100xx00000010000;
	cfgsin12[0:44] =  45 'b01000100xx0000000100010000100xx00000001001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000010000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000001000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000001000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000001000001xx0000000001000010100xx00101000;
	cfgsin19[0:44] =  45 'b00000001010xx0000000100001000010xx00000000100;
	cfgsin20[0:44] =  45 'b10000010xx0000000100000010100xx00000010000010;
	cfgsin21[0:44] =  45 'b00001xx0000000010100000010xx00000010000010000;
	cfgsin22[0:44] =  45 'b01xx0000001000001000001xx0000000010001000001x;
	cfgsin23[0:44] =  45 'bx0000000100001000001xx0000010000001000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00000010001000010xx0000000100000100100xx00000;
	cfgsin30[0:44] =  45 'b10000001000010xx0000100000000100010xx00000100;
	cfgsin29[0:44] =  45 'b00001000001xx0000001000000100100xx00000010000;
	cfgsin28[0:44] =  45 'b01000001xx0000001000001000010xx00000000101000;
	cfgsin27[0:44] =  45 'b00100xx0000100000001000100xx00000001000001000;
	cfgsin26[0:44] =  45 'b10xx0000001000001000010xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000001000001xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
end
endtask
task get_wl_pat271; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx1001001000001000001xx00;
	cfgsin1[0:44] =  45 'b00001000001000001xx0000000100100000001xx00001;
	cfgsin2[0:44] =  45 'b00000001000001xx0100100000010000001xx00000010;
	cfgsin3[0:44] =  45 'b00010000100xx1000001000001000010xx01000100000;
	cfgsin4[0:44] =  45 'b01000001xx0000000001000001001xx00000010000010;
	cfgsin5[0:44] =  45 'b00100xx0000001000001000001xx00001000001000000;
	cfgsin6[0:44] =  45 'b01xx0000001000100000100xx0000000010010000010x;
	cfgsin7[0:44] =  45 'bx0000100000001000001xx0000000010001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b01000010001000100xx0000000100000001010xx00000;
	cfgsin14[0:44] =  45 'b00100100000001xx1001000100100000001xx00010100;
	cfgsin13[0:44] =  45 'b00001000100xx0000000010001000001xx00000010000;
	cfgsin12[0:44] =  45 'b01000010xx1000001000010000100xx01000010001000;
	cfgsin11[0:44] =  45 'b00100xx1000001000010000100xx01000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000001000001xx1000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00010000001000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000001000001xx0000001000000010001xx00001000;
	cfgsin19[0:44] =  45 'b00000010100xx0000001000001000001xx00000000010;
	cfgsin20[0:44] =  45 'b00001010xx0010001000001000100xx00000010000010;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00000010000010001;
	cfgsin22[0:44] =  45 'b00xx0000000100001000010xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000001000100xx0000000100001000010xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000100000010xx0000001000100000001xx00000;
	cfgsin30[0:44] =  45 'b01000001000010xx0000100000000010100xx00000000;
	cfgsin29[0:44] =  45 'b10001000001xx0000100000100000100xx00000010000;
	cfgsin28[0:44] =  45 'b01000100xx0101001000001000100xx00001000000001;
	cfgsin27[0:44] =  45 'b00010xx0000000100000010100xx00100010000010000;
	cfgsin26[0:44] =  45 'b10xx0000001000010000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000001000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
end
endtask
task get_wl_pat270; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx0001000000001001xx1x;
	cfgsin1[0:44] =  45 'bx1001000000010001xx1xx1000100010000001xx1xx00;
	cfgsin2[0:44] =  45 'b01000010000010xx0xx1000001000010100xx0xx10000;
	cfgsin3[0:44] =  45 'b10000001010xx0xx1100000000100100xx0xx10001000;
	cfgsin4[0:44] =  45 'b10000010xx0xx1100000001000010xx1xx10000011000;
	cfgsin5[0:44] =  45 'b00001xx1xx1000100010000001xx1xx00010000010000;
	cfgsin6[0:44] =  45 'b10xx0xx1100000010000010xx1xx1000100001000010x;
	cfgsin7[0:44] =  45 'bx1xx1000010100000001xx0xx1000100100000001xx1x;
// TR
	cfgsin15[0:44] =  45 'bx0001000000010001xx0xx1100000001000010xx0xx10;
	cfgsin14[0:44] =  45 'b00010000001100xx0xx0001000000001010xx0xx01000;
	cfgsin13[0:44] =  45 'b00001000010xx1xx1010000001000001xx1xx10010000;
	cfgsin12[0:44] =  45 'b00001010xx0xx1000100010000100xx0xx10010000100;
	cfgsin11[0:44] =  45 'b00100xx0xx1001000100000100xx0xx10010001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1001000100000001xx0xx1001000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000010000001000100xx1000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0010001000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000001000010xx0100100000000001100xx10000001;
	cfgsin19[0:44] =  45 'b00001000001xx0101000010001000100xx10010100000;
	cfgsin20[0:44] =  45 'b00001100xx1000001000000001010xx00000010000010;
	cfgsin21[0:44] =  45 'b00001xx0010001000000001001xx00000010000010000;
	cfgsin22[0:44] =  45 'b01xx0001000100001000100xx0001001000000001001x;
	cfgsin23[0:44] =  45 'bx0001000010001000001xx0000001000001000100xx00;
// BR
	cfgsin31[0:44] =  45 'b01000100000001001xx0000000100000001100xx00000;
	cfgsin30[0:44] =  45 'b01000100000100xx1000001000100000001xx00000000;
	cfgsin29[0:44] =  45 'b10001000100xx0000000100100000100xx00010010000;
	cfgsin28[0:44] =  45 'b01000001xx0000001000001000001xx00000100001000;
	cfgsin27[0:44] =  45 'b00100xx0001100000000001010xx10000000100000010;
	cfgsin26[0:44] =  45 'b01xx0000000100010000100xx0010001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000001000001xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000100000001xx000;
end
endtask
task get_wl_pat269; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000001x00xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx1100000100000100x01xx1100000010000100x00xx00;
	cfgsin2[0:44] =  45 'b01000000100100x00xx0001000001000100x00xx00100;
	cfgsin3[0:44] =  45 'b00001000100x01xx0000010001000001x00xx00010000;
	cfgsin4[0:44] =  45 'b01000010x10xx0010000000001010x01xx00010000100;
	cfgsin5[0:44] =  45 'b00010x00xx0010000000010100x00xx10100000001000;
	cfgsin6[0:44] =  45 'b10x00xx0100000001000001x00xx1000010001000100x;
	cfgsin7[0:44] =  45 'b00xx1010000001000010x00xx1010000100000010x01x;
// TR
	cfgsin15[0:44] =  45 'bx1010000010000010x01xx1100000001000001x10xx10;
	cfgsin14[0:44] =  45 'b10000000100001x00xx1100000010000010x00xx10000;
	cfgsin13[0:44] =  45 'b01001000100x00xx1010000000100100x01xx11000001;
	cfgsin12[0:44] =  45 'b00000010x00xx1010000010000100x00xx10100000100;
	cfgsin11[0:44] =  45 'b00010x00xx1010000100000010x00xx10100000000010;
	cfgsin10[0:44] =  45 'b10x01xx1010000100000001x01xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100x00xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx0001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b00100000010001xx0xx1001000010000010xx0xx00010;
	cfgsin19[0:44] =  45 'b00001000010xx0xx0100000000010010xx0xx01000000;
	cfgsin20[0:44] =  45 'b01000001xx0xx0001000000010100xx1xx10010000100;
	cfgsin21[0:44] =  45 'b00001xx1xx0001000001000010xx1xx10010001000000;
	cfgsin22[0:44] =  45 'b01xx1xx0001000100000001xx1xx0001000001000001x;
	cfgsin23[0:44] =  45 'bx1xx0001000010000001xx1xx1000010001000001xx1x;
// BR
	cfgsin31[0:44] =  45 'bx0001000000001100xx1xx1000100100000010xx1xx10;
	cfgsin30[0:44] =  45 'b01000010000001xx0xx1000100000100010xx1xx10001;
	cfgsin29[0:44] =  45 'b00000010010xx1xx1000010100000100xx1xx00010001;
	cfgsin28[0:44] =  45 'b00000001xx0xx0001000100000001xx1xx10010000100;
	cfgsin27[0:44] =  45 'b00001xx1xx0001000000001100xx0xx00100000010000;
	cfgsin26[0:44] =  45 'b10xx1xx1001000000010100xx1xx0001000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000001xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat268; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx1000100000100000010x000;
	cfgsin1[0:44] =  45 'b00100000100000010x00000100000010000010x000011;
	cfgsin2[0:44] =  45 'b00000000001010x00010010000010000001x010010100;
	cfgsin3[0:44] =  45 'b00000010100x00001010000010000010x001010100000;
	cfgsin4[0:44] =  45 'b00010100x00001001000010000001x000000001001000;
	cfgsin5[0:44] =  45 'b00100x11001010000010000010x010000100000010001;
	cfgsin6[0:44] =  45 'b00x01001010000000010010x01000010000001000001x;
	cfgsin7[0:44] =  45 'b00000001000100000100x00100010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00100000010000001x00000010000001000100x000000;
	cfgsin14[0:44] =  45 'b10000010000010x01000000001001000100x000000100;
	cfgsin13[0:44] =  45 'b00000001001x01000010000001000010x100000100000;
	cfgsin12[0:44] =  45 'b01000001x00000010000010000010x010000100000100;
	cfgsin11[0:44] =  45 'b00100x00000001000100000100x001000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000001x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000001x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx0100000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b00100010000100x00xx0010000001000010x10xx10010;
	cfgsin19[0:44] =  45 'b00010000100x10xx1100000001000100x00xx00010000;
	cfgsin20[0:44] =  45 'b01000001x00xx0010000000100010x01xx10100000010;
	cfgsin21[0:44] =  45 'b00100x01xx0100000001000001x00xx00100001000000;
	cfgsin22[0:44] =  45 'b01x00xx1010000100000100x01xx1010000100000001x;
	cfgsin23[0:44] =  45 'b01xx1010000100000010x01xx1010000001000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1010000001000001x01xx1010000100000001x01xx10;
	cfgsin30[0:44] =  45 'b10000001000010x00xx1010000001000100x01xx10010;
	cfgsin29[0:44] =  45 'b00010000010x01xx1010000100000010x00xx10010001;
	cfgsin28[0:44] =  45 'b00000010x00xx1000010000001001x01xx10100000010;
	cfgsin27[0:44] =  45 'b00001x00xx1010000010000001x01xx10010000010000;
	cfgsin26[0:44] =  45 'b01x00xx1010000000001010x00xx1010000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000010000010x00xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000001x01x0;
end
endtask
task get_wl_pat267; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000001xx0000010000000010001x100;
	cfgsin1[0:44] =  45 'b00010000000001001x00000010000100000001x101000;
	cfgsin2[0:44] =  45 'b10000100000001x10000100000100000010x100001000;
	cfgsin3[0:44] =  45 'b00100000100x10000010000100000100x100000100000;
	cfgsin4[0:44] =  45 'b00100001x10000010000000010100x100000100000010;
	cfgsin5[0:44] =  45 'b00001x10000010000100000001x100001000000100000;
	cfgsin6[0:44] =  45 'b01x10000010000100000100x10000100000001000010x;
	cfgsin7[0:44] =  45 'b10000010000000001001x10000010000000001001x100;
// TR
	cfgsin15[0:44] =  45 'b00010000000100100x10000100000001000010x100001;
	cfgsin14[0:44] =  45 'b00000100000100x10000010000000010001x100000100;
	cfgsin13[0:44] =  45 'b00001000010x10000010000100000001x100000100000;
	cfgsin12[0:44] =  45 'b00001100x10000100000100000001x100001000000000;
	cfgsin11[0:44] =  45 'b01001x10000100000000001001x100001000000000010;
	cfgsin10[0:44] =  45 'b01x10000010000100000001x10000010000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b10100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000001000010x10000001000000100001x100000100;
	cfgsin19[0:44] =  45 'b00000100010x01000000010000100010x000010100001;
	cfgsin20[0:44] =  45 'b00000100x01001100000001000001x000000100000010;
	cfgsin21[0:44] =  45 'b00010x00001010000000001010x000000100001000000;
	cfgsin22[0:44] =  45 'b01x01000010000100000010x00000010000100000100x;
	cfgsin23[0:44] =  45 'b00000010000100000100x00000010000001000010x000;
// BR
	cfgsin31[0:44] =  45 'b00010000010000100x00000100000000010010x000000;
	cfgsin30[0:44] =  45 'b10000001000100x00000010000000001001x100000000;
	cfgsin29[0:44] =  45 'b10000001100x10000010000100000001x000000000101;
	cfgsin28[0:44] =  45 'b00000100x00000010000100000001x000000001000100;
	cfgsin27[0:44] =  45 'b00010x10100000010000100010x000000100000010001;
	cfgsin26[0:44] =  45 'b00x00000010000001000001x00100010000100000100x;
	cfgsin25[0:44] =  45 'b00000001000010000100x01000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001010000100000100xx00x;
end
endtask
task get_wl_pat266; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000100000001x000;
	cfgsin1[0:44] =  45 'b00100000100000001x00000100000010000001x000000;
	cfgsin2[0:44] =  45 'b01000010000001x00100100000001000100x000001000;
	cfgsin3[0:44] =  45 'b00001000010x00000001000000010001x000000000010;
	cfgsin4[0:44] =  45 'b01000010x01000000100100000100x000100100001000;
	cfgsin5[0:44] =  45 'b00001x00000010000010000001x000001000000010000;
	cfgsin6[0:44] =  45 'b10x00000100000001000010x00000010000001000010x;
	cfgsin7[0:44] =  45 'b01000010000100000100x00000010000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00100000000001010x00000010000001000010x010000;
	cfgsin14[0:44] =  45 'b10000010000100x00000010000010000001x010000000;
	cfgsin13[0:44] =  45 'b10000001010x00000100000000001010x000001000001;
	cfgsin12[0:44] =  45 'b00000100x11000100000000100100x000000100000000;
	cfgsin11[0:44] =  45 'b01010x00100010000000001001x100000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000000001010x10000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100000;
	cfgsin18[0:44] =  45 'b10000100000001x10010010000100000100x100000100;
	cfgsin19[0:44] =  45 'b00100000001x10000010000100000001x101000000100;
	cfgsin20[0:44] =  45 'b01000010x10000010000010000100x100000100001000;
	cfgsin21[0:44] =  45 'b00001x10000010000100000100x110000100001000000;
	cfgsin22[0:44] =  45 'b01x10000010000010000001x10000010000001000010x;
	cfgsin23[0:44] =  45 'b10000010000000100001x10000010000010000001x100;
// BR
	cfgsin31[0:44] =  45 'b00000010001000010x10000000010010000100x100000;
	cfgsin30[0:44] =  45 'b10000100000001x10100001000001000010x100000100;
	cfgsin29[0:44] =  45 'b00001000001x10000010000000001100x100000100000;
	cfgsin28[0:44] =  45 'b00001001x11000010000100000001x100000000101000;
	cfgsin27[0:44] =  45 'b00100x10000001000100000100x100000000100010000;
	cfgsin26[0:44] =  45 'b10x10000001000100000100x10000010000100000100x;
	cfgsin25[0:44] =  45 'b10000010000001000001x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat265; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000001x000;
	cfgsin1[0:44] =  45 'b01100000100000001x00000100000010000001x000001;
	cfgsin2[0:44] =  45 'b00000000010001x00000100000000100010x010001000;
	cfgsin3[0:44] =  45 'b00001000010x01000000100000001010x100000100001;
	cfgsin4[0:44] =  45 'b00000010x00100000001000100001x100000000011000;
	cfgsin5[0:44] =  45 'b00001x00000010000010000001x000000000100001001;
	cfgsin6[0:44] =  45 'b00x00000100000001000010x00000010000001000100x;
	cfgsin7[0:44] =  45 'b10000010000000010001x01000010000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00010010000100000001x000000;
	cfgsin14[0:44] =  45 'b10000010000100x00000000010000100010x010011000;
	cfgsin13[0:44] =  45 'b00000100100x11000001000010000001x100001000000;
	cfgsin12[0:44] =  45 'b01000001x00000100000000001010x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000001000100x000000010000100001;
	cfgsin10[0:44] =  45 'b00x00000010000000010001x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000000001001x01000100000000001100x101000100;
	cfgsin19[0:44] =  45 'b00000001010x00000010000001000001x000000000100;
	cfgsin20[0:44] =  45 'b01000100x10000000100000100100x000000100000010;
	cfgsin21[0:44] =  45 'b00001x00000010000001000010x000010100001000000;
	cfgsin22[0:44] =  45 'b01x00000010000100000001x00000010000001000010x;
	cfgsin23[0:44] =  45 'b00000010000100000001x00000010000001000001x000;
// BR
	cfgsin31[0:44] =  45 'b00010000001000010x00000010000000001010x000000;
	cfgsin30[0:44] =  45 'b10000001000010x00000100000100000100x000000100;
	cfgsin29[0:44] =  45 'b00100000001x00000100000000001100x010000100000;
	cfgsin28[0:44] =  45 'b00001010x00000100000000010001x000000010000100;
	cfgsin27[0:44] =  45 'b00100x00000000001001000100x000000010000010000;
	cfgsin26[0:44] =  45 'b10x01000010000010000100x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000100000010000001x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat264; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000001x000;
	cfgsin1[0:44] =  45 'b00100000100000001x01000100000010000001x000001;
	cfgsin2[0:44] =  45 'b00000010000100x11000001000001000010x000000000;
	cfgsin3[0:44] =  45 'b01000001100x00000000001001000001x010000100000;
	cfgsin4[0:44] =  45 'b10000010x00000010000100000100x000000100000000;
	cfgsin5[0:44] =  45 'b10001x00000010000000100001x000000000010010001;
	cfgsin6[0:44] =  45 'b00x00010100000000100010x00000001000001000010x;
	cfgsin7[0:44] =  45 'b00000000001000100001x00000010000100000001x010;
// TR
	cfgsin15[0:44] =  45 'b00010000010000001x10000010000100000010x000000;
	cfgsin14[0:44] =  45 'b10000000001100x00000010000000001001x000000010;
	cfgsin13[0:44] =  45 'b00100000010x00010000010000010010x000001000001;
	cfgsin12[0:44] =  45 'b00000001x00000100000010000010x000000100000100;
	cfgsin11[0:44] =  45 'b00001x10000010000100000010x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000001x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b00001000100100x10000000001001000010x000000010;
	cfgsin19[0:44] =  45 'b00000100001x00000000100000001001x000000100000;
	cfgsin20[0:44] =  45 'b00100010x00000000010100000001x000010000010010;
	cfgsin21[0:44] =  45 'b00001x00000010000001000010x000000000011000000;
	cfgsin22[0:44] =  45 'b01x00001100000100000001x00000010000000001001x;
	cfgsin23[0:44] =  45 'b00000000010100000001x00001100000100000001x000;
// BR
	cfgsin31[0:44] =  45 'b00010000100000100x10000100000100000100x001000;
	cfgsin30[0:44] =  45 'b01000000001001x10100010000001000010x100000010;
	cfgsin29[0:44] =  45 'b00000010100x10000010000000100010x000000100000;
	cfgsin28[0:44] =  45 'b01000001x00000000010010000010x100000100000001;
	cfgsin27[0:44] =  45 'b00001x10000000010000010001x000000100000010001;
	cfgsin26[0:44] =  45 'b00x10000000010000100010x10000010000100000100x;
	cfgsin25[0:44] =  45 'b00000100000010000001x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat263; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000001001001001000100000001x000;
	cfgsin1[0:44] =  45 'b00001000100000001x00000000001000001001x000000;
	cfgsin2[0:44] =  45 'b00010000001010x00000000001001000100x100000010;
	cfgsin3[0:44] =  45 'b00000001010x00000010000001000001x100001000000;
	cfgsin4[0:44] =  45 'b00001010x00000010000100000010x001001000001000;
	cfgsin5[0:44] =  45 'b00001x01000010000000001001x001011000000010000;
	cfgsin6[0:44] =  45 'b01x10100001000001000100x00000010000001000010x;
	cfgsin7[0:44] =  45 'b01000100000100000001x00000100000100000001x000;
// TR
	cfgsin15[0:44] =  45 'b01001000000001001x00000100000001000001x000000;
	cfgsin14[0:44] =  45 'b01000000001100x00001100000000001001x000000100;
	cfgsin13[0:44] =  45 'b00000001001x10000010000000001001x000000010000;
	cfgsin12[0:44] =  45 'b00001010x01000010000001000100x000001000000000;
	cfgsin11[0:44] =  45 'b01100x00000100000000001100x010001000000000011;
	cfgsin10[0:44] =  45 'b00x01000001000100000001x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b00100000001001x00000000010000001001x000000010;
	cfgsin19[0:44] =  45 'b00000001100x00000010000001000010x100000100000;
	cfgsin20[0:44] =  45 'b01000001x00000010000000100001x000000100000010;
	cfgsin21[0:44] =  45 'b00001x01000010000001000010x000000100000100000;
	cfgsin22[0:44] =  45 'b01x00000000100100000001x00000100000001000001x;
	cfgsin23[0:44] =  45 'b00000100000100000001x00000000001000100001x000;
// BR
	cfgsin31[0:44] =  45 'b00100000001000010x00000010000000001100x000001;
	cfgsin30[0:44] =  45 'b00000000010010x00000001000000001100x000001000;
	cfgsin29[0:44] =  45 'b00000001001x01000010000100000010x000000100001;
	cfgsin28[0:44] =  45 'b00000100x00000100000100000001x000000100000000;
	cfgsin27[0:44] =  45 'b01100x00000010000000001010x000100000100001000;
	cfgsin26[0:44] =  45 'b10x01000010000001000100x00000010000100000100x;
	cfgsin25[0:44] =  45 'b01000100000010000001x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat262; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx0001000100000001x01x;
	cfgsin1[0:44] =  45 'bx0001000100000001x00xx1100000100000001x01xx11;
	cfgsin2[0:44] =  45 'b00000100000100x00xx1010000010000010x00xx10010;
	cfgsin3[0:44] =  45 'b00001000100x10xx1100000000100100x00xx10010000;
	cfgsin4[0:44] =  45 'b00001100x00xx1000001000001100x00xx10010000000;
	cfgsin5[0:44] =  45 'b10001x00xx1100000000001001x00xx00100000001000;
	cfgsin6[0:44] =  45 'b01x00xx0100000000001010x01xx1010000001000001x;
	cfgsin7[0:44] =  45 'b00xx1010000000010100x00xx1010000000100001x00x;
// TR
	cfgsin15[0:44] =  45 'bx0000001001000010x01xx0000010010000100x01xx11;
	cfgsin14[0:44] =  45 'b00000100000100x01xx0010000000010010x00xx00100;
	cfgsin13[0:44] =  45 'b00100000100x00xx0100000100000100x01xx10001000;
	cfgsin12[0:44] =  45 'b10000100x00xx1100000001000010x01xx10010000010;
	cfgsin11[0:44] =  45 'b00010x01xx1010000001000001x00xx10100000010000;
	cfgsin10[0:44] =  45 'b01x00xx1010000010000010x01xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000001000000100000100000100x000;
	cfgsin17[0:44] =  45 'b00010000100000100x00000100000100000100x000000;
	cfgsin18[0:44] =  45 'b00001001000001x00000000001000001100x001000010;
	cfgsin19[0:44] =  45 'b00000001100x01001000010010000001x000001000000;
	cfgsin20[0:44] =  45 'b01000100x10001010000001000100x000000010000000;
	cfgsin21[0:44] =  45 'b01001x00000001000001000010x010010100000000010;
	cfgsin22[0:44] =  45 'b01x00000001000000001001x00000010000001000001x;
	cfgsin23[0:44] =  45 'b00000010000000001001x00000010000000001010x100;
// BR
	cfgsin31[0:44] =  45 'b01100000010000100x00010010000100000100x100000;
	cfgsin30[0:44] =  45 'b01000001000001x00000010000000001010x000000000;
	cfgsin29[0:44] =  45 'b01000001001x00000010000000001100x010011000000;
	cfgsin28[0:44] =  45 'b00001001x00110010000000001001x000000001000000;
	cfgsin27[0:44] =  45 'b01100x00001010000000001100x000001000000010000;
	cfgsin26[0:44] =  45 'b10x00000010000000001100x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000100000000001001x01000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x010010100000000010010010x;
end
endtask
task get_wl_pat261; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000001xx0xx1001000100000001x00x;
	cfgsin1[0:44] =  45 'bx1001000100000001x00xx0010000010000001x01xx00;
	cfgsin2[0:44] =  45 'b10000010000001x01xx0100000000100001x01xx00000;
	cfgsin3[0:44] =  45 'b01100000001x01xx0000100000001010x00xx00100000;
	cfgsin4[0:44] =  45 'b01000001x01xx0100000001000001x00xx00000010010;
	cfgsin5[0:44] =  45 'b00001x01xx0010000001000001x01xx00100000010000;
	cfgsin6[0:44] =  45 'b10x01xx1001000000010010x01xx1100000100000100x;
	cfgsin7[0:44] =  45 'b00xx0010000001000010x10xx0010000010000001x01x;
// TR
	cfgsin15[0:44] =  45 'bx0010000000010100x01xx0010000000001010x00xx10;
	cfgsin14[0:44] =  45 'b10000001000100x01xx0010000000001100x00xx01000;
	cfgsin13[0:44] =  45 'b00100000010x00xx1010000000001010x00xx11000000;
	cfgsin12[0:44] =  45 'b10000001x01xx1001000001000001x01xx10100000010;
	cfgsin11[0:44] =  45 'b00001x01xx1001000001000010x01xx10100000010000;
	cfgsin10[0:44] =  45 'b10x01xx1010000010000100x01xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x1xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx1100000100000100x01xx11;
	cfgsin18[0:44] =  45 'b00000000001100x01xx1000100000001010x10xx11000;
	cfgsin19[0:44] =  45 'b00100000010x00xx0100000010000010x01xx10100000;
	cfgsin20[0:44] =  45 'b10000001x01xx0000001001000010x01xx01000001000;
	cfgsin21[0:44] =  45 'b00001x00xx1100000100000010x00xx00100001000000;
	cfgsin22[0:44] =  45 'b01x01xx0001000010000001x01xx1010000100000010x;
	cfgsin23[0:44] =  45 'b01xx1010000100000001x01xx0000001000010001x01x;
// BR
	cfgsin31[0:44] =  45 'bx0000001001000001x01xx0010000001000100x00xx10;
	cfgsin30[0:44] =  45 'b00001001000100x00xx1000001000010100x01xx10100;
	cfgsin29[0:44] =  45 'b00100000100x00xx1010000001000010x00xx00100000;
	cfgsin28[0:44] =  45 'b01000010x00xx0010000100000010x01xx11000000010;
	cfgsin27[0:44] =  45 'b00001x01xx0100000000010001x01xx00100000001001;
	cfgsin26[0:44] =  45 'b00x00xx1000001001000010x01xx1010000100000100x;
	cfgsin25[0:44] =  45 'b00xx1000001010000001x00xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x00xx00100001000001000x0x0;
end
endtask
task get_wl_pat260; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx1000100000100000001xx00;
	cfgsin1[0:44] =  45 'b00100000100000001xx1001010000010000001xx00000;
	cfgsin2[0:44] =  45 'b00010010000001xx0000001000000001010xx00000000;
	cfgsin3[0:44] =  45 'b01000100001xx0000000001001000001xx10000100000;
	cfgsin4[0:44] =  45 'b10000001xx0010001000010000100xx10100100000001;
	cfgsin5[0:44] =  45 'b00001xx0000100000100000010xx00000000100010000;
	cfgsin6[0:44] =  45 'b10xx0000100000000100001xx0000010000100000010x;
	cfgsin7[0:44] =  45 'bx0001000100001000100xx1010010000010000001xx00;
// TR
	cfgsin15[0:44] =  45 'b01001000100000001xx0010010000010000001xx00000;
	cfgsin14[0:44] =  45 'b01000001000100xx0001010000010000001xx01000001;
	cfgsin13[0:44] =  45 'b00001000001xx0100100000100000001xx10001000000;
	cfgsin12[0:44] =  45 'b10000001xx0000001000001000100xx00000010000010;
	cfgsin11[0:44] =  45 'b00100xx0000001000001000100xx00000010000010001;
	cfgsin10[0:44] =  45 'b00xx0000010000010000001xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000001xx0xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000010x00xx0100000010000001x00xx00000;
	cfgsin19[0:44] =  45 'b01000100001x01xx0010000000100100x00xx10100000;
	cfgsin20[0:44] =  45 'b01000010x00xx0100000001000001x01xx10100001000;
	cfgsin21[0:44] =  45 'b00001x01xx1001000100000010x01xx10100000000100;
	cfgsin22[0:44] =  45 'b01x11xx0001000100000001x01xx1010000100000100x;
	cfgsin23[0:44] =  45 'b01xx1010000100000001x01xx0010000010000001x00x;
// BR
	cfgsin31[0:44] =  45 'bx0100000100000010x00xx0010000001000001x00xx10;
	cfgsin30[0:44] =  45 'b10000000010010x00xx0010000010000001x01xx00100;
	cfgsin29[0:44] =  45 'b00000001010x01xx0010000001000001x01xx10100000;
	cfgsin28[0:44] =  45 'b10000100x01xx1010000100000100x01xx10010000010;
	cfgsin27[0:44] =  45 'b00010x01xx1001000000001010x01xx10000010010000;
	cfgsin26[0:44] =  45 'b01x01xx1100000001000001x01xx1010000100000100x;
	cfgsin25[0:44] =  45 'b01xx1001000010000001x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
end
endtask
task get_wl_pat259; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000000001001xx00;
	cfgsin1[0:44] =  45 'b00100000000001001xx0000010000000010001xx00010;
	cfgsin2[0:44] =  45 'b00001001000001xx0001000010100000010xx00000100;
	cfgsin3[0:44] =  45 'b00001000010xx0000010000100000001xx00000010001;
	cfgsin4[0:44] =  45 'b00000001xx0000000100100000100xx00000100001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000000010100xx00000010001000000;
	cfgsin6[0:44] =  45 'b10xx0000000001001000100xx0000000100000010010x;
	cfgsin7[0:44] =  45 'bx0100010000100000010xx0000010000100000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00000100001000001xx0000000010100000100xx00000;
	cfgsin14[0:44] =  45 'b01000001000010xx0000001000100000010xx00000000;
	cfgsin13[0:44] =  45 'b01010000001xx0000010000000100001xx00000000100;
	cfgsin12[0:44] =  45 'b01000001xx0000001000000001100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000010000001xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00000;
	cfgsin18[0:44] =  45 'b00010000001001xx0101010000100000100xx10000100;
	cfgsin19[0:44] =  45 'b00000001010xx0001010000000010100xx00000000010;
	cfgsin20[0:44] =  45 'b00010001xx1001001000001000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00001xx0000100000100000010xx00001000001000000;
	cfgsin22[0:44] =  45 'b01xx0001100000000100001xx0000100000100000010x;
	cfgsin23[0:44] =  45 'bx0000100000100000001xx0000100000000100001xx00;
// BR
	cfgsin31[0:44] =  45 'b00000010000100010xx1001001000000001100xx01000;
	cfgsin30[0:44] =  45 'b01000100000001xx1010001000100000100xx00011000;
	cfgsin29[0:44] =  45 'b00001000001xx0000001000001000100xx00000000100;
	cfgsin28[0:44] =  45 'b10000001xx0000100000100000001xx00000010000000;
	cfgsin27[0:44] =  45 'b01100xx0000001000001000001xx00000100001000000;
	cfgsin26[0:44] =  45 'b01xx0000001000001000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000010000010000001xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat258; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx001x001xx0000100000xx100x001xx10;
	cfgsin1[0:44] =  45 'b00100000xx100x001xx0000010000xx010x001xx00000;
	cfgsin2[0:44] =  45 'b00100xx010x100xx0000001000xx100x100xx00100000;
	cfgsin3[0:44] =  45 'b10xx010x100xx0001000010xx100x100xx0001000010x;
	cfgsin4[0:44] =  45 'bx010x100xx0000001000xx001x010xx0000000001xx10;
	cfgsin5[0:44] =  45 'b0x010xx0001001000xx010x001xx0010010000xx010x1;
	cfgsin6[0:44] =  45 'b00xx0000000100xx100x010xx0000100000xx100x010x;
	cfgsin7[0:44] =  45 'bx0000001000xx100x001xx0000010000xx100x001xx00;
// TR
	cfgsin15[0:44] =  45 'b00000001xx010x100xx0000000001xx100x010xx01000;
	cfgsin14[0:44] =  45 'b01000xx010x001xx0000001000xx010x100xx00100000;
	cfgsin13[0:44] =  45 'b10xx001x100xx0000100000xx001x010xx0000010000x;
	cfgsin12[0:44] =  45 'bx100x001xx0000001000xx010x100xx0000001000xx10;
	cfgsin11[0:44] =  45 'b0x100xx0000001000xx100x100xx0000001000xx100x1;
	cfgsin10[0:44] =  45 'b00xx0000010000xx100x001xx0000100000xx100x100x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000001x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000000100010xx0000001000001000010xx00000010;
	cfgsin19[0:44] =  45 'b00000010100xx0000000100100000001xx00000010001;
	cfgsin20[0:44] =  45 'b00000010xx0000001000001000100xx00001000000000;
	cfgsin21[0:44] =  45 'b01001xx0000100000001000010xx00001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000100000000010001xx0000000001010000010x;
	cfgsin23[0:44] =  45 'bx0000100000010000001xx0001100000000001001xx01;
// BR
	cfgsin31[0:44] =  45 'b00000100010000010xx0000000001001000100xx00001;
	cfgsin30[0:44] =  45 'b00000010000100xx0000000001000100010xx00000001;
	cfgsin29[0:44] =  45 'b00010000010xx0010001000001000100xx00000000011;
	cfgsin28[0:44] =  45 'b00000001xx0000001000100000001xx00000010000010;
	cfgsin27[0:44] =  45 'b00010xx0000001000001000010xx00000000011000000;
	cfgsin26[0:44] =  45 'b10xx0000001000001000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000010000100000001xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat257; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx001x001x00000000001xx001x1001x00;
	cfgsin1[0:44] =  45 'b00000001xx001x1001x0000010000xx001x0101x00000;
	cfgsin2[0:44] =  45 'b10000xx001x0101x0000000001xx010x1001x00100010;
	cfgsin3[0:44] =  45 'b00xx100x0101x0000000001xx001x1001x0000010000x;
	cfgsin4[0:44] =  45 'bx001x0101x0010001000xx100x0011x0000000001xx00;
	cfgsin5[0:44] =  45 'b1x1001x0000100000xx001x0101x0000000001xx010x1;
	cfgsin6[0:44] =  45 'b001x0000000001xx010x1001x0000000001xx010x1001;
	cfgsin7[0:44] =  45 'bx0010000001xx001x1001x0000000001xx001x1001x00;
// TR
	cfgsin15[0:44] =  45 'b01010000xx001x0101x0110000100xx010x0011x00000;
	cfgsin14[0:44] =  45 'b01000xx100x0101x0010001000xx100x0101x00001000;
	cfgsin13[0:44] =  45 'b00xx001x0101x0000100000xx001x0101x0010000001x;
	cfgsin12[0:44] =  45 'bx001x0101x0000000001xx010x1001x0000001000xx10;
	cfgsin11[0:44] =  45 'b0x0101x0000001000xx100x0101x0000001000xx100x0;
	cfgsin10[0:44] =  45 'b101x0000000001xx001x1001x0000100000xx100x1000;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000100000xx001x001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00000;
	cfgsin18[0:44] =  45 'b01000xx010x100xx0000010000xx010x001xx00100010;
	cfgsin19[0:44] =  45 'b00xx010x001xx0000000001xx001x010xx1000000100x;
	cfgsin20[0:44] =  45 'bx010x100xx0000001000xx010x100xx0000100000xx01;
	cfgsin21[0:44] =  45 'b0x001xx0000100000xx001x010xx0000000001xx010x0;
	cfgsin22[0:44] =  45 'b10xx0000100000xx010x001xx0000100000xx010x010x;
	cfgsin23[0:44] =  45 'bx0000100000xx010x001xx0000100000xx010x010xx00;
// BR
	cfgsin31[0:44] =  45 'b10000001xx001x100xx0000001000xx001x010xx00000;
	cfgsin30[0:44] =  45 'b00001xx100x010xx0000001000xx010x001xx00000000;
	cfgsin29[0:44] =  45 'b10xx010x100xx0000001000xx100x100xx0000010000x;
	cfgsin28[0:44] =  45 'bx010x001xx0000100000xx010x001xx0000001000xx10;
	cfgsin27[0:44] =  45 'b0x001xx0000000100xx010x100xx0000000010xx010x1;
	cfgsin26[0:44] =  45 'b00xx0000001000xx010x100xx0000100000xx100x100x;
	cfgsin25[0:44] =  45 'bx0000010000xx010x001xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
end
endtask
task get_wl_pat256; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000001000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000001000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000001000000100001001000000;
	cfgsin4[0:44] =  45 'b100001000001000000000000000000000000000001000;
	cfgsin5[0:44] =  45 'b000010000000000000000000001000000101000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000001000000000100000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000101001000000000000000;
	cfgsin14[0:44] =  45 'b000001000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000001000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000100000000000000010000000000000001000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x001x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00000;
	cfgsin18[0:44] =  45 'b00001xx001x1001x0100001000xx100x0011x00000000;
	cfgsin19[0:44] =  45 'b01xx001x0101x1000010000xx001x0101x0000010000x;
	cfgsin20[0:44] =  45 'bx010x0011x0000001000xx100x0011x0000100000xx00;
	cfgsin21[0:44] =  45 'b1x0101x0000100000xx010x0011x0000100000xx001x0;
	cfgsin22[0:44] =  45 'b101x0000100000xx001x0101x0001100000xx010x0011;
	cfgsin23[0:44] =  45 'bx0000100000xx001x0101x0000100000xx001x0101x00;
// BR
	cfgsin31[0:44] =  45 'b01001000xx100x0011x0000001000xx100x0011x00000;
	cfgsin30[0:44] =  45 'b00001xx010x1001x0000001000xx100x0101x00011000;
	cfgsin29[0:44] =  45 'b00xx001x0101x0000001000xx100x0101x0010010000x;
	cfgsin28[0:44] =  45 'bx001x0101x0000100000xx001x0101x0000001000xx10;
	cfgsin27[0:44] =  45 'b0x0101x0000001000xx100x0101x0000100000xx010x0;
	cfgsin26[0:44] =  45 'b011x0010001000xx100x0101x0000100000xx100x1000;
	cfgsin25[0:44] =  45 'bx0000010000xx001x0101x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx001x010x0000;
end
endtask
task get_wl_pat255; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000100000000000000010000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000001000101010000100000010000000100000000;
	cfgsin4[0:44] =  45 'b000000000000000000100010000000100000000000000;
	cfgsin5[0:44] =  45 'b000000000010000000001000010000100000000000000;
	cfgsin6[0:44] =  45 'b000000000000010000000100000000000000000000000;
	cfgsin7[0:44] =  45 'b001001000110000000000010010000010000000000001;
// TR
	cfgsin15[0:44] =  45 'b001000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000100000000001010000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000010000000000000000001000000000;
	cfgsin12[0:44] =  45 'b100001000001011000000000000000001100000000000;
	cfgsin11[0:44] =  45 'b000000001000000000000000000001000000000000000;
	cfgsin10[0:44] =  45 'b000001000000000000001000010000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000100000000000000000;
	cfgsin19[0:44] =  45 'b000000000100000100001000000000000000000000000;
	cfgsin20[0:44] =  45 'b010000001000000001000100000001000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000001000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000101000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000001000;
	cfgsin28[0:44] =  45 'b000000100000000000000000000000000000001000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000100000000000000000;
	cfgsin26[0:44] =  45 'b000000000001000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000100000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat254; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001100xx110x0001x0110010101x;
	cfgsin1[0:44] =  45 'bx101x0010x0110001101xx010x0010x0110001101xx10;
	cfgsin2[0:44] =  45 'b1x1010x1001001011xx110x1010x0101101001xx010x1;
	cfgsin3[0:44] =  45 'b010x1010000000xx001x0000x0100000100xx000x1000;
	cfgsin4[0:44] =  45 'bx1000001010xx010x0010x0010001001xx110x1000x01;
	cfgsin5[0:44] =  45 'b10000101xx001x1010x0001000001xx000x0001x10010;
	cfgsin6[0:44] =  45 'b01011xx101x0100x0101000101xx101x1001x01010010;
	cfgsin7[0:44] =  45 'b10xx000x0000x0110001100xx001x0000x0101000100x;
// TR
	cfgsin15[0:44] =  45 'bx000x1001x0110010100xx000x0000x0101001101xx10;
	cfgsin14[0:44] =  45 'b1x0000x0110001000xx010x1001x0110010101xx110x0;
	cfgsin13[0:44] =  45 'b101x0110010101xx001x0110x0110001100xx010x0110;
	cfgsin12[0:44] =  45 'bx0010000100xx000x0010x0101001100xx010x0110x01;
	cfgsin11[0:44] =  45 'b10000100xx110x0110x0010001100xx110x0010x01100;
	cfgsin10[0:44] =  45 'b01100xx110x0110x0110000100xx110x0110x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000010000000000010000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000001000001000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000010000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000001000100;
	cfgsin20[0:44] =  45 'b000000000010000000000000000010000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000010000000000000000000000000000;
	cfgsin22[0:44] =  45 'b001000010000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000010100000000010000000;
// BR
	cfgsin31[0:44] =  45 'b000001000000000000000100000000000000000001100;
	cfgsin30[0:44] =  45 'b000100000000000010010000010000000000000000000;
	cfgsin29[0:44] =  45 'b100000000000000011000010000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000010000000001000000010000;
	cfgsin27[0:44] =  45 'b000000000010000000000000000010011000000000100;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000010000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000100000;
end
endtask
task get_wl_pat253; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00xx00xxx00xxx00xx00x10xx00xxx00xxx10xx00x;
	cfgsin1[0:44] =  45 'b10xx00xxx00xxx10xx00x10xx00xxx00xxx10xx00x10x;
	cfgsin2[0:44] =  45 'bx00xxx00xxx10xx00x10xx00xxx00xxx10xx00x10xx00;
	cfgsin3[0:44] =  45 'bxxx00xxx10xx00x10xx00xxx00xxx10xx00x10xx10xxx;
	cfgsin4[0:44] =  45 'b00xxx10xx00x10xx10xxx10xxx10xx00x10xx10xxx10x;
	cfgsin5[0:44] =  45 'bxx10xx00x10xx10xxx10xxx00xx00x10xx00xxx10xxx0;
	cfgsin6[0:44] =  45 'b0xx00x10xx00xxx10xxx10xx00x10xx10xxx00xxx00xx;
	cfgsin7[0:44] =  45 'b00x10xx10xxx00xxx00xx00x10xx10xxx10xxx00xx00x;
// TR
	cfgsin15[0:44] =  45 'b10xx10xxx00xxx00xx00x10xx10xxx00xxx00xx00x10x;
	cfgsin14[0:44] =  45 'bx10xxx10xxx00xx00x10xx10xxx10xxx00xx00x10xx00;
	cfgsin13[0:44] =  45 'bxxx10xxx00xx00x10xx00xxx10xxx00xx00x10xx00xxx;
	cfgsin12[0:44] =  45 'b10xxx10xx00x10xx00xxx10xxx00xx00x10xx10xxx10x;
	cfgsin11[0:44] =  45 'bxx00xx00x10xx10xxx10xxx00xx00x10xx10xxx10xxx0;
	cfgsin10[0:44] =  45 'b0xx00x10xx10xxx10xxx00xx00x10xx10xxx10xxx00xx;
	cfgsin9[0:44] =  45 'b00x00xx00xxx00xxx00xx00x00xx00xxx00xxx00xx00x;
	cfgsin8[0:44] =  45 'bxx00xx00xxx00xxx00xx00x00xx00xxx00xxx00xx00xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x0010001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001011xx110x0110x0010001001xx11;
	cfgsin18[0:44] =  45 'b0x0110x1010001010xx110x0100x0110001101xx001x1;
	cfgsin19[0:44] =  45 'b010x0101000100xx010x0001x0110010101xx100x0001;
	cfgsin20[0:44] =  45 'bx0010010000xx110x0000x0110000001xx101x1010x01;
	cfgsin21[0:44] =  45 'b10001101xx110x0100x1010001011xx110x0101x01100;
	cfgsin22[0:44] =  45 'b10001xx001x1001x0101010001xx010x1001x01100100;
	cfgsin23[0:44] =  45 'b11xx110x1001x0110010101xx000x0110x0100001101x;
// BR
	cfgsin31[0:44] =  45 'bx001x0001x0101010101xx000x0010x0101001100xx01;
	cfgsin30[0:44] =  45 'b0x0010x0110001100xx001x0100x0101001101xx001x0;
	cfgsin29[0:44] =  45 'b010x0110001101xx000x0100x0110001101xx010x0010;
	cfgsin28[0:44] =  45 'bx0110000101xx110x0110x0010001100xx101x0000x01;
	cfgsin27[0:44] =  45 'b10001101xx001x0110x0101010000xx000x0110x01000;
	cfgsin26[0:44] =  45 'b01101xx010x0010x0110001101xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0100x0110000101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001000011xx;
end
endtask
task get_wl_pat252; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x011000110000010x0010x01100011000;
	cfgsin1[0:44] =  45 'b0010x0000x011000110000010x1000x00100101000000;
	cfgsin2[0:44] =  45 'b0x0000x010000010000010x1010x000000110100001x0;
	cfgsin3[0:44] =  45 'b000x000100010000000x0010x000000010000010x0000;
	cfgsin4[0:44] =  45 'bx011000010000000x0000x000000010000000x0010x00;
	cfgsin5[0:44] =  45 'b1000110010000x0010x010000110000001x0100x01000;
	cfgsin6[0:44] =  45 'b0110000010x1000x011001010000000x0000x01000011;
	cfgsin7[0:44] =  45 'b0000000x0100x010000110000000x0000x01000011000;
// TR
	cfgsin15[0:44] =  45 'b0000x0101x000100110000000x0000x01000011000001;
	cfgsin14[0:44] =  45 'b0x0100x010000110000010x0110x010000110000010x0;
	cfgsin13[0:44] =  45 'b000x011000010000000x0100x000000110000000x0000;
	cfgsin12[0:44] =  45 'bx011000100000000x0110x011000110000000x0100x01;
	cfgsin11[0:44] =  45 'b1000100000010x0010x011000010000000x0101x01100;
	cfgsin10[0:44] =  45 'b0110000001x0100x011000110000010x0110x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x010100110000010x0100x01010011000000;
	cfgsin18[0:44] =  45 'b0x0110x001001000000000x1000x000001000000010x0;
	cfgsin19[0:44] =  45 'b110x000000110000001x0010x011000110000001x0001;
	cfgsin20[0:44] =  45 'bx010101010000001x0010x001000110000010x1000x01;
	cfgsin21[0:44] =  45 'b1011000000000x0000x010100100000001x0000x01100;
	cfgsin22[0:44] =  45 'b0110000010x0110x011000110000000x0100x01100011;
	cfgsin23[0:44] =  45 'b0000010x0110x101000101000010x0100x00100011000;
// BR
	cfgsin31[0:44] =  45 'b0010x1001x001000100000000x0010x01000101000000;
	cfgsin30[0:44] =  45 'b0x0010x000100110000000x0000x000000110000001x0;
	cfgsin29[0:44] =  45 'b110x000000110000001x1000x010001010000000x0100;
	cfgsin28[0:44] =  45 'bx001000101000000x1000x101001001000010x0010x00;
	cfgsin27[0:44] =  45 'b1000110000010x0000x000000100000010x0000x01000;
	cfgsin26[0:44] =  45 'b0100000010x0010x001001001000010x1000x01010101;
	cfgsin25[0:44] =  45 'b0000010x0010x001000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat251; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000010010000000000000000000010001000000010001;
	cfgsin2[0:44] =  45 'b000000000100000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b010100001000000000000000001010010000000010000;
	cfgsin4[0:44] =  45 'b000000010010001001000000100000000000100100010;
	cfgsin5[0:44] =  45 'b000000000000000100000100000001000000000000100;
	cfgsin6[0:44] =  45 'b000000000000010000000000000000000001000010000;
	cfgsin7[0:44] =  45 'b000000000010000010000000000001010000010000000;
// TR
	cfgsin15[0:44] =  45 'b001000000000000000000001000100000000000000000;
	cfgsin14[0:44] =  45 'b000010000100000000000000000000010000000000000;
	cfgsin13[0:44] =  45 'b100000000010000001000001000010000000000101000;
	cfgsin12[0:44] =  45 'b000000001001001000000000000000000000100000000;
	cfgsin11[0:44] =  45 'b000001000000000100000000010000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000001;
	cfgsin17[0:44] =  45 'b000000000000000000001000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000010000000100000000001010000000010000000;
	cfgsin19[0:44] =  45 'b000010000000000000001000000000000000000000100;
	cfgsin20[0:44] =  45 'b000000000010000001000100000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000010000000000000000000000010000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000000000000001000000000;
	cfgsin23[0:44] =  45 'b010000000000000000000000000000000001000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000100000010000000000;
	cfgsin30[0:44] =  45 'b000000100000000000000101000001010000000000000;
	cfgsin29[0:44] =  45 'b000001000000000000000001000000000000001000000;
	cfgsin28[0:44] =  45 'b010000000000001000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000100001010001000000000100000100;
	cfgsin26[0:44] =  45 'b001000000010000001000000000000000010000000000;
	cfgsin25[0:44] =  45 'b000000000000100000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat250; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000001000000000000001;
	cfgsin1[0:44] =  45 'b000000000000000000001000000000000000000000000;
	cfgsin2[0:44] =  45 'b000101000000010010000000000010001000000000001;
	cfgsin3[0:44] =  45 'b000000000000010001000100000000000010000000010;
	cfgsin4[0:44] =  45 'b000000000000000000010001000010000000000000000;
	cfgsin5[0:44] =  45 'b000000000000100000000000000000000000001000000;
	cfgsin6[0:44] =  45 'b000010000000000000000000001000101000000000000;
	cfgsin7[0:44] =  45 'b010000100000000000000000000010000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000010000000010000000010000100000010000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b010000000000001000000000001000000000000000000;
	cfgsin12[0:44] =  45 'b100000000000000000000000000000001000000000100;
	cfgsin11[0:44] =  45 'b000000001000000000000000000000001000000000000;
	cfgsin10[0:44] =  45 'b000001000000010000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000010000000000000000;
	cfgsin18[0:44] =  45 'b100000000000000000001000000000001001000000000;
	cfgsin19[0:44] =  45 'b000000001000000000000000000000000010000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000010100000010000;
	cfgsin21[0:44] =  45 'b000000010000100000100000001010000001000000000;
	cfgsin22[0:44] =  45 'b000010000000000000000000010000100000000000000;
	cfgsin23[0:44] =  45 'b000010000000000000000000000000001000000000010;
// BR
	cfgsin31[0:44] =  45 'b010000000010000001000000100000000000000010000;
	cfgsin30[0:44] =  45 'b100100000000000010010000001000000000010000000;
	cfgsin29[0:44] =  45 'b000000100000010010000000000001000010000000000;
	cfgsin28[0:44] =  45 'b100000000000000000001000000000010000001000001;
	cfgsin27[0:44] =  45 'b000000010010000001000000000010000000001000000;
	cfgsin26[0:44] =  45 'b000000010000000000000000010010000000000000000;
	cfgsin25[0:44] =  45 'b010010000100000000000001010000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000000000000000000000000;
end
endtask
task get_wl_pat249; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1100000000100100xx0x;
	cfgsin1[0:44] =  45 'bx1001000001000100xx0xx1100000000010010xx0xx10;
	cfgsin2[0:44] =  45 'b10000001000010xx0xx1100000000100010xx0xx11000;
	cfgsin3[0:44] =  45 'b00001000010xx0xx1000100000100100xx0xx10000100;
	cfgsin4[0:44] =  45 'b00001100xx0xx1010000010000100xx1xx10001000010;
	cfgsin5[0:44] =  45 'b00100xx0xx1010000001000010xx0xx11000000000100;
	cfgsin6[0:44] =  45 'b10xx0xx1010000001000100xx0xx1000010001000010x;
	cfgsin7[0:44] =  45 'bx0xx1010000001000010xx1xx1010000001000010xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1000100010000001xx0xx1100000001000001xx0xx11;
	cfgsin14[0:44] =  45 'b00000100000100xx1xx1100000001000100xx1xx10010;
	cfgsin13[0:44] =  45 'b00100000100xx0xx1100000100000100xx1xx11000000;
	cfgsin12[0:44] =  45 'b10000100xx0xx1000010100000100xx0xx10100000010;
	cfgsin11[0:44] =  45 'b00100xx0xx1100000100000100xx1xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx0xx1000010100000100xx1xx1010000010000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx0x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx0xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000001000100xx1xx1001000000100010xx0xx10100;
	cfgsin19[0:44] =  45 'b00000001010xx1xx1010000000010100xx0xx10100000;
	cfgsin20[0:44] =  45 'b10000010xx0xx1001000010000100xx0xx00100000000;
	cfgsin21[0:44] =  45 'b10100xx0xx1000100001000010xx0xx10010001000001;
	cfgsin22[0:44] =  45 'b00xx0xx1010000001000100xx0xx1001000001000100x;
	cfgsin23[0:44] =  45 'bx0xx0001000001000100xx1xx1010000000010010xx0x;
// BR
	cfgsin31[0:44] =  45 'bx0001000001000010xx1xx1001000000010100xx0xx11;
	cfgsin30[0:44] =  45 'b00000001000100xx0xx0000010001000001xx0xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx0xx0100000001000100xx0xx10000100;
	cfgsin28[0:44] =  45 'b01000100xx1xx1010000010000100xx0xx10000101000;
	cfgsin27[0:44] =  45 'b00100xx0xx0001000001000100xx0xx11000000010001;
	cfgsin26[0:44] =  45 'b00xx1xx0000010010000010xx0xx0010000000010010x;
	cfgsin25[0:44] =  45 'bx0xx0100000000010100xx0xx0010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx1010000010000100xx1xx;
end
endtask
task get_wl_pat248; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000001000100xx0xx1010000100000001xx1x;
	cfgsin1[0:44] =  45 'bx1100000001000010xx0xx0000100001000010xx0xx00;
	cfgsin2[0:44] =  45 'b10000001000001xx0xx1010000001000100xx0xx10001;
	cfgsin3[0:44] =  45 'b00001000100xx1xx1100000010000100xx0xx11000001;
	cfgsin4[0:44] =  45 'b00000001xx1xx0100000001000100xx0xx11000000010;
	cfgsin5[0:44] =  45 'b00001xx0xx1010000001000001xx0xx10100000000011;
	cfgsin6[0:44] =  45 'b00xx1xx0100000001000001xx0xx1100000001000001x;
	cfgsin7[0:44] =  45 'bx0xx0100000001000001xx0xx1100000001000001xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1000010010000100xx0xx1001000001000010xx0xx10;
	cfgsin14[0:44] =  45 'b00010100000100xx0xx1000010001000001xx0xx10010;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1010000100000010xx0xx10000100;
	cfgsin12[0:44] =  45 'b10000100xx1xx1100000000001100xx1xx11000000010;
	cfgsin11[0:44] =  45 'b00001xx1xx0000010100000100xx0xx10100001000000;
	cfgsin10[0:44] =  45 'b10xx1xx1010000000100001xx0xx1010000100000010x;
	cfgsin9[0:44] =  45 'bx0xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx00;
	cfgsin18[0:44] =  45 'b00010001000010xx0xx0001000001000001xx0xx10010;
	cfgsin19[0:44] =  45 'b00100000001xx0xx1100000001000010xx0xx11000000;
	cfgsin20[0:44] =  45 'b01000001xx0xx1100000000100010xx1xx01000000010;
	cfgsin21[0:44] =  45 'b00010xx0xx1100000001000100xx0xx10100000001001;
	cfgsin22[0:44] =  45 'b00xx0xx1100000001000001xx0xx1010000001000001x;
	cfgsin23[0:44] =  45 'bx1xx1000010001000001xx1xx1001000001000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1001000001000001xx1xx0100000100000001xx0xx10;
	cfgsin30[0:44] =  45 'b01000001000001xx0xx1000100001000001xx1xx10100;
	cfgsin29[0:44] =  45 'b00100000100xx0xx0010000001000010xx1xx11000000;
	cfgsin28[0:44] =  45 'b10000010xx1xx0010000010000010xx1xx10100000010;
	cfgsin27[0:44] =  45 'b00010xx1xx1100000001000001xx0xx00100000010000;
	cfgsin26[0:44] =  45 'b01xx0xx0010000000001100xx0xx0100000001000100x;
	cfgsin25[0:44] =  45 'bx0xx1010000001000001xx0xx1010000100000100xx0x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx1100000001000100xx0xx;
end
endtask
task get_wl_pat247; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000001000100x01000001000000010010xx00;
	cfgsin1[0:44] =  45 'b00000010001000001xx0101010000000010100xx00011;
	cfgsin2[0:44] =  45 'b00000001000100xx0000000100000001001xx00000010;
	cfgsin3[0:44] =  45 'b00001000001xx0000000001010000001xx00000100001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000000001010xx00000100000000;
	cfgsin5[0:44] =  45 'b10001xx1000100000001000100xx10000010000001000;
	cfgsin6[0:44] =  45 'b01xx0001001000001000001xx1000010000001000100x;
	cfgsin7[0:44] =  45 'bx0000001000001000100xx1000001000001000100xx01;
// TR
	cfgsin15[0:44] =  45 'b00100000000100010xx0000000100001000100xx01000;
	cfgsin14[0:44] =  45 'b10000100000100xx1000000100001000001xx10000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000010xx01000100000;
	cfgsin12[0:44] =  45 'b10000100xx0000100000100000100xx00000000100010;
	cfgsin11[0:44] =  45 'b00001xx0001100000100000100xx10001000001000000;
	cfgsin10[0:44] =  45 'b10xx0000100000010000010xx0100100000010000010x;
	cfgsin9[0:44] =  45 'bx1000010000100000100xx0000010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x00000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00011;
	cfgsin18[0:44] =  45 'b00000001000001xx0001100000100000100xx10001000;
	cfgsin19[0:44] =  45 'b00000100010xx0000010000100000001xx00000010000;
	cfgsin20[0:44] =  45 'b01000100xx1000001000000100001xx00010001000010;
	cfgsin21[0:44] =  45 'b00001xx1000001000001000001xx10001000001000001;
	cfgsin22[0:44] =  45 'b00xx0000010000001000001xx1000100000001000010x;
	cfgsin23[0:44] =  45 'bx0000100000001000010xx0000100000000001001xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000000001100xx0001100000001000010xx01000;
	cfgsin30[0:44] =  45 'b10000000100001xx1000100000001000100xx00000100;
	cfgsin29[0:44] =  45 'b00100000100xx0001000010100000001xx00000100000;
	cfgsin28[0:44] =  45 'b00010001xx0001100000010000010xx00001000001000;
	cfgsin27[0:44] =  45 'b00010xx0000000100001000001xx00010000100010000;
	cfgsin26[0:44] =  45 'b01xx1001100000000100010xx0001000010001000001x;
	cfgsin25[0:44] =  45 'bx1000001000001000100xx0000010000100000100xx10;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0000010000001000100x0100;
end
endtask
task get_wl_pat246; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx0000000010000001010xx00;
	cfgsin1[0:44] =  45 'b00001000001000001xx0000100000100000100xx10000;
	cfgsin2[0:44] =  45 'b01000000010100xx1000100000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00001000100xx0000001000000001010xx01000010000;
	cfgsin4[0:44] =  45 'b10000001xx0001000010100000001xx10000000100010;
	cfgsin5[0:44] =  45 'b00010xx0000001000001000001xx00000010000010000;
	cfgsin6[0:44] =  45 'b10xx0000001000100000100xx0000001000001000010x;
	cfgsin7[0:44] =  45 'bx0010001000001000001xx0000000100001000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000010000100000010xx00000;
	cfgsin14[0:44] =  45 'b01000010000100xx0000001000001000001xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000000001010xx00000010000;
	cfgsin12[0:44] =  45 'b00001100xx0000001000001000010xx00000010001000;
	cfgsin11[0:44] =  45 'b00001xx0000000100001000010xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000000100001000001xx0000001000001000010x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000001000001xx0000001000001000010xx00000001;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000001000001xx00000001000;
	cfgsin20[0:44] =  45 'b01000010xx0000001000000010001xx00000010000010;
	cfgsin21[0:44] =  45 'b00100xx0000010000100000010xx00000010000010000;
	cfgsin22[0:44] =  45 'b01xx1000001000001000010xx0000001000001000001x;
	cfgsin23[0:44] =  45 'bx0000001000001000001xx0000001000001000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00000001001000010xx0000010000010000100xx00000;
	cfgsin30[0:44] =  45 'b01000001000010xx0000001000001000100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx1000001000001000010xx00000000011;
	cfgsin28[0:44] =  45 'b00000001xx0000000010100000010xx00000000101000;
	cfgsin27[0:44] =  45 'b00001xx0000001000001000001xx10000010000010000;
	cfgsin26[0:44] =  45 'b01xx0000100000100000001xx1000000010001000001x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx1000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
end
endtask
task get_wl_pat245; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100x00000010000000001100xx00;
	cfgsin1[0:44] =  45 'b00001000001000001xx0000000010010000001xx00001;
	cfgsin2[0:44] =  45 'b00000001000001xx0000010000001000010xx10000100;
	cfgsin3[0:44] =  45 'b00001000001xx0000001000100000100xx00000010000;
	cfgsin4[0:44] =  45 'b10000100xx0000000100010000100xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx0000001000001000001xx00000000011000001;
	cfgsin6[0:44] =  45 'b00xx0000000001001000001xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx1000001000001000001xx0000001000001000010xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000010000010xx1000001000000001010xx00000;
	cfgsin14[0:44] =  45 'b01000000100100xx0000001000000001001xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000010xx00000010000;
	cfgsin12[0:44] =  45 'b10000100xx0000001000100000001xx00000010000010;
	cfgsin11[0:44] =  45 'b00001xx0000000010100000100xx00000010001000000;
	cfgsin10[0:44] =  45 'b10xx0000010000010000010xx0000001000010000010x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000001000001xx1000000010001000001xx00000010;
	cfgsin19[0:44] =  45 'b00100000010xx1000001000001000001xx01001000000;
	cfgsin20[0:44] =  45 'b01000001xx0000001000000001100xx00000000010010;
	cfgsin21[0:44] =  45 'b00010xx0000001000001000001xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000001000100xx0000001000001000001x;
	cfgsin23[0:44] =  45 'bx0000001000001000001xx0000001000001000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000100000001xx0000000010100000010xx00000;
	cfgsin30[0:44] =  45 'b10000001000100xx0000000010001000010xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000100000000001100xx00000010000;
	cfgsin28[0:44] =  45 'b00010100xx0000000010010000010xx00000010000000;
	cfgsin27[0:44] =  45 'b01010xx0000001000001000001xx00000000101000000;
	cfgsin26[0:44] =  45 'b01xx0000000010010000010xx0000001000001000001x;
	cfgsin25[0:44] =  45 'bx0000000010000001100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
end
endtask
task get_wl_pat244; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000100x00000010000001000100xx00;
	cfgsin1[0:44] =  45 'b00001000001000010xx0000000010000100010xx00000;
	cfgsin2[0:44] =  45 'b00010000100001xx0000001000010000010xx10000010;
	cfgsin3[0:44] =  45 'b00001000001xx0000000010000010100xx00000010000;
	cfgsin4[0:44] =  45 'b00100010xx0000001000000100010xx00001000000000;
	cfgsin5[0:44] =  45 'b01001xx0000001000001000001xx00000100000001000;
	cfgsin6[0:44] =  45 'b01xx0000000010010000001xx0000001000000001001x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0000001000000100001xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000000001010xx0000001000010000100xx00000;
	cfgsin14[0:44] =  45 'b01000001000100xx0000001000001000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000010000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000000100100xx00000010000010;
	cfgsin11[0:44] =  45 'b00010xx0000001000010000100xx00000010000010000;
	cfgsin10[0:44] =  45 'b10xx0010001000000001010xx0000001000000100001x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b00100001000001xx0000010000000010100xx00000000;
	cfgsin19[0:44] =  45 'b10000010010xx0000010000001000010xx00000001000;
	cfgsin20[0:44] =  45 'b10000001xx0100000010001000100xx00000100000100;
	cfgsin21[0:44] =  45 'b00001xx0000001000000001001xx00000010000100000;
	cfgsin22[0:44] =  45 'b10xx0000001000001000001xx0000001000001000001x;
	cfgsin23[0:44] =  45 'bx0000001000001000001xx0000010000001000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000001000001xx0000001000000001010xx00000;
	cfgsin30[0:44] =  45 'b01000001000001xx0000001000000001001xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000000010001000001xx00000010000;
	cfgsin28[0:44] =  45 'b00100010xx0000001000000010010xx00000010000001;
	cfgsin27[0:44] =  45 'b00001xx0000001000001000001xx00000010000010000;
	cfgsin26[0:44] =  45 'b01xx0000001000000010100xx0000010000001000001x;
	cfgsin25[0:44] =  45 'bx0000100000010000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
end
endtask
task get_wl_pat243; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100xx1000100000000001010xx00;
	cfgsin1[0:44] =  45 'b00001000001000010xx0000100000000001100xx10000;
	cfgsin2[0:44] =  45 'b01000001000010xx1000000100010000100xx00000010;
	cfgsin3[0:44] =  45 'b00001000010xx0000001000000010100xx00000100000;
	cfgsin4[0:44] =  45 'b00001100xx0000100000000010010xx10000010000010;
	cfgsin5[0:44] =  45 'b00100xx0001000100001000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0001001000001000100xx0000001000001000100x;
	cfgsin7[0:44] =  45 'bx0000001000001000100xx0100010000001000010xx10;
// TR
	cfgsin15[0:44] =  45 'b00000010000010010xx1000000100001000010xx01000;
	cfgsin14[0:44] =  45 'b00100100000100xx0000001000001000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010000;
	cfgsin12[0:44] =  45 'b10000100xx0000010000000001100xx00000000100010;
	cfgsin11[0:44] =  45 'b00100xx0000001000000010100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000000001010xx0000100000010000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b00100001000100xx0000100000001000010xx00001000;
	cfgsin19[0:44] =  45 'b00010000100xx0000000010001000001xx00000000010;
	cfgsin20[0:44] =  45 'b01000010xx0000100000001000010xx10000010000010;
	cfgsin21[0:44] =  45 'b00010xx0000000010001000010xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000001000001000100xx0000001000001000100x;
	cfgsin23[0:44] =  45 'bx0000001000001000100xx0000000100001000010xx00;
// BR
	cfgsin31[0:44] =  45 'b00000100001000100xx0000100000000100010xx01001;
	cfgsin30[0:44] =  45 'b00000000001010xx1000001000001000100xx10000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000000100100000010xx00100100000;
	cfgsin28[0:44] =  45 'b00001001xx0000001000010000100xx00000000101000;
	cfgsin27[0:44] =  45 'b00100xx0000001000001000100xx00000010000010001;
	cfgsin26[0:44] =  45 'b00xx0000000001001000100xx0000001000001000010x;
	cfgsin25[0:44] =  45 'bx0000001000001000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
end
endtask
task get_wl_pat242; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx0000001000000001100xx00;
	cfgsin1[0:44] =  45 'b00001000001000100xx1001001000000001010xx00001;
	cfgsin2[0:44] =  45 'b00000001000001xx0001001000000001010xx00010010;
	cfgsin3[0:44] =  45 'b00000001100xx0010000010001000100xx01000000100;
	cfgsin4[0:44] =  45 'b10000001xx0100000100010000100xx00000010000010;
	cfgsin5[0:44] =  45 'b00010xx1000001000001000001xx00010010000000010;
	cfgsin6[0:44] =  45 'b01xx0000001000001000001xx1001010000001000001x;
	cfgsin7[0:44] =  45 'bx0001001000001000001xx0001100000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b01000100010000001xx0001000100000001100xx00010;
	cfgsin14[0:44] =  45 'b01000000001100xx0000001000000001001xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0010001000000001010xx10000010000;
	cfgsin12[0:44] =  45 'b00001100xx0000100000100000100xx10000000100010;
	cfgsin11[0:44] =  45 'b00001xx1000001000000001100xx10000010001000000;
	cfgsin10[0:44] =  45 'b10xx1000010000010000100xx1000001000010000010x;
	cfgsin9[0:44] =  45 'bx1000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b01001000100000100xx0001001000100000100xx00000;
	cfgsin18[0:44] =  45 'b00100001000010xx0000010000001000001xx00000010;
	cfgsin19[0:44] =  45 'b00001000010xx1000000100001000100xx00010000100;
	cfgsin20[0:44] =  45 'b01000100xx0000000100100000100xx00000010000010;
	cfgsin21[0:44] =  45 'b00100xx0101000100001000100xx00000100000010001;
	cfgsin22[0:44] =  45 'b00xx0000001000001000001xx0000001000001000001x;
	cfgsin23[0:44] =  45 'bx0010001000001000001xx0000001000001000100xx00;
// BR
	cfgsin31[0:44] =  45 'b01010000001000010xx1001100000100000100xx00000;
	cfgsin30[0:44] =  45 'b01000000001001xx0000010000001000001xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000000001100xx00000001000;
	cfgsin28[0:44] =  45 'b00010010xx1000001000010000010xx00000000011000;
	cfgsin27[0:44] =  45 'b00010xx0000001000001000001xx00000010000000010;
	cfgsin26[0:44] =  45 'b01xx0000100000000100001xx0001001000001000100x;
	cfgsin25[0:44] =  45 'bx1000001000000001010xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000100000001xx000;
end
endtask
task get_wl_pat241; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx1001000000001001xx1x;
	cfgsin1[0:44] =  45 'bx1001000001000001xx0xx0000010001000010xx0xx10;
	cfgsin2[0:44] =  45 'b00100010000001xx0xx0000010010000001xx0xx00010;
	cfgsin3[0:44] =  45 'b00100000001xx1xx0000100000100100xx0xx10000010;
	cfgsin4[0:44] =  45 'b10000100xx0xx1010000010000001xx0xx10010000001;
	cfgsin5[0:44] =  45 'b00001xx0xx0000100100000001xx1xx00001001000001;
	cfgsin6[0:44] =  45 'b00xx1xx0100000100000001xx0xx0001000100000001x;
	cfgsin7[0:44] =  45 'bx1xx0001000010000001xx0xx0000100100000001xx0x;
// TR
	cfgsin15[0:44] =  45 'bx0100000000100010xx0xx0001000000001010xx0xx00;
	cfgsin14[0:44] =  45 'b01000001000100xx1xx1000100010000001xx1xx10010;
	cfgsin13[0:44] =  45 'b00100000100xx1xx0000001001000010xx0xx10010001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1001000000010100xx0xx10001000100;
	cfgsin11[0:44] =  45 'b00001xx0xx1001000010000100xx0xx10010000010000;
	cfgsin10[0:44] =  45 'b10xx0xx0100000001000010xx0xx1000100001000010x;
	cfgsin9[0:44] =  45 'bx0xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100x01xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx0001000100000100xx1xx0001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b01000000010001xx1xx1001000000001100xx1xx10001;
	cfgsin19[0:44] =  45 'b00001000001xx0xx1001000000100010xx1xx00001001;
	cfgsin20[0:44] =  45 'b00000001xx0xx1100000001000001xx0xx10000100000;
	cfgsin21[0:44] =  45 'b10001xx0xx0010000100000001xx1xx10001000000101;
	cfgsin22[0:44] =  45 'b00xx1xx1001000100000001xx1xx1001000000001001x;
	cfgsin23[0:44] =  45 'bx1xx0001000000001001xx1xx1000010100000001xx1x;
// BR
	cfgsin31[0:44] =  45 'bx0001000000010001xx0xx0001000001000001xx0xx10;
	cfgsin30[0:44] =  45 'b10000100000100xx0xx1100000100000001xx0xx10010;
	cfgsin29[0:44] =  45 'b00100000100xx1xx1000001000010010xx1xx00010000;
	cfgsin28[0:44] =  45 'b10000100xx0xx1100000001000010xx1xx10010000010;
	cfgsin27[0:44] =  45 'b00010xx1xx1100000001000001xx1xx11000001000000;
	cfgsin26[0:44] =  45 'b01xx1xx1010000001000010xx1xx0000001010000001x;
	cfgsin25[0:44] =  45 'bx0xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat240; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000001x00xx1010000000001001x01x;
	cfgsin1[0:44] =  45 'bx1000010000001010x01xx1001000001000100x00xx10;
	cfgsin2[0:44] =  45 'b01000010000001x00xx1100000001000100x00xx10010;
	cfgsin3[0:44] =  45 'b00100000001x01xx1010000010000001x00xx10100000;
	cfgsin4[0:44] =  45 'b00100100x00xx1010000000001010x00xx10100001000;
	cfgsin5[0:44] =  45 'b00001x01xx1000100100000010x01xx10100000001000;
	cfgsin6[0:44] =  45 'b10x00xx1100000100000010x00xx1001000001000010x;
	cfgsin7[0:44] =  45 'b00xx1100000010000100x01xx1000010000100010x00x;
// TR
	cfgsin15[0:44] =  45 'bx1001000001000100x00xx1000010001000100x11xx10;
	cfgsin14[0:44] =  45 'b10000001000001x01xx1010000010000100x01xx10100;
	cfgsin13[0:44] =  45 'b00100000100x01xx1100000001000001x10xx10100001;
	cfgsin12[0:44] =  45 'b00000001x01xx1010000010000100x01xx11000000000;
	cfgsin11[0:44] =  45 'b01010x00xx1010000000010100x00xx10010000010000;
	cfgsin10[0:44] =  45 'b10x00xx1000001001000100x01xx1010000001000100x;
	cfgsin9[0:44] =  45 'b11xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000100x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000010000100x00xx1001000000010100x00xx10000;
	cfgsin19[0:44] =  45 'b10001000100x00xx1001000001000010x00xx10010000;
	cfgsin20[0:44] =  45 'b00100010x00xx1010000010000001x00xx10010000010;
	cfgsin21[0:44] =  45 'b00010x00xx1100000000100010x00xx10100000100001;
	cfgsin22[0:44] =  45 'b00x00xx1001000001000001x00xx1010000100000100x;
	cfgsin23[0:44] =  45 'b01xx0010000100000100x00xx0000010100000010x00x;
// BR
	cfgsin31[0:44] =  45 'bx0000010001000100x00xx0100000000001100x00xx10;
	cfgsin30[0:44] =  45 'b01000000010100x01xx1010000001000010x01xx10100;
	cfgsin29[0:44] =  45 'b00100000100x00xx1010000000100001x01xx10100000;
	cfgsin28[0:44] =  45 'b01000010x10xx0001000001000100x00xx00010000010;
	cfgsin27[0:44] =  45 'b00010x00xx0010000001000100x01xx00100001000000;
	cfgsin26[0:44] =  45 'b10x00xx1010000000100100x01xx0001000010000100x;
	cfgsin25[0:44] =  45 'b00xx1010000100000010x00xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000001x01x0;
end
endtask
task get_wl_pat239; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0100010000100000100x000;
	cfgsin1[0:44] =  45 'b00000100100000100x00000010000001000010x101001;
	cfgsin2[0:44] =  45 'b00000010000100x01000010000000001010x001000100;
	cfgsin3[0:44] =  45 'b00100000001x00000000100000100010x000000010000;
	cfgsin4[0:44] =  45 'b10000100x00000000100100000001x001000000010100;
	cfgsin5[0:44] =  45 'b00001x00000010000100000100x000000000101000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000001x00000000010100000100x;
	cfgsin7[0:44] =  45 'b00100100000010000010x00000010000100000100x100;
// TR
	cfgsin15[0:44] =  45 'b00010000001000001x01000010000001000001x000000;
	cfgsin14[0:44] =  45 'b10000001000010x00000010000010000010x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000001000010x010001000001;
	cfgsin12[0:44] =  45 'b00000100x00000000010000010010x100000100000100;
	cfgsin11[0:44] =  45 'b00001x00100000100010000010x000000100000010000;
	cfgsin10[0:44] =  45 'b10x00100010000001000010x00000010000001000010x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000001000010x00000000010000001010x000000100;
	cfgsin19[0:44] =  45 'b00100000001x00000000010000001100x000000000101;
	cfgsin20[0:44] =  45 'b00000100x00000000010010000010x000000000100100;
	cfgsin21[0:44] =  45 'b00100x00000010000100000001x010001000000000100;
	cfgsin22[0:44] =  45 'b10x00000000100100000001x11000010000100000010x;
	cfgsin23[0:44] =  45 'b00001010000100000010x00001010000100000100x001;
// BR
	cfgsin31[0:44] =  45 'b01000100001000010x00001010000100000001x000000;
	cfgsin30[0:44] =  45 'b10000100000010x00000001000100000100x100000100;
	cfgsin29[0:44] =  45 'b00100000100x01000010000001000001x000001000001;
	cfgsin28[0:44] =  45 'b00000001x00001010000001000001x000010100000010;
	cfgsin27[0:44] =  45 'b00010x01010010000001000010x000010100001000001;
	cfgsin26[0:44] =  45 'b00x00100010000001000001x00000010000010000010x;
	cfgsin25[0:44] =  45 'b00000001000000010001x00100100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001010000100000100xx00x;
end
endtask
task get_wl_pat238; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000001xx0000000010001000010x100;
	cfgsin1[0:44] =  45 'b00010000000001001x10000000010100000001x100000;
	cfgsin2[0:44] =  45 'b10000100000010x10000100000100000001x100000100;
	cfgsin3[0:44] =  45 'b00100000001x10000000001100000100x100001000000;
	cfgsin4[0:44] =  45 'b10000100x11000000010000010100x100000100000001;
	cfgsin5[0:44] =  45 'b00001x10000010000000100001x100001000000000100;
	cfgsin6[0:44] =  45 'b01x10000010000000010100x11000010000000100001x;
	cfgsin7[0:44] =  45 'b10000010000100000001x10000010000010000001x100;
// TR
	cfgsin15[0:44] =  45 'b00100000001000010x10000100000001000010x100000;
	cfgsin14[0:44] =  45 'b00010100000100x10000010000100000001x100000100;
	cfgsin13[0:44] =  45 'b00100000100x10000010000100000100x100000100000;
	cfgsin12[0:44] =  45 'b01000010x10000100000100000001x100000100000000;
	cfgsin11[0:44] =  45 'b01100x10000100000100000001x101000000100010000;
	cfgsin10[0:44] =  45 'b10x10000100000100000001x10000100000100000001x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100000;
	cfgsin18[0:44] =  45 'b10000100000001x10000010000100000001x110001000;
	cfgsin19[0:44] =  45 'b00001000010x10000010000000001001x100000100000;
	cfgsin20[0:44] =  45 'b00001001x10100001000100000100x100000100000000;
	cfgsin21[0:44] =  45 'b01001x11000010000000001100x100000100001000000;
	cfgsin22[0:44] =  45 'b01x10000010000100000001x10000010000010000001x;
	cfgsin23[0:44] =  45 'b10000010000010000001x10000010000000100001x100;
// BR
	cfgsin31[0:44] =  45 'b00010000010000001x10000000010001000010x100000;
	cfgsin30[0:44] =  45 'b10000010000001x10000010000100000001x100000100;
	cfgsin29[0:44] =  45 'b00100000100x10000010000100000001x100000000100;
	cfgsin28[0:44] =  45 'b00001100x10000010000001000010x101000000100010;
	cfgsin27[0:44] =  45 'b00010x10000010000100000001x100000100000000100;
	cfgsin26[0:44] =  45 'b01x10000000010001000010x10001010000100000001x;
	cfgsin25[0:44] =  45 'b10000100000010000100x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat237; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000000001001x000;
	cfgsin1[0:44] =  45 'b00100000100000001x00000000001001000001x100001;
	cfgsin2[0:44] =  45 'b00000010000001x00000000001001000100x000001000;
	cfgsin3[0:44] =  45 'b00000001001x00000100000000001001x001000100000;
	cfgsin4[0:44] =  45 'b00001100x00000010000000100010x000000100000001;
	cfgsin5[0:44] =  45 'b00100x10000010000100000001x000001000000010001;
	cfgsin6[0:44] =  45 'b00x00100000010100000001x00000010000001000010x;
	cfgsin7[0:44] =  45 'b10000010000010000001x00000010000100000100x110;
// TR
	cfgsin15[0:44] =  45 'b00010000001000010x00000000001001000100x100000;
	cfgsin14[0:44] =  45 'b00010010000001x10000010000001000010x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000001000001000010x000001000000;
	cfgsin12[0:44] =  45 'b10000100x00000100000000001010x000000100000100;
	cfgsin11[0:44] =  45 'b00001x00000001000001000100x000000100000010001;
	cfgsin10[0:44] =  45 'b00x10000010000000010100x00000010000001000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000010000001x01000100000000100001x000000010;
	cfgsin19[0:44] =  45 'b00001000010x01000010000001000010x010000010000;
	cfgsin20[0:44] =  45 'b01000001x00000000010000100100x010000000011000;
	cfgsin21[0:44] =  45 'b00010x10000010000000001010x000000000010000101;
	cfgsin22[0:44] =  45 'b00x01000010000100000001x00000010000100000001x;
	cfgsin23[0:44] =  45 'b00000010000100000001x01000010000100000001x000;
// BR
	cfgsin31[0:44] =  45 'b00010000000100100x00100100000001000010x010000;
	cfgsin30[0:44] =  45 'b10000000100001x00000010000000010010x100000100;
	cfgsin29[0:44] =  45 'b00100000100x00000010000001000010x000000000100;
	cfgsin28[0:44] =  45 'b00010100x00100100000001000010x000000100000010;
	cfgsin27[0:44] =  45 'b00010x00000010000001000001x000000100000010000;
	cfgsin26[0:44] =  45 'b10x00000010000010000010x10000010000010000100x;
	cfgsin25[0:44] =  45 'b00100001000001000010x10000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat236; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000000010100x010;
	cfgsin1[0:44] =  45 'b00100000001000001x00000100000001000010x000101;
	cfgsin2[0:44] =  45 'b00000000100001x00001100000000010010x001101000;
	cfgsin3[0:44] =  45 'b00000010001x00100001000001000100x000000100000;
	cfgsin4[0:44] =  45 'b01000010x00000001000001000100x001000010000010;
	cfgsin5[0:44] =  45 'b00001x00100010000100000001x000001000000001000;
	cfgsin6[0:44] =  45 'b10x10000100000001000100x10000010000100000001x;
	cfgsin7[0:44] =  45 'b01000010000010000001x00000001000001000001x000;
// TR
	cfgsin15[0:44] =  45 'b00010000000001100x10001010000001000010x000000;
	cfgsin14[0:44] =  45 'b01000000001100x00001010000000001001x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000100000001000010x000100000010;
	cfgsin12[0:44] =  45 'b00001010x10000000001001000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x10000010000000001010x010000100001000000;
	cfgsin10[0:44] =  45 'b10x01000010000000100010x00100010000001000010x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000000001100x00100000010001000010x100000100;
	cfgsin19[0:44] =  45 'b00001000100x11000001000010000001x000000100000;
	cfgsin20[0:44] =  45 'b00001010x11010010000000100010x100000100000000;
	cfgsin21[0:44] =  45 'b01001x01000001000000001001x001000010000001001;
	cfgsin22[0:44] =  45 'b00x00000010000100000001x00000100000100000001x;
	cfgsin23[0:44] =  45 'b00000100000100000001x00000010000100000001x000;
// BR
	cfgsin31[0:44] =  45 'b00100000100000010x11001010000000100100x000001;
	cfgsin30[0:44] =  45 'b00000000001010x10001000010010000001x000000100;
	cfgsin29[0:44] =  45 'b00100000100x00000010000000001001x000000000100;
	cfgsin28[0:44] =  45 'b00001100x00000100000001000100x000000100000001;
	cfgsin27[0:44] =  45 'b00001x00000000010010000100x000000100000000011;
	cfgsin26[0:44] =  45 'b00x00000000001001000010x01000010000000010001x;
	cfgsin25[0:44] =  45 'b00010000010000001010x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat235; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000000010010x000;
	cfgsin1[0:44] =  45 'b00100000100000001x01000100000001000010x010000;
	cfgsin2[0:44] =  45 'b00001000010100x10000100000001000010x000000010;
	cfgsin3[0:44] =  45 'b00000001010x00000100000000001010x000100100001;
	cfgsin4[0:44] =  45 'b00000100x01000010000000001100x000010000100000;
	cfgsin5[0:44] =  45 'b01001x00000010000100000001x000001000000010001;
	cfgsin6[0:44] =  45 'b00x00000100000100000001x00110001000100000001x;
	cfgsin7[0:44] =  45 'b00000001000010000001x00001000010100000001x000;
// TR
	cfgsin15[0:44] =  45 'b00001000001000010x00000001000001000001x000000;
	cfgsin14[0:44] =  45 'b10000001000010x00100001000010000010x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000100000001000010x000001000001;
	cfgsin12[0:44] =  45 'b00000100x00000100000000100010x000000100000100;
	cfgsin11[0:44] =  45 'b00001x00000010000010000100x000000000010010000;
	cfgsin10[0:44] =  45 'b10x00000010000001000100x00000010000001000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000010000100x00000001000010000001x000000001;
	cfgsin19[0:44] =  45 'b00001000010x00000100000100000001x000001000000;
	cfgsin20[0:44] =  45 'b00010010x10000010000000100010x100001000000000;
	cfgsin21[0:44] =  45 'b01001x00000000010010000100x100000100000000011;
	cfgsin22[0:44] =  45 'b00x00000001000100000001x00000010000100000001x;
	cfgsin23[0:44] =  45 'b00000010000100000001x00000100000100000001x000;
// BR
	cfgsin31[0:44] =  45 'b00010000000001100x00000001000001000010x000000;
	cfgsin30[0:44] =  45 'b01000001000001x00000100000000001100x000000100;
	cfgsin29[0:44] =  45 'b00100000100x00000000010001000010x000000000010;
	cfgsin28[0:44] =  45 'b00100100x00000100000001000100x000000100000010;
	cfgsin27[0:44] =  45 'b00100x00100001000001000100x000000100001000001;
	cfgsin26[0:44] =  45 'b00x01000001000000001100x00000010000010000001x;
	cfgsin25[0:44] =  45 'b00000100000100000001x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000000001100x0000;
end
endtask
task get_wl_pat234; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000001001000001000100000100x000;
	cfgsin1[0:44] =  45 'b00001000000001001x00001000001001000010x000001;
	cfgsin2[0:44] =  45 'b00000010000010x01000000100001000010x100000001;
	cfgsin3[0:44] =  45 'b00001000001x00010010000000001100x110000001000;
	cfgsin4[0:44] =  45 'b00001100x00001010000000001001x100000010000000;
	cfgsin5[0:44] =  45 'b01010x10000100000100000001x010011000001000000;
	cfgsin6[0:44] =  45 'b01x00000001000000001001x10000100000000001001x;
	cfgsin7[0:44] =  45 'b00000010000000001001x00000100000000001010x000;
// TR
	cfgsin15[0:44] =  45 'b00001000001000010x10000010000001000010x001000;
	cfgsin14[0:44] =  45 'b10000001000100x00000010000001000001x010000100;
	cfgsin13[0:44] =  45 'b00100000100x00110010000001000010x000001000001;
	cfgsin12[0:44] =  45 'b00000100x01000010000000001100x000000100000000;
	cfgsin11[0:44] =  45 'b01001x01000001000010000100x100000010000010000;
	cfgsin10[0:44] =  45 'b10x10000010000001000001x10000010000001000010x;
	cfgsin9[0:44] =  45 'b01000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100000000100000100000100x000;
	cfgsin17[0:44] =  45 'b01010000100000100x00000100000100000100x000010;
	cfgsin18[0:44] =  45 'b00100001000001x00000010000000001010x001000010;
	cfgsin19[0:44] =  45 'b00001000010x00000010000000001001x000010100000;
	cfgsin20[0:44] =  45 'b00001010x00000000001000001010x101000001000000;
	cfgsin21[0:44] =  45 'b01010x00001000001000001010x000100000010010000;
	cfgsin22[0:44] =  45 'b01x00100001000000001001x01000010000100000001x;
	cfgsin23[0:44] =  45 'b00000010000100000001x00000010000100000001x000;
// BR
	cfgsin31[0:44] =  45 'b01100000000010001x00000000010001000001x000100;
	cfgsin30[0:44] =  45 'b01000001000001x01000010000000100100x000000100;
	cfgsin29[0:44] =  45 'b00100000100x00000000010001000001x000000100000;
	cfgsin28[0:44] =  45 'b00001010x00000001000001000010x000000010000010;
	cfgsin27[0:44] =  45 'b00001x00000010000000001001x000001000000010000;
	cfgsin26[0:44] =  45 'b01x00000000001001000010x00010000001000001001x;
	cfgsin25[0:44] =  45 'b00000001000000010100x01000100000100000100x010;
	cfgsin24[0:44] =  45 'bxx00100000100000100x010010100000000010010010x;
end
endtask
task get_wl_pat233; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1001000100000010x00x;
	cfgsin1[0:44] =  45 'bx1000100010000010x00xx0100000001000001x00xx00;
	cfgsin2[0:44] =  45 'b10000000100001x00xx0100000000001100x00xx00001;
	cfgsin3[0:44] =  45 'b00000001100x10xx0100000001000010x00xx00010000;
	cfgsin4[0:44] =  45 'b01000001x10xx0000100001000010x00xx00000010010;
	cfgsin5[0:44] =  45 'b00100x00xx1010000001000001x00xx00100000000010;
	cfgsin6[0:44] =  45 'b01x01xx1000100010000100x00xx0010000001000100x;
	cfgsin7[0:44] =  45 'b00xx1100000000001001x01xx0010000000010001x01x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100x01xx0010000000001100x00xx11;
	cfgsin14[0:44] =  45 'b00000001000010x00xx0100000100000010x00xx10100;
	cfgsin13[0:44] =  45 'b00100000100x00xx0100000100000100x01xx00010000;
	cfgsin12[0:44] =  45 'b01000001x00xx1100000001000010x11xx10010001000;
	cfgsin11[0:44] =  45 'b00010x00xx1100000001000001x00xx10010000001000;
	cfgsin10[0:44] =  45 'b01x00xx1100000100000100x00xx1100000100000001x;
	cfgsin9[0:44] =  45 'b00xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x1xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx0010000100000100x01xx1100000100000100x01xx01;
	cfgsin18[0:44] =  45 'b00000010000100x00xx1100000010000001x00xx10000;
	cfgsin19[0:44] =  45 'b01000001100x00xx1010000100000010x01xx00100000;
	cfgsin20[0:44] =  45 'b01000001x00xx0100000010000100x00xx10010001000;
	cfgsin21[0:44] =  45 'b00001x00xx0001000000100001x10xx01000000010000;
	cfgsin22[0:44] =  45 'b10x00xx1001000100000001x00xx1010000100000001x;
	cfgsin23[0:44] =  45 'b01xx1010000100000001x01xx1010000001000001x01x;
// BR
	cfgsin31[0:44] =  45 'bx0001000000010100x00xx0010000001000100x01xx00;
	cfgsin30[0:44] =  45 'b10000000010100x00xx0001000000001001x01xx10100;
	cfgsin29[0:44] =  45 'b00100000100x01xx1010000001000100x01xx10000101;
	cfgsin28[0:44] =  45 'b00000100x11xx1010000010000001x01xx10010001000;
	cfgsin27[0:44] =  45 'b00010x00xx1100000100000010x01xx10100000100000;
	cfgsin26[0:44] =  45 'b10x00xx1010000000010001x00xx0100000000001010x;
	cfgsin25[0:44] =  45 'b01xx0001000001000001x00xx1100000100000100x00x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x00xx00100001000001000x0x0;
end
endtask
task get_wl_pat232; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000001xx0xx1001000001000001x01x;
	cfgsin1[0:44] =  45 'bx1000100010000100x01xx0010000100000100x01xx10;
	cfgsin2[0:44] =  45 'b00100001000100x01xx0010000000100001x01xx10001;
	cfgsin3[0:44] =  45 'b00001000010x00xx1000010001000001x00xx10000010;
	cfgsin4[0:44] =  45 'b01000010x00xx0100000001000100x00xx00001000010;
	cfgsin5[0:44] =  45 'b00001x00xx1010000010000001x00xx10100000010000;
	cfgsin6[0:44] =  45 'b10x01xx0100000000100010x01xx0010000000100001x;
	cfgsin7[0:44] =  45 'b01xx1010000100000001x01xx1010000000001100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1100000000010001x00xx1100000000010001x00xx10;
	cfgsin14[0:44] =  45 'b10000001000001x00xx1010000000100100x00xx10100;
	cfgsin13[0:44] =  45 'b00100000100x00xx1010000000100001x01xx10000010;
	cfgsin12[0:44] =  45 'b01000010x01xx1010000001000001x01xx11000001000;
	cfgsin11[0:44] =  45 'b00100x01xx0010000001000010x01xx00100000010001;
	cfgsin10[0:44] =  45 'b00x01xx1001000100000010x11xx1001000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100xx1xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx1100000100000100x01xx00;
	cfgsin18[0:44] =  45 'b10000010000010x01xx0000001000001100x00xx01000;
	cfgsin19[0:44] =  45 'b00000100001x11xx1010000100000100x00xx00100001;
	cfgsin20[0:44] =  45 'b00000100x00xx0001000001000001x11xx00001000010;
	cfgsin21[0:44] =  45 'b00100x01xx0100000100000100x01xx10100000010001;
	cfgsin22[0:44] =  45 'b00x01xx1001000010000001x01xx1010000100000001x;
	cfgsin23[0:44] =  45 'b01xx1010000100000001x01xx1010000100000001x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000100000010x10xx0010000000100010x00xx00;
	cfgsin30[0:44] =  45 'b10000000001010x01xx1010000000100010x01xx10100;
	cfgsin29[0:44] =  45 'b00100000100x01xx0010000010000010x01xx01000000;
	cfgsin28[0:44] =  45 'b01000001x01xx0100000010000100x01xx00010001000;
	cfgsin27[0:44] =  45 'b00100x00xx1010000100000100x01xx10100000100001;
	cfgsin26[0:44] =  45 'b00x00xx0100000001000100x01xx1010000010000100x;
	cfgsin25[0:44] =  45 'b01xx0100000001000010x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
end
endtask
task get_wl_pat231; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx1000001000000010100xx00;
	cfgsin1[0:44] =  45 'b00010000000001001xx0001010000010000010xx00000;
	cfgsin2[0:44] =  45 'b00010000001001xx0000000100100000010xx00001000;
	cfgsin3[0:44] =  45 'b00001000100xx1000001000001000010xx01000010000;
	cfgsin4[0:44] =  45 'b01000001xx1000000001000010010xx00000000100010;
	cfgsin5[0:44] =  45 'b00010xx0100010000010000001xx10000010000010001;
	cfgsin6[0:44] =  45 'b00xx0001100000010000001xx0000000100000100001x;
	cfgsin7[0:44] =  45 'bx0000100000100000001xx0000000100100000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00000100000001100xx0000000010001000010xx10000;
	cfgsin14[0:44] =  45 'b01000001000100xx1000100000100000001xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx1000100000100000010xx00000010000;
	cfgsin12[0:44] =  45 'b01000100xx0000000100001000001xx00000000011000;
	cfgsin11[0:44] =  45 'b00001xx0000000001001000100xx00001000000001000;
	cfgsin10[0:44] =  45 'b10xx0000000001001000010xx0000000001100000010x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00010;
	cfgsin18[0:44] =  45 'b00100010000001xx0000100000001000001xx00000000;
	cfgsin19[0:44] =  45 'b10000001010xx0000100000000100001xx00011000000;
	cfgsin20[0:44] =  45 'b00100010xx0110001000100000100xx00011000000001;
	cfgsin21[0:44] =  45 'b00001xx0010010000000001010xx00000000010010001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000001xx0000100000100000001x;
	cfgsin23[0:44] =  45 'bx0000100000100000001xx0000100000000100001xx00;
// BR
	cfgsin31[0:44] =  45 'b00000001100000001xx0001000001010000010xx10000;
	cfgsin30[0:44] =  45 'b00010001000010xx0000000001100000100xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0001001000000010010xx00000010000;
	cfgsin28[0:44] =  45 'b00010010xx0001100000010000010xx00000010001000;
	cfgsin27[0:44] =  45 'b00010xx0100000001100000001xx00000000010100000;
	cfgsin26[0:44] =  45 'b01xx1001000001001000001xx0000000100000010001x;
	cfgsin25[0:44] =  45 'bx0000100000001000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000010xx000;
end
endtask
task get_wl_pat230; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000001000000010001xx00;
	cfgsin1[0:44] =  45 'b00001000100000001xx0000000100000001001xx00000;
	cfgsin2[0:44] =  45 'b10000100000001xx0000000001000010010xx00000100;
	cfgsin3[0:44] =  45 'b00100000001xx0000000100100000100xx00000010000;
	cfgsin4[0:44] =  45 'b01000100xx0001000100100000100xx01001000000010;
	cfgsin5[0:44] =  45 'b00001xx0000010000100000001xx00000100001000001;
	cfgsin6[0:44] =  45 'b00xx0000000001001000001xx0010010000100000001x;
	cfgsin7[0:44] =  45 'bx0000100000010000001xx0000010000100000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000010000010xx0000000100010000010xx00000;
	cfgsin14[0:44] =  45 'b01000001000100xx0000000001010000001xx01001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000000001001000010xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000000001100xx00000001000010;
	cfgsin11[0:44] =  45 'b00001xx0001100000000001100xx00010100000001000;
	cfgsin10[0:44] =  45 'b10xx0000000010000001001xx0000000100000001010x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00000;
	cfgsin18[0:44] =  45 'b00010100000001xx0000000010000100001xx00001000;
	cfgsin19[0:44] =  45 'b00010000001xx0000001000010000001xx01000001000;
	cfgsin20[0:44] =  45 'b10000001xx0000000100001000010xx00000000100100;
	cfgsin21[0:44] =  45 'b00010xx0000000010001000001xx00001000000000011;
	cfgsin22[0:44] =  45 'b00xx0000100000100000001xx0000100000000001001x;
	cfgsin23[0:44] =  45 'bx0000100000000001001xx0000100000010000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000000001010xx0100000100000010100xx00100;
	cfgsin30[0:44] =  45 'b00100100000001xx0000000001010000001xx00001000;
	cfgsin29[0:44] =  45 'b00100000100xx0000000001001000010xx00000100000;
	cfgsin28[0:44] =  45 'b01000100xx0000000100001000010xx00000000101000;
	cfgsin27[0:44] =  45 'b00010xx0000000100010000001xx00000001001000000;
	cfgsin26[0:44] =  45 'b01xx0000000100010000010xx0000100000001000001x;
	cfgsin25[0:44] =  45 'bx0001001000001000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat229; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx001x001xx0000001000xx001x010xx00;
	cfgsin1[0:44] =  45 'b00010000xx001x001xx0000000010xx001x100xx00000;
	cfgsin2[0:44] =  45 'b00001xx100x010xx0010100000xx001x001xx00000000;
	cfgsin3[0:44] =  45 'b01xx001x010xx0000001000xx010x001xx0000001000x;
	cfgsin4[0:44] =  45 'bx010x010xx0000001000xx010x001xx0001010000xx01;
	cfgsin5[0:44] =  45 'b0x100xx0000010000xx100x001xx0000001000xx001x0;
	cfgsin6[0:44] =  45 'b10xx0000000010xx001x100xx0000010000xx010x100x;
	cfgsin7[0:44] =  45 'bx0000100000xx010x001xx0000001000xx010x100xx00;
// TR
	cfgsin15[0:44] =  45 'b00000001xx100x001xx1000100000xx001x010xx00000;
	cfgsin14[0:44] =  45 'b01000xx100x100xx0000100000xx010x001xx00001000;
	cfgsin13[0:44] =  45 'b00xx100x100xx0000100000xx010x010xx0000001000x;
	cfgsin12[0:44] =  45 'bx100x100xx0000001000xx100x010xx0000100000xx00;
	cfgsin11[0:44] =  45 'b1x001xx0000001000xx100x001xx0000010000xx100x1;
	cfgsin10[0:44] =  45 'b00xx0000000100xx010x100xx0000100000xx010x010x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00000;
	cfgsin18[0:44] =  45 'b10000xx010x001xx0001100000xx100x010xx10100010;
	cfgsin19[0:44] =  45 'b00xx001x100xx0000100000xx010x001xx0000000001x;
	cfgsin20[0:44] =  45 'bx010x100xx0000001000xx010x001xx0000000001xx01;
	cfgsin21[0:44] =  45 'b0x100xx0000100000xx001x100xx0000001000xx010x0;
	cfgsin22[0:44] =  45 'b10xx0000001000xx010x100xx0000100000xx100x001x;
	cfgsin23[0:44] =  45 'bx0000100000xx100x001xx0000100000xx100x001xx00;
// BR
	cfgsin31[0:44] =  45 'b00000100xx100x100xx0000000001xx010x001xx00000;
	cfgsin30[0:44] =  45 'b10000xx010x100xx0000000001xx010x010xx00001000;
	cfgsin29[0:44] =  45 'b00xx100x100xx0000000100xx001x100xx0010001000x;
	cfgsin28[0:44] =  45 'bx010x001xx0000010000xx010x010xx0001000100xx10;
	cfgsin27[0:44] =  45 'b0x100xx0000100000xx001x001xx0000010000xx010x0;
	cfgsin26[0:44] =  45 'b01xx0000100000xx001x100xx0000010000xx010x001x;
	cfgsin25[0:44] =  45 'bx0000001000xx010x100xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x010xx00x;
end
endtask
task get_wl_pat228; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx100x100x00000001000xx100x0011x00;
	cfgsin1[0:44] =  45 'b00010000xx001x0101x0000010000xx010x0011x00000;
	cfgsin2[0:44] =  45 'b00001xx001x1001x0000100000xx010x0011x00001000;
	cfgsin3[0:44] =  45 'b00xx010x0011x0000001000xx100x0011x0000001000x;
	cfgsin4[0:44] =  45 'bx100x0101x0000001000xx100x0101x0000001000xx00;
	cfgsin5[0:44] =  45 'b1x0101x0000000001xx001x1001x0000001000xx100x0;
	cfgsin6[0:44] =  45 'b011x1001010000xx001x0101x0000000100xx001x0101;
	cfgsin7[0:44] =  45 'bx0000100000xx001x0101x0000100000xx001x0101x00;
// TR
	cfgsin15[0:44] =  45 'b00000001xx010x1001x0000100000xx010x0011x00010;
	cfgsin14[0:44] =  45 'b01000xx100x0011x0000100000xx010x0011x00001000;
	cfgsin13[0:44] =  45 'b00xx100x1000x0000100000xx010x0011x0000001000x;
	cfgsin12[0:44] =  45 'bx100x0011x0000001000xx100x0101x0000100000xx00;
	cfgsin11[0:44] =  45 'b1x0101x0000001000xx100x0011x0000000001xx010x1;
	cfgsin10[0:44] =  45 'b001x0000000001xx010x1001x0001000001xx010x1001;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000100000xx100x001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00000;
	cfgsin18[0:44] =  45 'b00001xx001x1001x0000000001xx001x1001x00000000;
	cfgsin19[0:44] =  45 'b01xx010x1001x0000100000xx001x0101x0000100000x;
	cfgsin20[0:44] =  45 'bx001x0101x0100001000xx100x0011x0100100000xx00;
	cfgsin21[0:44] =  45 'b1x0101x0000100000xx001x0101x0001000001xx001x1;
	cfgsin22[0:44] =  45 'b001x0000100000xx001x0101x0000000001xx001x1001;
	cfgsin23[0:44] =  45 'bx0000000001xx001x1001x0000000001xx001x1001x00;
// BR
	cfgsin31[0:44] =  45 'b10000001xx001x1001x0000100000xx010x1001x01010;
	cfgsin30[0:44] =  45 'b00010xx010x0011x0010000001xx001x1001x00001000;
	cfgsin29[0:44] =  45 'b00xx100x1000x0000100000xx010x1001x0000001000x;
	cfgsin28[0:44] =  45 'bx100x0101x0000000001xx010x1001x0000000001xx01;
	cfgsin27[0:44] =  45 'b0x1001x0001100000xx001x0101x0000010000xx010x0;
	cfgsin26[0:44] =  45 'b011x0000000001xx010x1001x0000010000xx001x0101;
	cfgsin25[0:44] =  45 'bx0000001000xx100x0011x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx001x010x0000;
end
endtask
task get_wl_pat227; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000001000000000000000;
	cfgsin1[0:44] =  45 'b000001000000000000010000000001000000000010000;
	cfgsin2[0:44] =  45 'b100000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b001000000000000100001000000100000000000000010;
	cfgsin4[0:44] =  45 'b000000000000000000010000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000010000000000000000000000100000101000000;
	cfgsin6[0:44] =  45 'b000000000100000000000010000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000010000000000010000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000010000000000000000000;
	cfgsin12[0:44] =  45 'b000000100010000000000000000100001000000000010;
	cfgsin11[0:44] =  45 'b000000010000001000000000100000000000000000000;
	cfgsin10[0:44] =  45 'b000010000001000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000010000000000100000000000;
	cfgsin19[0:44] =  45 'b000000000000000001000000000000000000000000100;
	cfgsin20[0:44] =  45 'b010000000000000000000000000001000100000000000;
	cfgsin21[0:44] =  45 'b000100000000000000000000000000000000000010000;
	cfgsin22[0:44] =  45 'b001000000000001000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000001;
// BR
	cfgsin31[0:44] =  45 'b000001000000010000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000010000000000000000000000000000000010000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000010000000001000;
	cfgsin28[0:44] =  45 'b000000001000000000100000000101000000000000000;
	cfgsin27[0:44] =  45 'b000001000000000000001000000000000001000000000;
	cfgsin26[0:44] =  45 'b000000000000001000000000000000001000000000000;
	cfgsin25[0:44] =  45 'b000000001000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat226; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000100000000001;
	cfgsin1[0:44] =  45 'b000000000000010000000000000000000000000000010;
	cfgsin2[0:44] =  45 'b010000000000000010010000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000010001001000001000000000001000000000;
	cfgsin4[0:44] =  45 'b000001000010100000100100100000010000000000000;
	cfgsin5[0:44] =  45 'b000000000101000000000100000100000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000010000010000100000000;
	cfgsin7[0:44] =  45 'b000000000000000000100000000000001000000000001;
// TR
	cfgsin15[0:44] =  45 'b001000000000000000000010010001000000000000000;
	cfgsin14[0:44] =  45 'b001001000000000000000000100000000000000000000;
	cfgsin13[0:44] =  45 'b100000000000001000000000000000100010000000010;
	cfgsin12[0:44] =  45 'b000000000000010000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000010000000000000000000000010000000000;
	cfgsin10[0:44] =  45 'b000000010000000000000010001000000000000000010;
	cfgsin9[0:44] =  45 'b010000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000010;
	cfgsin18[0:44] =  45 'b000000000000000000100010001000000000001100000;
	cfgsin19[0:44] =  45 'b100000001000010010000100000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000001000000000000000000000010000;
	cfgsin21[0:44] =  45 'b000000001010000000000000001000000000000000000;
	cfgsin22[0:44] =  45 'b000000100000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000010001000000000000000;
// BR
	cfgsin31[0:44] =  45 'b001000000000001000010000000000000000001000000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000010000000000000000001100000000;
	cfgsin28[0:44] =  45 'b000100000001000000000000000000010010010000000;
	cfgsin27[0:44] =  45 'b001000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000010000010000000101001000000000000100;
	cfgsin25[0:44] =  45 'b010000000000000000000000000000010000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000100000;
end
endtask
task get_wl_pat225; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001100xx110x0010x0010001100x;
	cfgsin1[0:44] =  45 'bx110x0010x0100001100xx110x0100x0110010100xx00;
	cfgsin2[0:44] =  45 'b0x0001x0101010100xx001x0110x0110010101xx110x0;
	cfgsin3[0:44] =  45 'b100x0110000100xx000x0000x0100010100xx101x0100;
	cfgsin4[0:44] =  45 'bx0101000100xx010x0000x0000010100xx110x0110x01;
	cfgsin5[0:44] =  45 'b10001100xx000x0101x0100001001xx010x0000x10010;
	cfgsin6[0:44] =  45 'b10100xx000x1010x0110000100xx110x0001x00100011;
	cfgsin7[0:44] =  45 'b01xx110x1001x0110000101xx110x0100x0110010100x;
// TR
	cfgsin15[0:44] =  45 'bx100x1010x0110010100xx001x0000x0001010101xx01;
	cfgsin14[0:44] =  45 'b0x0000x0110010101xx110x0010x0110001101xx110x0;
	cfgsin13[0:44] =  45 'b010x0110001100xx110x0101x0010000100xx110x0100;
	cfgsin12[0:44] =  45 'bx0110000100xx001x0110x0101000100xx101x0110x00;
	cfgsin11[0:44] =  45 'b01001100xx010x0010x0110000101xx110x0010x01100;
	cfgsin10[0:44] =  45 'b01010xx010x0010x0101100000xx010x0110x01100001;
	cfgsin9[0:44] =  45 'b00xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0101x0110010101xx110x0101x0110010101xx00;
	cfgsin18[0:44] =  45 'b1x1010x0101001101xx000x0000x0101000100xx010x0;
	cfgsin19[0:44] =  45 'b010x0110000100xx000x0010x0101001101xx101x0001;
	cfgsin20[0:44] =  45 'bx0001010100xx101x0010x0101001000xx010x1000x01;
	cfgsin21[0:44] =  45 'b10000100xx010x0101x0101001001xx001x0110x00010;
	cfgsin22[0:44] =  45 'b01001xx001x0100x0110001101xx110x0110x01100011;
	cfgsin23[0:44] =  45 'b01xx110x0110x1010001101xx010x0010x0101001100x;
// BR
	cfgsin31[0:44] =  45 'bx000x0001x0100100000xx101x1001x0101010000xx00;
	cfgsin30[0:44] =  45 'b1x0100x0101010101xx010x0110x0110001100xx110x0;
	cfgsin29[0:44] =  45 'b110x0101001101xx001x1010x0101000100xx010x0010;
	cfgsin28[0:44] =  45 'bx0100010000xx110x0010x0110000000xx001x0010x01;
	cfgsin27[0:44] =  45 'b01000001xx010x0110x0010001101xx110x0010x10100;
	cfgsin26[0:44] =  45 'b01011xx110x0000x0010001000xx100x0010x01100001;
	cfgsin25[0:44] =  45 'b00xx110x0010x0110001101xx110x0100x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001000011xx;
end
endtask
task get_wl_pat224; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x000000110000000x0000x01100011000;
	cfgsin1[0:44] =  45 'b0000x0100x011000110100010x0000x01010000100001;
	cfgsin2[0:44] =  45 'b0x0001x010001000000010x0000x000000010000010x1;
	cfgsin3[0:44] =  45 'b010x010000010000000x0000x010000100000000x0110;
	cfgsin4[0:44] =  45 'bx000000010000000x0000x010000100000000x0010x00;
	cfgsin5[0:44] =  45 'b0000010000001x0110x011000110000001x0101x01000;
	cfgsin6[0:44] =  45 'b0110000010x1010x010001010000001x0110x01010011;
	cfgsin7[0:44] =  45 'b0000001x0110x010000110000000x0101x01000001000;
// TR
	cfgsin15[0:44] =  45 'b0000x0110x011000110000001x0100x01000011000000;
	cfgsin14[0:44] =  45 'b1x0110x010000110000000x0100x011000110000000x0;
	cfgsin13[0:44] =  45 'b100x011000101000010x0110x011000110000000x0010;
	cfgsin12[0:44] =  45 'bx001000110000010x0110x011000101000001x0110x01;
	cfgsin11[0:44] =  45 'b1000110000000x0001x010100110000001x0101x01010;
	cfgsin10[0:44] =  45 'b0110000000x0110x011000110000010x0110x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
// BL
	cfgsin16[0:44] =  45 'bxxx00xx00xxx00xxx00xx00x00xx00xxx00xxx00xx00x;
	cfgsin17[0:44] =  45 'b10xx00xxx00xxx00xx00x00xx10xxx00xxx00xx00x10x;
	cfgsin18[0:44] =  45 'bx10xxx10xxx00xx00x10xx00xxx10xxx00xx00x10xx10;
	cfgsin19[0:44] =  45 'bxxx10xxx00xx00x10xx10xxx00xxx00xx00x10xx10xxx;
	cfgsin20[0:44] =  45 'b10xxx00xx00x10xx10xxx10xxx00xx00x10xx10xxx10x;
	cfgsin21[0:44] =  45 'bxx10xx00x10xx10xxx10xxx10xx00x10xx10xxx10xxx0;
	cfgsin22[0:44] =  45 'b0xx00x10xx10xxx10xxx10xx00x10xx10xxx10xxx00xx;
	cfgsin23[0:44] =  45 'b00x10xx10xxx10xxx00xx00x10xx10xxx10xxx00xx00x;
// BR
	cfgsin31[0:44] =  45 'b00xx10xxx00xxx00xx00x10xx10xxx00xxx00xx00x10x;
	cfgsin30[0:44] =  45 'bx10xxx10xxx00xx00x10xx10xxx10xxx00xx00x10xx10;
	cfgsin29[0:44] =  45 'bxxx10xxx00xx00x10xx10xxx10xxx00xx00x10xx10xxx;
	cfgsin28[0:44] =  45 'b10xxx00xx00x10xx00xxx10xxx00xx00x10xx10xxx00x;
	cfgsin27[0:44] =  45 'bxx10xx00x10xx10xxx10xxx00xx00x10xx10xxx10xxx0;
	cfgsin26[0:44] =  45 'b0xx00x10xx10xxx10xxx00xx00x10xx10xxx10xxx00xx;
	cfgsin25[0:44] =  45 'b00x10xx00xxx00xxx10xx00x00xx00xxx00xxx00xx00x;
	cfgsin24[0:44] =  45 'bxx00xx00xxx00xxx00xx00x10xx00xxx10xxx00xx00xx;
end
endtask
task get_wl_pat223; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000010000000000000000000101000000010000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000100001000010000000000;
	cfgsin3[0:44] =  45 'b000000100000000000000000000010000100001000000;
	cfgsin4[0:44] =  45 'b010100100000000101000000010000000000100100001;
	cfgsin5[0:44] =  45 'b100010000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000100000;
// TR
	cfgsin15[0:44] =  45 'b001000000000000000000000000000000010000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000100;
	cfgsin13[0:44] =  45 'b001000000000000000000000000000000000000100000;
	cfgsin12[0:44] =  45 'b100000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000100000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000001000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x1001x011001001000000x0000x100000110000000x0;
	cfgsin19[0:44] =  45 'b000x101000100000010x0010x011000010000010x1010;
	cfgsin20[0:44] =  45 'bx011001010000001x0100x010101001000001x0110x00;
	cfgsin21[0:44] =  45 'b0000010000010x0010x011000101000001x1000x00000;
	cfgsin22[0:44] =  45 'b1010000000x1010x010001010000010x1000x01100101;
	cfgsin23[0:44] =  45 'b0000000x0100x011000110000001x0100x01000011000;
// BR
	cfgsin31[0:44] =  45 'b0010x0110x010010100000010x1010x01100101000000;
	cfgsin30[0:44] =  45 'b1x0000x010000010000000x0000x011001010000000x0;
	cfgsin29[0:44] =  45 'b010x011000010000000x0100x011000010000000x0110;
	cfgsin28[0:44] =  45 'bx101001010000001x0110x011000110000000x0001x01;
	cfgsin27[0:44] =  45 'b0101010000010x1010x010001010000101x0000x00100;
	cfgsin26[0:44] =  45 'b0110000000x0100x001000110000000x0010x00100011;
	cfgsin25[0:44] =  45 'b0000010x0000x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100000x;
end
endtask
task get_wl_pat222; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000001100000000001000101000000000000;
	cfgsin1[0:44] =  45 'b000100000000000000000010000000000000000000000;
	cfgsin2[0:44] =  45 'b001000000010001000000000010000100000000000000;
	cfgsin3[0:44] =  45 'b000000000010010001000110000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000100000001000000000000000;
	cfgsin5[0:44] =  45 'b000000010000000000000000000000000000000000010;
	cfgsin6[0:44] =  45 'b000000000000000000100000001000000000000000000;
	cfgsin7[0:44] =  45 'b001000000000000001000010000010000000100000010;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000010000000000100000000001000;
	cfgsin14[0:44] =  45 'b000000000010000010000010000100000000010010000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000100;
	cfgsin12[0:44] =  45 'b000000000000010000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000010000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000010000000010000000000100;
	cfgsin19[0:44] =  45 'b101000000000000000000100000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000010000010000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000010000100000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000010000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000100000101000000000001000000000000000001000;
	cfgsin29[0:44] =  45 'b100000001000000000000001000000000000000100000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000001000000;
	cfgsin27[0:44] =  45 'b000000000100000000000010000000000001000010000;
	cfgsin26[0:44] =  45 'b000000000000000010000000000000101000000000000;
	cfgsin25[0:44] =  45 'b000000001000000000000000000000000000000000010;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000100x;
end
endtask
task get_wl_pat221; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx1xx1010000001000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000001000100xx0xx0100000000001100xx1xx11;
	cfgsin2[0:44] =  45 'b00000001000100xx1xx1100000010000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00001000100xx0xx1100000010000010xx1xx10100000;
	cfgsin4[0:44] =  45 'b01000001xx1xx1001000001000100xx1xx10100000010;
	cfgsin5[0:44] =  45 'b00010xx0xx1010000001000100xx1xx10010001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1010000000100100xx0xx1001000001000010x;
	cfgsin7[0:44] =  45 'bx0xx1001000001000010xx0xx1100000001000010xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1001000000100010xx0xx1100000000001100xx0xx10;
	cfgsin14[0:44] =  45 'b10000001000100xx0xx1010000001000100xx0xx00010;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1010000010000100xx1xx11000000;
	cfgsin12[0:44] =  45 'b01000100xx1xx0010000001000001xx1xx10001000000;
	cfgsin11[0:44] =  45 'b10100xx1xx1100000100000100xx1xx11000000010001;
	cfgsin10[0:44] =  45 'b00xx1xx1100000001000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000010;
	cfgsin18[0:44] =  45 'b000000000000000000001000001000000000000000000;
	cfgsin19[0:44] =  45 'b000000000001000000000000000000010010000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000100000000010100000000010;
	cfgsin21[0:44] =  45 'b100010000010000000000000000000000000001010010;
	cfgsin22[0:44] =  45 'b000000000000000000010000000000000001000000000;
	cfgsin23[0:44] =  45 'b010000100010000000000000000000001000000000010;
// BR
	cfgsin31[0:44] =  45 'b000000000000010000000000000000000000000010000;
	cfgsin30[0:44] =  45 'b000001000000000000000100001000000000010000000;
	cfgsin29[0:44] =  45 'b000000000000000000100000000000100010000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000010000100000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000010000000001000000;
	cfgsin26[0:44] =  45 'b000000001000001000000000010000000000010000000;
	cfgsin25[0:44] =  45 'b000000000000100000000010000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000100100000000000000000000;
end
endtask
task get_wl_pat220; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1100000001000001xx1x;
	cfgsin1[0:44] =  45 'bx1100000001000001xx1xx0010000000001001xx1xx00;
	cfgsin2[0:44] =  45 'b10000010000001xx1xx0000100001000100xx0xx01000;
	cfgsin3[0:44] =  45 'b00001000001xx1xx1001000001000100xx0xx10100000;
	cfgsin4[0:44] =  45 'b01000001xx0xx1000001000100001xx1xx11000000010;
	cfgsin5[0:44] =  45 'b00001xx0xx1100000001000001xx0xx11000000001001;
	cfgsin6[0:44] =  45 'b00xx1xx0100000001000100xx0xx1010000001000001x;
	cfgsin7[0:44] =  45 'bx1xx1010000001000001xx0xx0001000001000001xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1010000001000001xx1xx1001000000100100xx0xx11;
	cfgsin14[0:44] =  45 'b00000001000001xx0xx1100000001000001xx0xx10010;
	cfgsin13[0:44] =  45 'b00100000100xx0xx1000010010000100xx1xx10001000;
	cfgsin12[0:44] =  45 'b00001010xx0xx1010000001000001xx0xx11000000100;
	cfgsin11[0:44] =  45 'b00010xx1xx1000010001000010xx0xx11000000010000;
	cfgsin10[0:44] =  45 'b01xx0xx1100000001000001xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx00;
	cfgsin18[0:44] =  45 'b10000001000010xx1xx1001000000001100xx1xx10000;
	cfgsin19[0:44] =  45 'b10100000010xx1xx1010000001000010xx0xx10100000;
	cfgsin20[0:44] =  45 'b01000001xx1xx1010000000001010xx0xx00100000010;
	cfgsin21[0:44] =  45 'b00100xx0xx0000010000001100xx1xx11000000100001;
	cfgsin22[0:44] =  45 'b00xx0xx1001000001000100xx1xx1010000001000010x;
	cfgsin23[0:44] =  45 'bx0xx1010000001000010xx1xx1001000000010010xx0x;
// BR
	cfgsin31[0:44] =  45 'bx1010000001000100xx1xx1010000001000100xx0xx11;
	cfgsin30[0:44] =  45 'b00000001000100xx1xx1010000000010010xx0xx11000;
	cfgsin29[0:44] =  45 'b00001000100xx1xx1010000001000100xx0xx11000001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1001000001000001xx0xx10100000010;
	cfgsin27[0:44] =  45 'b00010xx1xx0000010100000100xx0xx00100000000100;
	cfgsin26[0:44] =  45 'b10xx1xx1010000000010010xx0xx1000010000001100x;
	cfgsin25[0:44] =  45 'bx1xx1010000000010100xx0xx1010000100000100xx0x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx0xx0010000100000100xx1xx;
end
endtask
task get_wl_pat219; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000100x01000010000001000001xx00;
	cfgsin1[0:44] =  45 'b00010000001000010xx0010100000010000010xx00100;
	cfgsin2[0:44] =  45 'b01000010000010xx0010010000001000010xx10010100;
	cfgsin3[0:44] =  45 'b00001000001xx0000000100010000010xx00000100000;
	cfgsin4[0:44] =  45 'b01000100xx0000100000001000001xx00000100000010;
	cfgsin5[0:44] =  45 'b00100xx0100010000001000010xx00000100001000001;
	cfgsin6[0:44] =  45 'b00xx0001010000001000001xx0100100000001000100x;
	cfgsin7[0:44] =  45 'bx0000100000100000100xx1001000001001000100xx10;
// TR
	cfgsin15[0:44] =  45 'b00100000001000100xx0000010000000001100xx00000;
	cfgsin14[0:44] =  45 'b00100001000001xx1000010000001000001xx10000010;
	cfgsin13[0:44] =  45 'b00100000100xx0100100000010000100xx00000000100;
	cfgsin12[0:44] =  45 'b01000001xx0000010000001000100xx10001000000100;
	cfgsin11[0:44] =  45 'b00001xx0000001000100000010xx01000000100010000;
	cfgsin10[0:44] =  45 'b01xx1000010000001000001xx0000010000100000100x;
	cfgsin9[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx01;
	cfgsin18[0:44] =  45 'b00000001000100xx1xx1100000100000001xx1xx11000;
	cfgsin19[0:44] =  45 'b00000100001xx1xx1100000000010100xx0xx00100000;
	cfgsin20[0:44] =  45 'b01000001xx0xx1001000000100001xx1xx10000100010;
	cfgsin21[0:44] =  45 'b00001xx0xx1100000001000001xx0xx00100000000011;
	cfgsin22[0:44] =  45 'b00xx0xx0100000001000001xx1xx0100000001000001x;
	cfgsin23[0:44] =  45 'bx1xx1100000001000001xx1xx1100000001000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx0100000000010001xx1xx0100000001000001xx0xx00;
	cfgsin30[0:44] =  45 'b01000000001010xx1xx0000010000001100xx0xx10001;
	cfgsin29[0:44] =  45 'b00000001001xx0xx1100000000010100xx0xx10000010;
	cfgsin28[0:44] =  45 'b10000100xx1xx1001000001000001xx1xx01000000010;
	cfgsin27[0:44] =  45 'b00100xx1xx0100000000001100xx1xx11000000000011;
	cfgsin26[0:44] =  45 'b00xx1xx1000010001000100xx1xx1100000001000001x;
	cfgsin25[0:44] =  45 'bx1xx0000100001000010xx0xx1010000100000100xx0x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat218; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000100xx0000001000001000001xx00;
	cfgsin1[0:44] =  45 'b00001000001000100xx0000000010100000010xx00000;
	cfgsin2[0:44] =  45 'b00100100000010xx0000000100100000001xx00000010;
	cfgsin3[0:44] =  45 'b00001000100xx0000000001010000100xx10001000000;
	cfgsin4[0:44] =  45 'b01000100xx0100100000001000100xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx0000001000001000001xx01000010000010000;
	cfgsin6[0:44] =  45 'b10xx0000000001100000010xx0000000010001000010x;
	cfgsin7[0:44] =  45 'bx0000001000001000010xx0000000001001000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000001000001xx0000001000100000001xx01000;
	cfgsin14[0:44] =  45 'b01000001000100xx0000001000001000001xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000100000;
	cfgsin12[0:44] =  45 'b00001010xx0100100000001000100xx00001000000010;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000010xx00000010000000010;
	cfgsin10[0:44] =  45 'b01xx0000001000000001010xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x00000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00010;
	cfgsin18[0:44] =  45 'b01000001000001xx0000000100000100100xx00000010;
	cfgsin19[0:44] =  45 'b00010000100xx0000010000100000001xx10010100000;
	cfgsin20[0:44] =  45 'b01000100xx1000100000001000100xx00001000000000;
	cfgsin21[0:44] =  45 'b01010xx1000010000100000100xx00010010001000001;
	cfgsin22[0:44] =  45 'b00xx0001000010001000001xx0001010000001000100x;
	cfgsin23[0:44] =  45 'bx0000010000001000100xx0000001000001000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000001000010xx0000010000001000001xx00000;
	cfgsin30[0:44] =  45 'b00010100000001xx0001100000010000001xx00000010;
	cfgsin29[0:44] =  45 'b00001000001xx1000001000001000100xx00000100001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000001000100xx00010010000010;
	cfgsin27[0:44] =  45 'b00001xx0001000100100000100xx00000001001000000;
	cfgsin26[0:44] =  45 'b01xx0000100000001000001xx0000010000001000010x;
	cfgsin25[0:44] =  45 'bx0000100000001000001xx0100010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000100000100x0000;
end
endtask
task get_wl_pat217; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00010000100000100x00000001000001000001xx00;
	cfgsin1[0:44] =  45 'b00001000001000010xx0000001000001000001xx00000;
	cfgsin2[0:44] =  45 'b10000000001100xx0000001000000001100xx00000000;
	cfgsin3[0:44] =  45 'b01001000001xx0000010000000001010xx00001000000;
	cfgsin4[0:44] =  45 'b01000001xx0000000100001000010xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx0000000001001000001xx00000000010000010;
	cfgsin6[0:44] =  45 'b01xx0000001000001000001xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0000100000001000100xx0000001000001000010xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000001000001xx0000001000001000100xx00000;
	cfgsin14[0:44] =  45 'b00010001000010xx0000001000001000001xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000010000100xx00000000010;
	cfgsin12[0:44] =  45 'b01000100xx0000100000001000001xx00000000101000;
	cfgsin11[0:44] =  45 'b00010xx0000001000100000001xx00000010000000010;
	cfgsin10[0:44] =  45 'b01xx0000000001000001001xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000001000001xx0000001000100000100xx00000100;
	cfgsin19[0:44] =  45 'b00000001010xx0000100000001000001xx00001000000;
	cfgsin20[0:44] =  45 'b01000100xx0000100000010000010xx00000000100100;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000010xx10000010000000010;
	cfgsin22[0:44] =  45 'b10xx0000100000001000010xx0000000010001000100x;
	cfgsin23[0:44] =  45 'bx0000001000001000100xx0000001000001000001xx00;
// BR
	cfgsin31[0:44] =  45 'b01000010001000001xx0000001000001000001xx10010;
	cfgsin30[0:44] =  45 'b00100000001100xx0000000001100000010xx10000000;
	cfgsin29[0:44] =  45 'b10001000100xx0000001000100000010xx10000010000;
	cfgsin28[0:44] =  45 'b00001001xx0000100000001000100xx00000001000010;
	cfgsin27[0:44] =  45 'b00001xx0000000010100000010xx00000010000001000;
	cfgsin26[0:44] =  45 'b01xx0000001000001000010xx0000000010001000010x;
	cfgsin25[0:44] =  45 'bx0000000001001000001xx0000001000100000100xx01;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000100000010xx000;
end
endtask
task get_wl_pat216; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000100x00000001000001000010xx00;
	cfgsin1[0:44] =  45 'b00001000001000001xx0000100000000100100xx00000;
	cfgsin2[0:44] =  45 'b00100000100100xx0001100000000001100xx00000000;
	cfgsin3[0:44] =  45 'b10010000010xx0000000010100000001xx00001000000;
	cfgsin4[0:44] =  45 'b01000001xx0000001000001000001xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx0000001000001000001xx00000010000100001;
	cfgsin6[0:44] =  45 'b00xx1000000010010000001xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0100000100001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000001000001xx0000000100010000100xx00000;
	cfgsin14[0:44] =  45 'b01000001000001xx0000001000001000001xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000000001100xx00000010000;
	cfgsin12[0:44] =  45 'b01000001xx0100100000001000001xx00000100000000;
	cfgsin11[0:44] =  45 'b01010xx0000001000001000100xx00000010000010000;
	cfgsin10[0:44] =  45 'b01xx0000001000000001001xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b00100001000001xx0000001000010000100xx00000000;
	cfgsin19[0:44] =  45 'b01010000100xx0000000010001000010xx00001000000;
	cfgsin20[0:44] =  45 'b01000001xx0000000100000100100xx00000100000010;
	cfgsin21[0:44] =  45 'b00001xx0000001000100000001xx00000100000000011;
	cfgsin22[0:44] =  45 'b00xx1000001000001000100xx0000001000001000010x;
	cfgsin23[0:44] =  45 'bx0000001000001000010xx0000001000001000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000001000010xx0001000010001000001xx00000;
	cfgsin30[0:44] =  45 'b00010000001010xx0000100000010000100xx00000001;
	cfgsin29[0:44] =  45 'b00000001010xx0000001000001000001xx00000000100;
	cfgsin28[0:44] =  45 'b00001010xx0000100000001000001xx00000010000010;
	cfgsin27[0:44] =  45 'b00001xx0000001000100000001xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000000010001000001xx0000010000001000100x;
	cfgsin25[0:44] =  45 'bx0010000010001000001xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000000010100x000x;
end
endtask
task get_wl_pat215; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000001000001000100xx00;
	cfgsin1[0:44] =  45 'b00001000001000100xx0000100000000010100xx10001;
	cfgsin2[0:44] =  45 'b00000001000001xx0000001000000010010xx01100010;
	cfgsin3[0:44] =  45 'b00001000100xx0010000100000010010xx01001000000;
	cfgsin4[0:44] =  45 'b01000001xx0000000100001000100xx00000000100010;
	cfgsin5[0:44] =  45 'b00100xx0000000100001000100xx00000000101000001;
	cfgsin6[0:44] =  45 'b00xx0000000100001000100xx0000001000001000100x;
	cfgsin7[0:44] =  45 'bx0000000100001000001xx0000001000001000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000001000100xx0100100000000010001xx00000;
	cfgsin14[0:44] =  45 'b01000001000100xx0000001000001000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000001000100xx00000010000;
	cfgsin12[0:44] =  45 'b01000010xx0000100000001000001xx00000000100100;
	cfgsin11[0:44] =  45 'b00001xx0000000100000001100xx00000001000010001;
	cfgsin10[0:44] =  45 'b00xx0000000010000100100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b00100001000001xx0000010000000010100xx00000000;
	cfgsin19[0:44] =  45 'b10000010001xx0000010000001000100xx00001000000;
	cfgsin20[0:44] =  45 'b01000001xx0000010000001000001xx00001000000001;
	cfgsin21[0:44] =  45 'b00001xx0000001000100000100xx00000001000010000;
	cfgsin22[0:44] =  45 'b01xx0000000010000010001xx0000000010001000001x;
	cfgsin23[0:44] =  45 'bx0000000010001000001xx0000010000001000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00000100100000010xx0000000010001000100xx00010;
	cfgsin30[0:44] =  45 'b01000000010001xx0000010000000100001xx00000001;
	cfgsin29[0:44] =  45 'b00001000001xx0000000010000001100xx00010000010;
	cfgsin28[0:44] =  45 'b00010100xx0000100000001000001xx00000001000010;
	cfgsin27[0:44] =  45 'b00001xx0000000010000001100xx00000100000000010;
	cfgsin26[0:44] =  45 'b10xx0000010000001000001xx0000001000001000001x;
	cfgsin25[0:44] =  45 'bx0000010000001000010xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000000001100000100x0000;
end
endtask
task get_wl_pat214; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx0000001000001000001xx00;
	cfgsin1[0:44] =  45 'b00100000001000001xx1001001000000001001xx00010;
	cfgsin2[0:44] =  45 'b00100000001010xx0000000010000001100xx00000010;
	cfgsin3[0:44] =  45 'b00001000001xx1000000100000001100xx00001000000;
	cfgsin4[0:44] =  45 'b01000001xx1000001000001000001xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx0000001000001000001xx00011000001000001;
	cfgsin6[0:44] =  45 'b00xx0000000010001000001xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0000001000001000100xx0001001000000001001xx10;
// TR
	cfgsin15[0:44] =  45 'b00001000001000010xx0001001000000001010xx10000;
	cfgsin14[0:44] =  45 'b01000001000001xx0000001000001000001xx10000010;
	cfgsin13[0:44] =  45 'b00100000100xx0100001000001000100xx00000010000;
	cfgsin12[0:44] =  45 'b00001100xx0000100000001000001xx10000001000100;
	cfgsin11[0:44] =  45 'b00100xx0101000100000001010xx10100001000010000;
	cfgsin10[0:44] =  45 'b01xx0000100000001000001xx1000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b00100001000010xx0001100000100000010xx00001000;
	cfgsin19[0:44] =  45 'b00000010100xx0000001000001000001xx00001000000;
	cfgsin20[0:44] =  45 'b01000001xx0000010000000010100xx00000010000000;
	cfgsin21[0:44] =  45 'b10010xx0000001000000001100xx00000001000000010;
	cfgsin22[0:44] =  45 'b10xx0000000001001000100xx0000001000001000100x;
	cfgsin23[0:44] =  45 'bx0000000100000010100xx0000000100001000010xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000001000100xx0000001000001000100xx00000;
	cfgsin30[0:44] =  45 'b00100000001010xx0000000100001000001xx00000001;
	cfgsin29[0:44] =  45 'b00000001100xx0000001000010000100xx00000010000;
	cfgsin28[0:44] =  45 'b00001100xx0000100000001000001xx00000001000010;
	cfgsin27[0:44] =  45 'b00010xx0001001000001000100xx00000001001000001;
	cfgsin26[0:44] =  45 'b00xx0000000100001000010xx1000000100100000010x;
	cfgsin25[0:44] =  45 'bx0000001000001000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000100000100xx00x;
end
endtask
task get_wl_pat213; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000100x01xx1100000100000001xx1x;
	cfgsin1[0:44] =  45 'bx1001000001000001xx0xx0001000010000010xx0xx00;
	cfgsin2[0:44] =  45 'b00010000100100xx1xx0100000000001001xx0xx00100;
	cfgsin3[0:44] =  45 'b00100000001xx0xx0001000001000010xx0xx11000001;
	cfgsin4[0:44] =  45 'b00000100xx0xx1001000100000001xx1xx10001001000;
	cfgsin5[0:44] =  45 'b00001xx1xx1000100000010001xx1xx00001001000001;
	cfgsin6[0:44] =  45 'b00xx0xx1001000100000001xx1xx1100000010000001x;
	cfgsin7[0:44] =  45 'bx1xx1100000100000010xx0xx0001000001000001xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000001xx0xx0010000100000100xx0xx10;
	cfgsin14[0:44] =  45 'b01000000100001xx1xx1000100010000001xx0xx10010;
	cfgsin13[0:44] =  45 'b00100000100xx0xx1001000100000100xx1xx10001000;
	cfgsin12[0:44] =  45 'b00001001xx0xx1100000100000100xx0xx11000000000;
	cfgsin11[0:44] =  45 'b10010xx0xx0001000001000010xx0xx00001000100000;
	cfgsin10[0:44] =  45 'b01xx1xx1010000010000001xx0xx1001000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00010;
	cfgsin18[0:44] =  45 'b00100001000100xx0000001000001000100xx00001000;
	cfgsin19[0:44] =  45 'b00001000010xx0000000001001000010xx00001000000;
	cfgsin20[0:44] =  45 'b01000001xx0001001000100000001xx00000001000010;
	cfgsin21[0:44] =  45 'b00001xx0000001000100000010xx00000010000000010;
	cfgsin22[0:44] =  45 'b01xx1010000001100000001xx1000001000001000001x;
	cfgsin23[0:44] =  45 'bx1000000100001000001xx0000000100001000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000001000001xx1000001000001000001xx10000;
	cfgsin30[0:44] =  45 'b00100000001100xx0000001000001000010xx10100100;
	cfgsin29[0:44] =  45 'b00000001001xx0000000100001000100xx00000010000;
	cfgsin28[0:44] =  45 'b00001100xx0000100000001000001xx00000001000010;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00001000001000000;
	cfgsin26[0:44] =  45 'b10xx0000001000001000100xx0000000010001000100x;
	cfgsin25[0:44] =  45 'bx1000100000001000010xx0100001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000100000010xx000;
end
endtask
task get_wl_pat212; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000100x01xx1100000000001010x00x;
	cfgsin1[0:44] =  45 'bx1001000000100010x00xx0010000000010010x01xx00;
	cfgsin2[0:44] =  45 'b10000100000010x00xx1010000100000010x00xx11000;
	cfgsin3[0:44] =  45 'b00000001001x01xx1010000001000010x11xx11000001;
	cfgsin4[0:44] =  45 'b00000001xx0xx1001000000001001x10xx10100001000;
	cfgsin5[0:44] =  45 'b00010x00xx1010000100000010x01xx10100000000100;
	cfgsin6[0:44] =  45 'b10x00xx1010000000100010x00xx1000010001000100x;
	cfgsin7[0:44] =  45 'b00xx1000010000100010x01xx1001000000001100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1000010100000010x00xx1010000100000010x00xx10;
	cfgsin14[0:44] =  45 'b01000000010100x01xx1000010010000100x00xx00100;
	cfgsin13[0:44] =  45 'b00100000100x01xx0010000100000100x01xx10100000;
	cfgsin12[0:44] =  45 'b00001001x01xx0010000100000001xx1xx00001000010;
	cfgsin11[0:44] =  45 'b00010x01xx1010000000001010x01xx11000000100000;
	cfgsin10[0:44] =  45 'b01x01xx1100000001000001x01xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100x01xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx00;
	cfgsin18[0:44] =  45 'b00100100000001xx1xx0001000001000001xx1xx10001;
	cfgsin19[0:44] =  45 'b00010000100xx1xx1000010100000100xx1xx11000001;
	cfgsin20[0:44] =  45 'b00000100xx1xx0100000100000010xx1xx10001000000;
	cfgsin21[0:44] =  45 'b10100xx1xx1001000100000100xx1xx11000000100001;
	cfgsin22[0:44] =  45 'b00xx0xx0001000100000001xx0xx1000100010000001x;
	cfgsin23[0:44] =  45 'bx0xx1001000100000001xx1xx1000010100000001xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1001000001000001xx0xx1100000010000001xx0xx00;
	cfgsin30[0:44] =  45 'b00001000001010xx1xx1000010010000100xx0xx00000;
	cfgsin29[0:44] =  45 'b01100000001xx1xx1001000100000100xx1xx00010000;
	cfgsin28[0:44] =  45 'b10000100xx1xx1100000100000100xx1xx10010000100;
	cfgsin27[0:44] =  45 'b00001xx1xx0001000100000100xx1xx10010000100001;
	cfgsin26[0:44] =  45 'b00xx1xx1000001100000001xx0xx1100000000010001x;
	cfgsin25[0:44] =  45 'bx0xx1001000010000001xx0xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0000100010000100x01xx;
end
endtask
task get_wl_pat211; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000000010100000100x000;
	cfgsin1[0:44] =  45 'b00000010100000100x00101000100001000100x000100;
	cfgsin2[0:44] =  45 'b00010000001001x00100000001100000100x010001000;
	cfgsin3[0:44] =  45 'b00100000001x00000010000001000010x000001000001;
	cfgsin4[0:44] =  45 'b00000100xx0100000010100000001x001000100001000;
	cfgsin5[0:44] =  45 'b00100x00100010000100000100x000000000101000001;
	cfgsin6[0:44] =  45 'b00x10000001000100000001x00000001000010000010x;
	cfgsin7[0:44] =  45 'b00000001000000010100x10000010000001000010x100;
// TR
	cfgsin15[0:44] =  45 'b00001000000001100x00000000010001000001x000000;
	cfgsin14[0:44] =  45 'b00010000100010x10000001000010000010x010010100;
	cfgsin13[0:44] =  45 'b00100000100x00000100000100000001x000001000001;
	cfgsin12[0:44] =  45 'b00000100x10001010000100000100xx00000100000000;
	cfgsin11[0:44] =  45 'b01100x00000010000001000010x100000000100100000;
	cfgsin10[0:44] =  45 'b10x00000000010010000010x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000100x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx00;
	cfgsin18[0:44] =  45 'b10000100000001x01xx0010000001000001x01xx10100;
	cfgsin19[0:44] =  45 'b00000010001x00xx1001000000100001x10xx10100001;
	cfgsin20[0:44] =  45 'b00000001xx0xx0010000000001100x00xx00100000001;
	cfgsin21[0:44] =  45 'b00001x01xx0010000001000100x00xx00100000000010;
	cfgsin22[0:44] =  45 'b01x00xx1010000010000001x00xx1010000000010010x;
	cfgsin23[0:44] =  45 'b00xx1100000000001010x00xx1000010100000100x01x;
// BR
	cfgsin31[0:44] =  45 'bx1000100000001010x01xx1100000010000010x01xx10;
	cfgsin30[0:44] =  45 'b10000000010001x01xx1010000000001010x01xx10000;
	cfgsin29[0:44] =  45 'b01000001001x01xx1010000000100010x11xx10100000;
	cfgsin28[0:44] =  45 'b00010001x01xx1010000100000001xx1xx10000100100;
	cfgsin27[0:44] =  45 'b00100x00xx1010000000010100x00xx10100000000010;
	cfgsin26[0:44] =  45 'b01x01xx1000010000100010x01xx1010000000100010x;
	cfgsin25[0:44] =  45 'b00xx1001000000100010x00xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0000100001000010x01x0;
end
endtask
task get_wl_pat210; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx0000010000000001001x101;
	cfgsin1[0:44] =  45 'b00010000000001001x00000000010000001001x100000;
	cfgsin2[0:44] =  45 'b10000000010100x10000001000010000001x100000100;
	cfgsin3[0:44] =  45 'b00100000001x10000000010001000010x100000100001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000100000001x100000100000001;
	cfgsin5[0:44] =  45 'b00001x10000010000000100001x100001000000010000;
	cfgsin6[0:44] =  45 'b01x10000010000000010100x10000010000100000001x;
	cfgsin7[0:44] =  45 'b10100010000001000001x10000010000100000001x100;
// TR
	cfgsin15[0:44] =  45 'b00010000001000001x10000001000000001100x101000;
	cfgsin14[0:44] =  45 'b10000100000001x10000010000100000001x100000100;
	cfgsin13[0:44] =  45 'b00100000100x10010010000001000010x100000100000;
	cfgsin12[0:44] =  45 'b01000010x10000010000100000100xx00101000000000;
	cfgsin11[0:44] =  45 'b01001x10000000010001000010x100000100001000001;
	cfgsin10[0:44] =  45 'b00x10000010000100000100x10000010000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000010;
	cfgsin18[0:44] =  45 'b10000100000001x00000010000001000010x000001000;
	cfgsin19[0:44] =  45 'b00001000010x00000000010000010001x010000100001;
	cfgsin20[0:44] =  45 'b00000100xx0001010000001000001x010101000000001;
	cfgsin21[0:44] =  45 'b00010x00001000100001000100x101001000000100000;
	cfgsin22[0:44] =  45 'b10x00100010000100000001x11000010000010000100x;
	cfgsin23[0:44] =  45 'b10100010000100000100x01000010000100000010x000;
// BR
	cfgsin31[0:44] =  45 'b00000010010000100x00000100000010000100x000000;
	cfgsin30[0:44] =  45 'b10000001000010x10000010000100000001x000000100;
	cfgsin29[0:44] =  45 'b00100000001x10000100000100000001x100000000100;
	cfgsin28[0:44] =  45 'b10000010x10000010000100000100xx00001000000100;
	cfgsin27[0:44] =  45 'b00010x00000001000100000100x101000000100001000;
	cfgsin26[0:44] =  45 'b10x00000010000100000100x00000000010010000100x;
	cfgsin25[0:44] =  45 'b00100000010000010100x00100100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001010000001000100xx00x;
end
endtask
task get_wl_pat209; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000100000001x000;
	cfgsin1[0:44] =  45 'b00100000100000001x00000000010000100001x100001;
	cfgsin2[0:44] =  45 'b00000010000001x00000100000000100010x100000000;
	cfgsin3[0:44] =  45 'b10000001001x00000100000001000010x000000100001;
	cfgsin4[0:44] =  45 'b00000001xx0000010000100000001x000000100001000;
	cfgsin5[0:44] =  45 'b00001x00000010000100000001x000000000101000001;
	cfgsin6[0:44] =  45 'b00x01000001000001000010x11000010000010000001x;
	cfgsin7[0:44] =  45 'b00000010000000100001x00000010000010000010x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000001x01000001000100000001x100000;
	cfgsin14[0:44] =  45 'b10000000100100x10000010000010000100x100001000;
	cfgsin13[0:44] =  45 'b00100000100x00000100000010000100x000001000001;
	cfgsin12[0:44] =  45 'b00000001x00000100000100000001xx00000100000000;
	cfgsin11[0:44] =  45 'b01010x00000010000001000010x000000100000100000;
	cfgsin10[0:44] =  45 'b01x00000010000010000001x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100000;
	cfgsin18[0:44] =  45 'b10000100000001x10000100000100000100x100000000;
	cfgsin19[0:44] =  45 'b10100000100x10000010000100000001x100000100001;
	cfgsin20[0:44] =  45 'b00000100xx0100001000001000010x100000100000100;
	cfgsin21[0:44] =  45 'b00100x10000100000100000100x100100010001000001;
	cfgsin22[0:44] =  45 'b00x10000010000100000001x10000010000000001001x;
	cfgsin23[0:44] =  45 'b10000010000000001001x10000010000010000001x100;
// BR
	cfgsin31[0:44] =  45 'b00010000000001001x10000010000000001001x100000;
	cfgsin30[0:44] =  45 'b00100010000100x10000010000000010100x100000100;
	cfgsin29[0:44] =  45 'b00100000001x10000010000000001100x100000100001;
	cfgsin28[0:44] =  45 'b00000100x10000010000100000100xx00000100001000;
	cfgsin27[0:44] =  45 'b00001x10000001000100000100x100000100001000001;
	cfgsin26[0:44] =  45 'b00x10000010000000001001x10000010000100000001x;
	cfgsin25[0:44] =  45 'b10000010000100000001x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000001000010xx000;
end
endtask
task get_wl_pat208; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000001000001x000;
	cfgsin1[0:44] =  45 'b00100000000001001x00000000001100000100x000101;
	cfgsin2[0:44] =  45 'b00000001000100x01000001000001000100x000001000;
	cfgsin3[0:44] =  45 'b00000010010x00000100000000010001x000000100001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000000010001x000000100001000;
	cfgsin5[0:44] =  45 'b00001x00000010000100000001x000001000000001000;
	cfgsin6[0:44] =  45 'b01x00000100000001000001x01000010000010000001x;
	cfgsin7[0:44] =  45 'b01000010000000001010x11000001000000010001x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000001x00000000010000100100x001000;
	cfgsin14[0:44] =  45 'b01000001000001x00000010000001000001x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000000010000001010x000001000000;
	cfgsin12[0:44] =  45 'b00010100x11000100000100000100xx00000100000001;
	cfgsin11[0:44] =  45 'b00001x10000010000000001100x110010100000010001;
	cfgsin10[0:44] =  45 'b00x10001010000000010100x10000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000001x00010000001001000100x000000100;
	cfgsin19[0:44] =  45 'b00000001100x00100010000000001010x000000100001;
	cfgsin20[0:44] =  45 'b00000001xx0000100000100000001x000000000101000;
	cfgsin21[0:44] =  45 'b00001x00000010000100000100x000000100000000101;
	cfgsin22[0:44] =  45 'b00x00000010000000001100x10000010000010000001x;
	cfgsin23[0:44] =  45 'b00000010000100000001x00000010000100000001x000;
// BR
	cfgsin31[0:44] =  45 'b00010000000001100x00000010000000001001x000000;
	cfgsin30[0:44] =  45 'b10000001000100x00000010000001000100x000000100;
	cfgsin29[0:44] =  45 'b00001000100x00000000100010000100x000000000010;
	cfgsin28[0:44] =  45 'b10000100x00000100000100000001xx00000100000100;
	cfgsin27[0:44] =  45 'b00001x01000010000000010010x000000100000010001;
	cfgsin26[0:44] =  45 'b00x00000010000100000001x00000010000010000001x;
	cfgsin25[0:44] =  45 'b00000100000001000001x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000001000100xx00x;
end
endtask
task get_wl_pat207; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000000001100000001x010;
	cfgsin1[0:44] =  45 'b00100000000001001x00000100000001000100x000001;
	cfgsin2[0:44] =  45 'b00000000001001x00010100000000010001x010000010;
	cfgsin3[0:44] =  45 'b00000001100x00000100000001000010x010000100001;
	cfgsin4[0:44] =  45 'b00000100x00000010000001000001x000000100001000;
	cfgsin5[0:44] =  45 'b00001x00000010000100000001x000001000000001000;
	cfgsin6[0:44] =  45 'b01x00110100000100000001x00000010000000001001x;
	cfgsin7[0:44] =  45 'b00000001000000001001x00000000010001000001x000;
// TR
	cfgsin15[0:44] =  45 'b10010000100000001x00000010000000100100x000100;
	cfgsin14[0:44] =  45 'b00010010000001x00100001000010000001x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000100000100000100x001000000011;
	cfgsin12[0:44] =  45 'b00000001x00000100000100000100x000000000010010;
	cfgsin11[0:44] =  45 'b00010x00000010000001000100x100000010000100000;
	cfgsin10[0:44] =  45 'b01x00000010000000100001x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000001x00000000010010000001x000010100;
	cfgsin19[0:44] =  45 'b00000010010x00000010000001000001x000000100001;
	cfgsin20[0:44] =  45 'b00000100xx0000010000001000100x000001000000000;
	cfgsin21[0:44] =  45 'b01010x10000010000100000100x000000100000001000;
	cfgsin22[0:44] =  45 'b01x00000000010000010001x00000010000010000001x;
	cfgsin23[0:44] =  45 'b00000010000000001001x00000100000100000001x000;
// BR
	cfgsin31[0:44] =  45 'b00010000100000010x00000010000100000010x000001;
	cfgsin30[0:44] =  45 'b00000001000001x00100010000100000010x010000100;
	cfgsin29[0:44] =  45 'b00000100001x00000001000001000010x000000100000;
	cfgsin28[0:44] =  45 'b01000001x00000100000100000100xx00000100000000;
	cfgsin27[0:44] =  45 'b10100x10000010000001000100x000000100000001000;
	cfgsin26[0:44] =  45 'b10x10000010000000010001x00000010000010000001x;
	cfgsin25[0:44] =  45 'b00000001000000001010x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat206; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100001000001000000001001x000;
	cfgsin1[0:44] =  45 'b00001000000001010x00101100000000100100x000000;
	cfgsin2[0:44] =  45 'b10000010000010x00000100000100000001x000000000;
	cfgsin3[0:44] =  45 'b01000001001x10100000010001000100x000000001001;
	cfgsin4[0:44] =  45 'b00000100001000001000100000001x010001000000000;
	cfgsin5[0:44] =  45 'b01001x00100100000000001001x000011000000000011;
	cfgsin6[0:44] =  45 'b00x00000001000000001010x10000010000010000001x;
	cfgsin7[0:44] =  45 'b00000100000100000001x00001001000001000001x010;
// TR
	cfgsin15[0:44] =  45 'b00100000100000001x00101001000010000010x000000;
	cfgsin14[0:44] =  45 'b00001000001001x00000001000000001001x010000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000001000001;
	cfgsin12[0:44] =  45 'b00000001x000000100001000001000010001000000010;
	cfgsin11[0:44] =  45 'b00100x10001010000001000001x000000100000000010;
	cfgsin10[0:44] =  45 'b01x01000001000000001001x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000001x00010000100001000001x000000100;
	cfgsin19[0:44] =  45 'b00000100100x00000001000000001100x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000000100100x000000010000010;
	cfgsin21[0:44] =  45 'b00010x10000010000100000100x000000100000000100;
	cfgsin22[0:44] =  45 'b10x00000010000000001010x00000100000100000001x;
	cfgsin23[0:44] =  45 'b00000100000000001001x00000010000100000001x000;
// BR
	cfgsin31[0:44] =  45 'b00100000000001001x00000010000010000100x100000;
	cfgsin30[0:44] =  45 'b00010001000010x00000001000000100100x000000100;
	cfgsin29[0:44] =  45 'b00001000010x00000010000000001100x010000100000;
	cfgsin28[0:44] =  45 'b00001001x00000100000100000100x000000010000100;
	cfgsin27[0:44] =  45 'b00001x00000010000000001100x000000100000010001;
	cfgsin26[0:44] =  45 'b00x00000000010100000001x00000010000001000001x;
	cfgsin25[0:44] =  45 'b00100100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000000100001000010x0000;
end
endtask
task get_wl_pat205; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1001000100000100x00x;
	cfgsin1[0:44] =  45 'bx1000100010000001x00xx0000010010000001x01xx00;
	cfgsin2[0:44] =  45 'b00001010000001x00xx0000100001000010x10xx10001;
	cfgsin3[0:44] =  45 'b00001000010x00xx1000100000010001x00xx10001001;
	cfgsin4[0:44] =  45 'b000000010x0xx1001000100000010x00xx10010000001;
	cfgsin5[0:44] =  45 'b00001x00xx1010000010000001x01xx00100000010000;
	cfgsin6[0:44] =  45 'b01x00xx0001000001000100x00xx1100000000010001x;
	cfgsin7[0:44] =  45 'b00xx1010000001000100x00xx0100000000001010x00x;
// TR
	cfgsin15[0:44] =  45 'bx0010000001000001x00xx0010000001000001x00xx01;
	cfgsin14[0:44] =  45 'b00000000100100x00xx1100000000010010x00xx10100;
	cfgsin13[0:44] =  45 'b00100000100x01xx1010000001000010x00xx10010000;
	cfgsin12[0:44] =  45 'b01000100x00xx10100001000000010x0xx10100000000;
	cfgsin11[0:44] =  45 'b01001x01xx0010000100000010x00xx01000001000001;
	cfgsin10[0:44] =  45 'b00x00xx0100000010000100x01xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100000000100000100000100x000;
	cfgsin17[0:44] =  45 'b00010000100000100x00000100000100000100x000010;
	cfgsin18[0:44] =  45 'b10000000001001x00000010000000001100x000000100;
	cfgsin19[0:44] =  45 'b00000001100x00100010000000001001x000000100001;
	cfgsin20[0:44] =  45 'b00000100001001000001001000010x001100010000001;
	cfgsin21[0:44] =  45 'b00100x01000001000000001100x000000100000010000;
	cfgsin22[0:44] =  45 'b10x10000000010000001100x00000000100000001001x;
	cfgsin23[0:44] =  45 'b00000000001000001010x00000000010000001001x000;
// BR
	cfgsin31[0:44] =  45 'b00100000000001100x00000100000000001001x000010;
	cfgsin30[0:44] =  45 'b01000001000010x00010001000010000001x100000000;
	cfgsin29[0:44] =  45 'b10001000001x00000000010000001100x000000100000;
	cfgsin28[0:44] =  45 'b10000100x000000100001000001000001010010000000;
	cfgsin27[0:44] =  45 'b01001x01001010000000001100x000100100000000010;
	cfgsin26[0:44] =  45 'b10x00000100000100000010x00000100000000001001x;
	cfgsin25[0:44] =  45 'b00000100000100000001x00100100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000010100000100000100000x;
end
endtask
task get_wl_pat204; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000100xx1xx1001000100000010x01x;
	cfgsin1[0:44] =  45 'bx1000100100000001x01xx0010000001000010x01xx11;
	cfgsin2[0:44] =  45 'b00000001000100x01xx0010000001000100x01xx10001;
	cfgsin3[0:44] =  45 'b00010000100x01xx0001000100000010x11xx10001001;
	cfgsin4[0:44] =  45 'b00000001x10xx1001000000010100x01xx10010000100;
	cfgsin5[0:44] =  45 'b00001x00xx1010000010000001x01xx10100000010000;
	cfgsin6[0:44] =  45 'b10x01xx0100000100000001x01xx0010000100000001x;
	cfgsin7[0:44] =  45 'b10xx1010000000100010x00xx0010000010000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx0010000010000001x01xx1100000001000100x01xx10;
	cfgsin14[0:44] =  45 'b10000100000010x01xx1010000000010100x01xx10100;
	cfgsin13[0:44] =  45 'b00100000100x01xx1100000001000001x01xx10010000;
	cfgsin12[0:44] =  45 'b00001010x01xx1010000100000001x11xx10010000001;
	cfgsin11[0:44] =  45 'b00010x00xx1010000001000001x00xx10100001000000;
	cfgsin10[0:44] =  45 'b10x01xx1010000010000010x10xx1010000100000100x;
	cfgsin9[0:44] =  45 'b00xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x1xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx1100000100000100x01xx00;
	cfgsin18[0:44] =  45 'b10000000010001x01xx0100000001000010x01xx01000;
	cfgsin19[0:44] =  45 'b00000010010x00xx1010000000010010x01xx10100001;
	cfgsin20[0:44] =  45 'b000000010x0xx0010000100000100x00xx00000011000;
	cfgsin21[0:44] =  45 'b00010x00xx1001000001000100x01xx11000000010000;
	cfgsin22[0:44] =  45 'b01x01xx1000010100000001x01xx1001000100000001x;
	cfgsin23[0:44] =  45 'b01xx1010000000100001x01xx1010000001000001x01x;
// BR
	cfgsin31[0:44] =  45 'bx1000100100000001x01xx1000001010000010x01xx00;
	cfgsin30[0:44] =  45 'b10000001000100x00xx0000001010000100x00xx10100;
	cfgsin29[0:44] =  45 'b00010000100x01xx1010000001000001x00xx11000000;
	cfgsin28[0:44] =  45 'b01000010x01xx10100001000000010x0xx01000000010;
	cfgsin27[0:44] =  45 'b00100x00xx0010000001000010x01xx01000000000010;
	cfgsin26[0:44] =  45 'b10x01xx1010000001000001x01xx1001000010000001x;
	cfgsin25[0:44] =  45 'b00xx1001000010000010x00xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx00001001000000010x1x0;
end
endtask
task get_wl_pat203; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx0000100000100000001xx00;
	cfgsin1[0:44] =  45 'b00010000010000010xx0010001000010000100xx00000;
	cfgsin2[0:44] =  45 'b00001000001001xx0000001000000100001xx00000001;
	cfgsin3[0:44] =  45 'b00001000010xx0000010000000001010xx00001000001;
	cfgsin4[0:44] =  45 'b00000001x11000100000100000001xx00000100000100;
	cfgsin5[0:44] =  45 'b00001xx0100010000010000001xx00000010000010001;
	cfgsin6[0:44] =  45 'b00xx0001100000100000001xx0000100000100000001x;
	cfgsin7[0:44] =  45 'bx0000000010000100001xx1001000100000100001xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000010000001xx0000001000000100100xx00000;
	cfgsin14[0:44] =  45 'b01000000100001xx0000001000000010001xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000000001001000001xx00000001000;
	cfgsin12[0:44] =  45 'b10000001xx0000100000100000001x100000000010000;
	cfgsin11[0:44] =  45 'b10010xx0000000100100000001xx10000000011000000;
	cfgsin10[0:44] =  45 'b01xx0000100000010000001xx1000100000100000100x;
	cfgsin9[0:44] =  45 'bx1000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100xx1xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx1100000100000100x01xx00;
	cfgsin18[0:44] =  45 'b10000100000001x01xx0000100001000001x00xx10000;
	cfgsin19[0:44] =  45 'b01001000001x10xx1010000000100100x00xx00100001;
	cfgsin20[0:44] =  45 'b00000001x11xx0010000000001001x01xx00010000000;
	cfgsin21[0:44] =  45 'b10001x11xx1001000001000100x01xx00010000010001;
	cfgsin22[0:44] =  45 'b00x01xx0000010000100010x01xx0010000000100001x;
	cfgsin23[0:44] =  45 'b01xx0010000100000001x01xx1010000010000001x01x;
// BR
	cfgsin31[0:44] =  45 'bx1001000100000010x01xx0010000000010100x01xx00;
	cfgsin30[0:44] =  45 'b10000000100001x01xx1100000001000010x01xx00100;
	cfgsin29[0:44] =  45 'b00001000010x01xx0100000100000010x01xx10100000;
	cfgsin28[0:44] =  45 'b01000001x01xx1010000100000001x11xx00001000000;
	cfgsin27[0:44] =  45 'b10010x01xx0010000001000001x01xx00100000010000;
	cfgsin26[0:44] =  45 'b01x01xx1010000000010001x01xx1000001000001001x;
	cfgsin25[0:44] =  45 'b01xx1000010010000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000100xx1xx;
end
endtask
task get_wl_pat202; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000000100010000001xx00;
	cfgsin1[0:44] =  45 'b00010000100000001xx0000000001100000010xx00000;
	cfgsin2[0:44] =  45 'b00100100000001xx0000000001100000100xx00001000;
	cfgsin3[0:44] =  45 'b00001000001xx0000001000010000001xx00001000001;
	cfgsin4[0:44] =  45 'b00000001x10000001000100000001xx00000100001000;
	cfgsin5[0:44] =  45 'b00001xx0000010000100000001xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000000010001000001xx0010100000001000100x;
	cfgsin7[0:44] =  45 'bx0100010000100000001xx0000100000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000100000001xx0000100000001000010xx00000;
	cfgsin14[0:44] =  45 'b00001010000001xx0000100000010000001xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000000001001xx00000000101;
	cfgsin12[0:44] =  45 'b00000001xx0000100000100000001x100000100001000;
	cfgsin11[0:44] =  45 'b00010xx1000100000100000010xx00000100000010000;
	cfgsin10[0:44] =  45 'b01xx0000000100001000001xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00011;
	cfgsin18[0:44] =  45 'b00000000001001xx0000001000010000100xx00000010;
	cfgsin19[0:44] =  45 'b00001000100xx0100000100010000001xx10011000001;
	cfgsin20[0:44] =  45 'b00000001x10000000001010000100xx00001000000100;
	cfgsin21[0:44] =  45 'b00100xx0000001000001000100xx00010010000001000;
	cfgsin22[0:44] =  45 'b01xx0000000001100000001xx0000001000001000001x;
	cfgsin23[0:44] =  45 'bx0010000010000010010xx0000010000100000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00000010100000001xx0001000010010000001xx00001;
	cfgsin30[0:44] =  45 'b00000000001010xx0000000001000001100xx00010001;
	cfgsin29[0:44] =  45 'b00010000010xx0000001000001000100xx00000010000;
	cfgsin28[0:44] =  45 'b01000100xx0000100000100000001x100010001000000;
	cfgsin27[0:44] =  45 'b01001xx0000001000001000100xx00000010000010001;
	cfgsin26[0:44] =  45 'b00xx0000000010000100001xx0000010000000010010x;
	cfgsin25[0:44] =  45 'bx0000000010010000001xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000010xx000;
end
endtask
task get_wl_pat201; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx001x001xx00;
	cfgsin1[0:44] =  45 'b00001000xx010x100xx0000000001xx001x001xx00000;
	cfgsin2[0:44] =  45 'b10000xx001x010xx0010001000xx001x010xx00000000;
	cfgsin3[0:44] =  45 'b10xx010x100xx0001000100xx001x100xx0000100000x;
	cfgsin4[0:44] =  45 'bx001x001x10000100000xx100x010xx0000010000xx01;
	cfgsin5[0:44] =  45 'b0x001xx0000010000xx010x001xx0000001000xx100x0;
	cfgsin6[0:44] =  45 'b10xx0000000010xx010x100xx0000000100xx100x010x;
	cfgsin7[0:44] =  45 'bx0000000010xx100x010xx0000000010xx001x100xx00;
// TR
	cfgsin15[0:44] =  45 'b10010000xx100x001xx0000001000xx010x001xx00000;
	cfgsin14[0:44] =  45 'b00100xx001x010xx0000000010xx100x001xx00001000;
	cfgsin13[0:44] =  45 'b00xx100x100xx0000100000xx001x001xx0000010000x;
	cfgsin12[0:44] =  45 'bx100x100xx0000100000xx001x001x10000001000xx10;
	cfgsin11[0:44] =  45 'b0x100xx0000000001xx001x100xx0000100000xx001x0;
	cfgsin10[0:44] =  45 'b01xx0000010000xx001x010xx0000100000xx100x100x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000100000xx001x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000001xx0001001000001000100xx01000010;
	cfgsin19[0:44] =  45 'b00001000001xx0000010000100000010xx00001000001;
	cfgsin20[0:44] =  45 'b00000001x10010000100000010001xx00000000010010;
	cfgsin21[0:44] =  45 'b00001xx0000001000001000100xx00000000100010001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000010xx0000001000010000001x;
	cfgsin23[0:44] =  45 'bx0000000010010000100xx0000010000000100001xx00;
// BR
	cfgsin31[0:44] =  45 'b00000010010000010xx0000000100100000001xx00000;
	cfgsin30[0:44] =  45 'b00010001000001xx0000100000001000001xx00000000;
	cfgsin29[0:44] =  45 'b10010000001xx0000001000001000010xx00000010000;
	cfgsin28[0:44] =  45 'b01000001xx0000100000100000001x100001000000100;
	cfgsin27[0:44] =  45 'b00001xx0000001000001000010xx00001000000010001;
	cfgsin26[0:44] =  45 'b00xx0000000010100000001xx0000010000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000001xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000000100100000100x0000;
end
endtask
task get_wl_pat200; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx100x100x00000100000xx001x0101x00;
	cfgsin1[0:44] =  45 'b00010000xx001x0101x0000001000xx100x0011x00000;
	cfgsin2[0:44] =  45 'b01000xx100x0011x1000001000xx100x0011x00000010;
	cfgsin3[0:44] =  45 'b00xx001x0101x0000010000xx010x0011x0000100000x;
	cfgsin4[0:44] =  45 'bx001x100x10000000001xx001x1001x0000010000xx00;
	cfgsin5[0:44] =  45 'b1x0101x0000010000xx001x0101x0000001000xx100x0;
	cfgsin6[0:44] =  45 'b101x0010001000xx100x0101x0000000001xx001x1001;
	cfgsin7[0:44] =  45 'bx1000000001xx001x1001x0001000100xx010x0011x10;
// TR
	cfgsin15[0:44] =  45 'b00000001xx001x1001x0000001000xx100x0011x00000;
	cfgsin14[0:44] =  45 'b00100xx001x0101x0000000100xx001x0101x00001000;
	cfgsin13[0:44] =  45 'b00xx100x1000x0000000001xx001x1001x0000001000x;
	cfgsin12[0:44] =  45 'bx100x0011x0000100000xx001x100x10000000001xx01;
	cfgsin11[0:44] =  45 'b0x1001x0000100000xx010x0011x0000100000xx001x0;
	cfgsin10[0:44] =  45 'b101x0000010000xx001x0101x0000100000xx100x1000;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000100000xx001x100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx010x001xx0000001000xx001x100xx00000010;
	cfgsin19[0:44] =  45 'b00xx010x010xx0000001000xx010x100xx0000100000x;
	cfgsin20[0:44] =  45 'bx001x001x10000000001xx100x010xx0001000001xx10;
	cfgsin21[0:44] =  45 'b0x010xx0000001000xx010x001xx0000001000xx010x0;
	cfgsin22[0:44] =  45 'b10xx0001000010xx010x100xx0001001000xx010x010x;
	cfgsin23[0:44] =  45 'bx0000001000xx010x001xx0000010000xx010x001xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000xx010x100xx0000010000xx001x001xx00100;
	cfgsin30[0:44] =  45 'b10000xx001x100xx0000000001xx100x010xx00001000;
	cfgsin29[0:44] =  45 'b00xx001x100xx0001001000xx100x001xx0000001000x;
	cfgsin28[0:44] =  45 'bx100x010xx0000100000xx001x001x10000000010xx00;
	cfgsin27[0:44] =  45 'b1x001xx0001001000xx010x001xx0001001000xx010x0;
	cfgsin26[0:44] =  45 'b10xx0000010000xx100x100xx0000000100xx010x001x;
	cfgsin25[0:44] =  45 'bx0000010000xx100x001xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000010000xx010x010xx00x;
end
endtask
task get_wl_pat199; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000010;
	cfgsin1[0:44] =  45 'b000000000000000000000000100000000001000000000;
	cfgsin2[0:44] =  45 'b000000100001000000000000000010000000000000000;
	cfgsin3[0:44] =  45 'b100000000000000000000000000000001000011000000;
	cfgsin4[0:44] =  45 'b000000000000000000001000000000000000000100010;
	cfgsin5[0:44] =  45 'b000000000000001000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b010000000000000000010000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b001000000000000000000000001000000000000000001;
	cfgsin14[0:44] =  45 'b001000000000000000000001000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000001001000010000000000000010000;
	cfgsin12[0:44] =  45 'b010000000000000000000000000000000000000001000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000100000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin18[0:44] =  45 'b00000xx001x0101x0000001000xx100x0101x00000010;
	cfgsin19[0:44] =  45 'b00xx100x0011x0000100000xx001x0101x0000100000x;
	cfgsin20[0:44] =  45 'bx001x100x10000000001xx010x1001x0001000001xx00;
	cfgsin21[0:44] =  45 'b1x1001x0000001000xx100x0101x0000001000xx100x0;
	cfgsin22[0:44] =  45 'b011x0000001000xx100x0101x0000001000xx001x0101;
	cfgsin23[0:44] =  45 'bx0000000010xx001x0101x0000010000xx001x0101x00;
// BR
	cfgsin31[0:44] =  45 'b01100000xx001x0101x0000010000xx001x0101x00000;
	cfgsin30[0:44] =  45 'b01000xx010x0011x0010000001xx001x1001x00000100;
	cfgsin29[0:44] =  45 'b00xx010x0011x0001001000xx100x0101x0000001000x;
	cfgsin28[0:44] =  45 'bx100x0011x0000100000xx001x100x10000000010xx00;
	cfgsin27[0:44] =  45 'b1x0101x0010001000xx100x0101x0000001000xx100x0;
	cfgsin26[0:44] =  45 'b101x0000000001xx001x1001x0000010000xx001x0101;
	cfgsin25[0:44] =  45 'bx0010000001xx001x1001x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000001000xx010x100x0000;
end
endtask
task get_wl_pat198; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000010000000000000000000000000;
	cfgsin2[0:44] =  45 'b000100000000000000000000010000000010000000000;
	cfgsin3[0:44] =  45 'b000100100000001010010000000000000001000000000;
	cfgsin4[0:44] =  45 'b000000000010000000100000000100100010000000000;
	cfgsin5[0:44] =  45 'b000000000000000001000000100000000000000010000;
	cfgsin6[0:44] =  45 'b000000000010000000000000000000001000000000010;
	cfgsin7[0:44] =  45 'b000010000100000000000000000000000001000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000010010000000000000000010100;
	cfgsin14[0:44] =  45 'b000000000000000010000000000000000000010000001;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000010001010000010000000000000000000000000;
	cfgsin11[0:44] =  45 'b010000010001000000000000000010100000000000000;
	cfgsin10[0:44] =  45 'b000001000001000000000000010000000100000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b010000000000000000100000000000000000000000001;
	cfgsin19[0:44] =  45 'b000000000100000100000001000000000000000000000;
	cfgsin20[0:44] =  45 'b000000001000000000000000000101000000000000010;
	cfgsin21[0:44] =  45 'b000000000000000001000001000001000000000000000;
	cfgsin22[0:44] =  45 'b000000100000000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000100000000000000000000000000000000000010;
// BR
	cfgsin31[0:44] =  45 'b000000000000000010001000000000000000000000010;
	cfgsin30[0:44] =  45 'b000000100000001000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000001001000000000000000000000000;
	cfgsin28[0:44] =  45 'b010000000000000000000000000000000000010000000;
	cfgsin27[0:44] =  45 'b001000000000000000000000000000000100000000000;
	cfgsin26[0:44] =  45 'b000000000000001000000000000000000001000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000001000x;
end
endtask
task get_wl_pat197; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001101xx110x0110x0110001100x;
	cfgsin1[0:44] =  45 'bx110x0110x0110001100xx100x1001x1000001011xx11;
	cfgsin2[0:44] =  45 'b0x0000x0100010100xx101x1000x0001000101xx110x0;
	cfgsin3[0:44] =  45 'b010x0000001100xx001x0010x0101001000xx000x1010;
	cfgsin4[0:44] =  45 'bx0110001100xx110x0000x0110000001xx010x0010x00;
	cfgsin5[0:44] =  45 'b01001101xx101x0000x0101000101xx101x0101x00100;
	cfgsin6[0:44] =  45 'b00101xx010x0010x0100001101xx110x0010x01100001;
	cfgsin7[0:44] =  45 'b00xx001x0010x0101001101xx010x1001x0010010100x;
// TR
	cfgsin15[0:44] =  45 'bx100x0110x0110001100xx001x0001x0101010100xx00;
	cfgsin14[0:44] =  45 'b0x0010x0110001100xx110x0010x0110001100xx110x0;
	cfgsin13[0:44] =  45 'b010x1010001011xx100x0010x0010001101xx100x0110;
	cfgsin12[0:44] =  45 'bx0010000100xx001x0100x1001001011xx110x0100x01;
	cfgsin11[0:44] =  45 'b00001100xx100x0110x0101010100xx010x0110x01100;
	cfgsin10[0:44] =  45 'b10100xx010x0010x0110001100xx110x0010x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000010;
	cfgsin18[0:44] =  45 'b000000000000000000000000000100000010000010000;
	cfgsin19[0:44] =  45 'b000000000000000000001000000000010000000000000;
	cfgsin20[0:44] =  45 'b010000010000010010000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000100000000000000000000010000000000000;
	cfgsin22[0:44] =  45 'b000000001000000000000000000100000000000000000;
	cfgsin23[0:44] =  45 'b010010000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000010000100001000000000100000001000;
	cfgsin30[0:44] =  45 'b000000000010000001000010000000000000010001000;
	cfgsin29[0:44] =  45 'b000000100000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000010001000000000000001000000000000;
	cfgsin27[0:44] =  45 'b000000010000000010000000010000000010000000000;
	cfgsin26[0:44] =  45 'b000000010000000000000000001000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000001000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100001000000000000000;
end
endtask
task get_wl_pat196; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x010000110000010x0110x01100011000;
	cfgsin1[0:44] =  45 'b0010x0010x101000001000010x1010x10000100100001;
	cfgsin2[0:44] =  45 'b0x1000x000000010000010x0000x010000010000000x0;
	cfgsin3[0:44] =  45 'b110x001000110000000x0000x000000100000001x0101;
	cfgsin4[0:44] =  45 'bx000101010000000x0001x001001010000000x0110x01;
	cfgsin5[0:44] =  45 'b1000110000010x1001x010101010000010x1001x01010;
	cfgsin6[0:44] =  45 'b1010000010x0110x011000110000010x0000x10100011;
	cfgsin7[0:44] =  45 'b0000010x1000x011011000000001x0010x01010011000;
// TR
	cfgsin15[0:44] =  45 'b0001x0100x011000110000101x0101x01000011000000;
	cfgsin14[0:44] =  45 'b0x0001x010101001000010x1010x011001010000000x1;
	cfgsin13[0:44] =  45 'b000x011001010000000x1000x011001010000000x1001;
	cfgsin12[0:44] =  45 'bx010001010000000x1001x010001010000010x0001x01;
	cfgsin11[0:44] =  45 'b0001010000010x0100x011000110000000x1000x01000;
	cfgsin10[0:44] =  45 'b1010000010x0110x011000110000010x0110x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx00;
	cfgsin18[0:44] =  45 'b0x1001x1001010011xx010x0110x0010000101xx010x0;
	cfgsin19[0:44] =  45 'b010x0101000101xx010x0000x0110000101xx110x0110;
	cfgsin20[0:44] =  45 'bx0010000001xx001x0001x1001000001xx001x0110x00;
	cfgsin21[0:44] =  45 'b01001101xx001x0100x1000001010xx001x1010x01010;
	cfgsin22[0:44] =  45 'b01101xx000x1001x0101001101xx010x1010x01100011;
	cfgsin23[0:44] =  45 'b00xx000x0110x0101001101xx101x0110x0101001100x;
// BR
	cfgsin31[0:44] =  45 'bx010x0110x0100000000xx100x0110x0100001100xx01;
	cfgsin30[0:44] =  45 'b0x1000x0100010000xx001x0010x0101001100xx100x1;
	cfgsin29[0:44] =  45 'b010x0100001101xx000x0010x0110001101xx110x0110;
	cfgsin28[0:44] =  45 'bx0010001101xx010x0010x0101001100xx100x1010x01;
	cfgsin27[0:44] =  45 'b00010100xx010x0100x0110000101xx100x0010x01100;
	cfgsin26[0:44] =  45 'b01101xx001x0100x0101001100xx101x0100x01010011;
	cfgsin25[0:44] =  45 'b01xx010x0110x0110001100xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x0001x1001010001xx;
end
endtask
task get_wl_pat195; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000100000000010000000000000000010000000000;
	cfgsin2[0:44] =  45 'b000000010000010000000000110000000000001001000;
	cfgsin3[0:44] =  45 'b000000000000000000110001000000000000000000000;
	cfgsin4[0:44] =  45 'b100000000000000100100001000000000000100000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000010000000000000000;
	cfgsin6[0:44] =  45 'b000010000000000000000000000000000100000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000010000000000000000000010;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000010000000000;
	cfgsin14[0:44] =  45 'b010000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000001000000;
	cfgsin12[0:44] =  45 'b000100000000001000000000010000000000010000000;
	cfgsin11[0:44] =  45 'b010000000000000000000000000000000000001000010;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011001010000010x0110x01100010000001;
	cfgsin18[0:44] =  45 'b0x0110x011000010000001x0100x010000010000010x0;
	cfgsin19[0:44] =  45 'b000x001000110000001x0010x011000110000010x0110;
	cfgsin20[0:44] =  45 'bx011001010000010x0100x000000101000010x0100x00;
	cfgsin21[0:44] =  45 'b0001000000000x0110x101000110000001x0000x00100;
	cfgsin22[0:44] =  45 'b0010000100x0000x010101000010001x0110x00100011;
	cfgsin23[0:44] =  45 'b0010010x0010x101000110000010x1000x01100101010;
// BR
	cfgsin31[0:44] =  45 'b0010x0110x011011000000000x0000x00000000000000;
	cfgsin30[0:44] =  45 'b0x0001x001000000000000x0000x001001000000000x0;
	cfgsin29[0:44] =  45 'b110x100000001000000x0100x101001001001000x0010;
	cfgsin28[0:44] =  45 'bx010101010000000x0100x011000100000010x0010x01;
	cfgsin27[0:44] =  45 'b1000100000000x0100x011000100000001x0000x00100;
	cfgsin26[0:44] =  45 'b1010000000x1001x000000110000000x0000x00100011;
	cfgsin25[0:44] =  45 'b0000010x0010x010000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1000x00000100100x;
end
endtask
task get_wl_pat194; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000100000010000000000000000000000;
	cfgsin1[0:44] =  45 'b010000000000000000000010000000000000000000000;
	cfgsin2[0:44] =  45 'b000010000010000010000000000000100100000000000;
	cfgsin3[0:44] =  45 'b000010000000000000000000001001001000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000001000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000010000000001000000000;
	cfgsin7[0:44] =  45 'b010000000001000000000000000001000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000001000000000010000000000000000000010010;
	cfgsin14[0:44] =  45 'b010000000000000000000000000000000000000001000;
	cfgsin13[0:44] =  45 'b000100000000000000100000100000000000000000000;
	cfgsin12[0:44] =  45 'b000000000010000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000010000000001000000000000001000000000000;
	cfgsin10[0:44] =  45 'b000010000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000100000000000;
	cfgsin19[0:44] =  45 'b000001000000000000000100000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000100100000000000000000001;
	cfgsin21[0:44] =  45 'b000000000000100000000000000000000000100000000;
	cfgsin22[0:44] =  45 'b010000000100001000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000010000001001010010000000000;
	cfgsin30[0:44] =  45 'b100000000000000000000100101001000000000001000;
	cfgsin29[0:44] =  45 'b000000000010000001000000000000000000000100000;
	cfgsin28[0:44] =  45 'b000000000010000100001000000001000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000001000000001000010000;
	cfgsin26[0:44] =  45 'b000000000000000010000000000000000100001000000;
	cfgsin25[0:44] =  45 'b000000001000000000000010000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000010000100000000x;
end
endtask
task get_wl_pat193; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx1x;
	cfgsin1[0:44] =  45 'bx0010000001000100xx1xx0000100001000100xx1xx10;
	cfgsin2[0:44] =  45 'b00010000001100xx0xx1100000100000010xx0xx11000;
	cfgsin3[0:44] =  45 'b00000010100xx1xx1000010100000100xx1xx11000000;
	cfgsin4[0:44] =  45 'b01000100xx1xx1000100001000010xx0xx10100000010;
	cfgsin5[0:44] =  45 'b00010xx1xx1010000001000100xx0xx10100000010000;
	cfgsin6[0:44] =  45 'b10xx0xx1010000001000100xx0xx1010000001000100x;
	cfgsin7[0:44] =  45 'bx0xx1001000010000010xx0xx1100000001000100xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1010000001000100xx0xx0001000100000100xx0xx01;
	cfgsin14[0:44] =  45 'b00000001000100xx1xx1010000000100100xx1xx11000;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1010000100000001xx1xx11000000;
	cfgsin12[0:44] =  45 'b01000100xx0xx1100000001000100xx1xx10010001000;
	cfgsin11[0:44] =  45 'b00100xx0xx1000100000001100xx1xx10010000010001;
	cfgsin10[0:44] =  45 'b00xx0xx1010000010000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000001000000;
	cfgsin18[0:44] =  45 'b000000000000100000000000001000001000000000000;
	cfgsin19[0:44] =  45 'b101000000000010000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000001000000000010000000001000;
	cfgsin21[0:44] =  45 'b001001010000000000000000000000000000010001000;
	cfgsin22[0:44] =  45 'b000010000001000000000001000000000000001000000;
	cfgsin23[0:44] =  45 'b000010001000000000000010000000001000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000001000000000000100100000;
	cfgsin30[0:44] =  45 'b000100001000101001000000000000000001001000000;
	cfgsin29[0:44] =  45 'b000000100000010010000001000000000000000000100;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000010000000100000;
	cfgsin27[0:44] =  45 'b000000110000100001000000000010000000001000000;
	cfgsin26[0:44] =  45 'b000000001000000000001000010000010001000000000;
	cfgsin25[0:44] =  45 'b010000000000000010000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000010000000000;
end
endtask
task get_wl_pat192; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1010000100000100xx0x;
	cfgsin1[0:44] =  45 'bx0100000001000001xx0xx0100000001000001xx0xx01;
	cfgsin2[0:44] =  45 'b00000001000010xx0xx0000010000001010xx1xx10010;
	cfgsin3[0:44] =  45 'b00001000100xx1xx1001000001000010xx1xx00010000;
	cfgsin4[0:44] =  45 'b00001010xx0xx0100000001000001xx0xx11000000010;
	cfgsin5[0:44] =  45 'b00001xx0xx0001000001000001xx1xx00010000001000;
	cfgsin6[0:44] =  45 'b01xx0xx1100000001000001xx1xx1100000001000001x;
	cfgsin7[0:44] =  45 'bx1xx0010000001000001xx0xx1010000000001010xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1000010001000001xx0xx1000100100000010xx1xx00;
	cfgsin14[0:44] =  45 'b01000001000010xx0xx0000010000001001xx1xx00100;
	cfgsin13[0:44] =  45 'b00000010100xx1xx0001000100000100xx0xx01000000;
	cfgsin12[0:44] =  45 'b01000001xx1xx0010000001000010xx1xx01000000001;
	cfgsin11[0:44] =  45 'b00010xx0xx1010000000100010xx0xx01000000001000;
	cfgsin10[0:44] =  45 'b01xx1xx1100000000001100xx1xx1001000100000010x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000001xx1xx1100000010000001xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx0xx1001000001000100xx1xx10100000;
	cfgsin20[0:44] =  45 'b01000100xx1xx1010000001000100xx0xx11000000000;
	cfgsin21[0:44] =  45 'b10010xx0xx1100000000001100xx1xx10001000010001;
	cfgsin22[0:44] =  45 'b00xx0xx0010000100000100xx0xx1100000000010100x;
	cfgsin23[0:44] =  45 'bx0xx0100000010000100xx0xx1010000100000100xx0x;
// BR
	cfgsin31[0:44] =  45 'bx1000100001000100xx0xx1010000001000100xx1xx10;
	cfgsin30[0:44] =  45 'b10000001000100xx0xx1000010001000100xx0xx10000;
	cfgsin29[0:44] =  45 'b01001000100xx0xx0000100100000100xx1xx00100000;
	cfgsin28[0:44] =  45 'b01000100xx0xx1100000010000100xx0xx10000100000;
	cfgsin27[0:44] =  45 'b01010xx0xx1000100010000100xx0xx10100000100001;
	cfgsin26[0:44] =  45 'b00xx1xx1000010001000100xx0xx1010000001000100x;
	cfgsin25[0:44] =  45 'bx0xx1000100001000100xx0xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat191; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000100x01000010000100000100xx00;
	cfgsin1[0:44] =  45 'b10010000001000001xx0001000100001000001xx00010;
	cfgsin2[0:44] =  45 'b10000001000001xx0010100000001000001xx00000100;
	cfgsin3[0:44] =  45 'b00001000001xx0000100000000010100xx00010100000;
	cfgsin4[0:44] =  45 'b00001001xx1001000010000001100xx01000100000010;
	cfgsin5[0:44] =  45 'b00100xx0001100000001000010xx00011000000010001;
	cfgsin6[0:44] =  45 'b00xx1000010000001000010xx0000010000001000010x;
	cfgsin7[0:44] =  45 'bx0001100000001000100xx1000010000010000001xx01;
// TR
	cfgsin15[0:44] =  45 'b00100000001000010xx1000100000100000010xx00010;
	cfgsin14[0:44] =  45 'b10000000010001xx1001100000000010010xx00011000;
	cfgsin13[0:44] =  45 'b00100000100xx0001100000010000010xx10010010000;
	cfgsin12[0:44] =  45 'b00001100xx0001100000010000001xx00010000101000;
	cfgsin11[0:44] =  45 'b00100xx1000100000100000001xx10000010000010000;
	cfgsin10[0:44] =  45 'b01xx0000001000010000100xx0000100000100000010x;
	cfgsin9[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx11;
	cfgsin18[0:44] =  45 'b00000100000010xx1xx1100000000100100xx0xx10010;
	cfgsin19[0:44] =  45 'b00010000010xx1xx1100000001000010xx0xx00000100;
	cfgsin20[0:44] =  45 'b01000001xx1xx1100000001000001xx0xx00010001000;
	cfgsin21[0:44] =  45 'b00100xx0xx1010000000010001xx0xx01000000010000;
	cfgsin22[0:44] =  45 'b01xx1xx0000010000001010xx0xx1010000010000010x;
	cfgsin23[0:44] =  45 'bx0xx1000100001000100xx1xx0100000100000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx0010000001000001xx0xx0001000001000001xx0xx01;
	cfgsin30[0:44] =  45 'b00000001000001xx1xx0100000001000001xx0xx00000;
	cfgsin29[0:44] =  45 'b10001000001xx0xx0100000010000100xx1xx01000000;
	cfgsin28[0:44] =  45 'b00010001xx1xx0010000000100100xx0xx11000000010;
	cfgsin27[0:44] =  45 'b00001xx0xx1100000010000100xx0xx11000000100001;
	cfgsin26[0:44] =  45 'b00xx1xx1001000001000001xx1xx1100000001000001x;
	cfgsin25[0:44] =  45 'bx1xx1100000001000001xx0xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000010000100xx1xx;
end
endtask
task get_wl_pat190; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000100000100xx0000001000100000100xx10;
	cfgsin1[0:44] =  45 'b00100000001000100xx1000001000001000100xx01000;
	cfgsin2[0:44] =  45 'b01000100000100xx0100010000010000100xx00000000;
	cfgsin3[0:44] =  45 'b01100000010xx0000001000100000010xx00000000010;
	cfgsin4[0:44] =  45 'b01000100xx0000001000100000100xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx0000000100001000100xx00000000100010000;
	cfgsin6[0:44] =  45 'b01xx0000001000001000001xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0000000001001000100xx0000000010100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000001000001xx0000001000000100100xx00000;
	cfgsin14[0:44] =  45 'b01000001000100xx0000001000100000001xx00000000;
	cfgsin13[0:44] =  45 'b10001000001xx0000000100001000010xx00000001000;
	cfgsin12[0:44] =  45 'b00001010xx0000000001001000010xx00000001000010;
	cfgsin11[0:44] =  45 'b00001xx0000000001001000001xx00010001000010001;
	cfgsin10[0:44] =  45 'b00xx0000001000001000100xx0000001000001000010x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x00000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000100000100xx0000010000001000010xx00001000;
	cfgsin19[0:44] =  45 'b00001000100xx0000010000000010001xx10001000000;
	cfgsin20[0:44] =  45 'b01000010xx0000010000000100010xx10010100001000;
	cfgsin21[0:44] =  45 'b00001xx1000000010000100010xx10100010000010000;
	cfgsin22[0:44] =  45 'b01xx0001100000000100100xx0100001000001000100x;
	cfgsin23[0:44] =  45 'bx0100010000000100100xx0001010000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b01100000001000001xx0101010000001000001xx01010;
	cfgsin30[0:44] =  45 'b10000001000001xx0001010000000001010xx00101000;
	cfgsin29[0:44] =  45 'b00001000001xx0101001000100000100xx00000000100;
	cfgsin28[0:44] =  45 'b01000001xx0000000001010000100xx01000001000010;
	cfgsin27[0:44] =  45 'b00100xx0100001000010000100xx01000100000100001;
	cfgsin26[0:44] =  45 'b00xx0000100000000001001xx0000010000001000001x;
	cfgsin25[0:44] =  45 'bx0000010000001000001xx1000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
end
endtask
task get_wl_pat189; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000100000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000001000010xx0000100000001000010xx00000;
	cfgsin2[0:44] =  45 'b00100001000001xx0000001000001000001xx00001000;
	cfgsin3[0:44] =  45 'b00001000100xx0000100000100000001xx00000001000;
	cfgsin4[0:44] =  45 'b00001010xx0000010000001000001xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx1000001000001000001xx00000010000010000;
	cfgsin6[0:44] =  45 'b10xx0000000001001000001xx0000000001001000001x;
	cfgsin7[0:44] =  45 'bx0000000010001000001xx0000001000010000010xx00;
// TR
	cfgsin15[0:44] =  45 'b00000010001000001xx0000001000000010010xx00000;
	cfgsin14[0:44] =  45 'b00100001000001xx0000000100000010010xx00000001;
	cfgsin13[0:44] =  45 'b00100000100xx0000010000000001010xx00000010000;
	cfgsin12[0:44] =  45 'b00001001xx0000001000000001100xx00000000101000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010000010000;
	cfgsin10[0:44] =  45 'b10xx0000000001010000100xx0000001000000010010x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000010000100xx0000001000100000001xx00000100;
	cfgsin19[0:44] =  45 'b00100000001xx0000001000001000010xx00000010000;
	cfgsin20[0:44] =  45 'b01000010xx0000001000001000001xx00001000000000;
	cfgsin21[0:44] =  45 'b01010xx0000000001100000100xx00000001000010001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000001xx0000001000000010010x;
	cfgsin23[0:44] =  45 'bx0000001000100000010xx0000000100010000010xx00;
// BR
	cfgsin31[0:44] =  45 'b00000010001000010xx0000001000001000100xx00000;
	cfgsin30[0:44] =  45 'b01000001000001xx0000000010001000001xx10000000;
	cfgsin29[0:44] =  45 'b10001000001xx0000001000100000001xx00000010000;
	cfgsin28[0:44] =  45 'b01000100xx0010000010100000100xx00000000011000;
	cfgsin27[0:44] =  45 'b00001xx0000001000100000100xx00000010000000101;
	cfgsin26[0:44] =  45 'b00xx0000000010001000001xx0000000010001000001x;
	cfgsin25[0:44] =  45 'bx0000000010001000010xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000000001001000001xx000;
end
endtask
task get_wl_pat188; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000100000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00000010001000001xx0000000010001000001xx00100;
	cfgsin2[0:44] =  45 'b00100001000001xx0000100000000001010xx00000000;
	cfgsin3[0:44] =  45 'b10001000001xx0000000010000001100xx01000001000;
	cfgsin4[0:44] =  45 'b00100001xx0000000010010000010xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx0000000100001000001xx00000001000010000;
	cfgsin6[0:44] =  45 'b10xx0000001000001000001xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0000001000000010001xx0000100000000001001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000001000100xx0000000010001000010xx00001;
	cfgsin14[0:44] =  45 'b00000001000001xx0000000100010000010xx00000010;
	cfgsin13[0:44] =  45 'b00010000010xx0000001000000010010xx00000001000;
	cfgsin12[0:44] =  45 'b01000100xx0100000100001000001xx01000001000100;
	cfgsin11[0:44] =  45 'b00100xx0000001000010000010xx00000001000010000;
	cfgsin10[0:44] =  45 'b01xx0000001000100000001xx0000000001000001010x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b00010100000100xx0000001000000001100xx01000000;
	cfgsin19[0:44] =  45 'b01000001100xx0000000010001000001xx00011000000;
	cfgsin20[0:44] =  45 'b01000100xx0000000010001000001xx00000010000010;
	cfgsin21[0:44] =  45 'b00100xx0000100000000001001xx00000010000010000;
	cfgsin22[0:44] =  45 'b10xx0000100000000010010xx0000010000000100001x;
	cfgsin23[0:44] =  45 'bx0000010000010000100xx0000000010100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000001000001xx0000000100001000001xx00000;
	cfgsin30[0:44] =  45 'b00100001000001xx0000000100001000001xx00000000;
	cfgsin29[0:44] =  45 'b10001000001xx0000000100000001100xx00100000100;
	cfgsin28[0:44] =  45 'b01000010xx0000000001010000001xx00000100000010;
	cfgsin27[0:44] =  45 'b00001xx0000001000000001100xx00000010000100001;
	cfgsin26[0:44] =  45 'b00xx0000010000100000001xx0000001000001000001x;
	cfgsin25[0:44] =  45 'bx0000001000000001100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000000100001000100x000x;
end
endtask
task get_wl_pat187; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000100000100xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000001000100xx0000001000001000100xx00000;
	cfgsin2[0:44] =  45 'b01000001000100xx0000001000000010001xx00000010;
	cfgsin3[0:44] =  45 'b00000001100xx0001000010000010100xx00000100000;
	cfgsin4[0:44] =  45 'b01000010xx0000001000001000010xx10000010000010;
	cfgsin5[0:44] =  45 'b00100xx0000001000001000100xx00001000000010001;
	cfgsin6[0:44] =  45 'b00xx0000001000001000100xx0000001000001000100x;
	cfgsin7[0:44] =  45 'bx0000001000001000100xx0000000100000010100xx00;
// TR
	cfgsin15[0:44] =  45 'b00000001001000100xx0000001000000001100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000010000001000010xx00000100;
	cfgsin13[0:44] =  45 'b00000001100xx0000000100100000100xx01001000000;
	cfgsin12[0:44] =  45 'b00100010xx0000000100001000010xx00001000000000;
	cfgsin11[0:44] =  45 'b01100xx0000001000100000100xx00000000100010001;
	cfgsin10[0:44] =  45 'b00xx0000001000010000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000000010000010100xx00001000;
	cfgsin19[0:44] =  45 'b00000100010xx0000100000000100001xx00000010000;
	cfgsin20[0:44] =  45 'b01000001xx0000001000001000001xx00010000010000;
	cfgsin21[0:44] =  45 'b01100xx0000010000000001010xx00000001000010000;
	cfgsin22[0:44] =  45 'b01xx0000010000001000010xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000000010000010001xx0000000100001000100xx00;
// BR
	cfgsin31[0:44] =  45 'b01000010000001100xx0000000010000100001xx00000;
	cfgsin30[0:44] =  45 'b00100001000001xx0000000010001000001xx01000000;
	cfgsin29[0:44] =  45 'b10001000001xx0000000001000100010xx00010001000;
	cfgsin28[0:44] =  45 'b01000001xx0000001000000100010xx00000010000010;
	cfgsin27[0:44] =  45 'b00010xx0000001000000100100xx00000000101000001;
	cfgsin26[0:44] =  45 'b00xx0000001000001000001xx0000001000001000001x;
	cfgsin25[0:44] =  45 'bx0001001000001000001xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
end
endtask
task get_wl_pat186; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000100000100xx1000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00000001001000001xx0001001000001000001xx00000;
	cfgsin2[0:44] =  45 'b00100001000010xx0000000010001000100xx10000001;
	cfgsin3[0:44] =  45 'b00000001001xx1000000100100000001xx00010000100;
	cfgsin4[0:44] =  45 'b00001100xx1000000100001000001xx00000000100010;
	cfgsin5[0:44] =  45 'b00001xx0001001000001000001xx00010100000010000;
	cfgsin6[0:44] =  45 'b01xx0000001000001000001xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0000001000001000010xx0000000100000001010xx10;
// TR
	cfgsin15[0:44] =  45 'b00000100001000001xx0001000100100000010xx10010;
	cfgsin14[0:44] =  45 'b01000000001010xx0000001000000010100xx10000010;
	cfgsin13[0:44] =  45 'b00000100100xx0000000010100000010xx00100100000;
	cfgsin12[0:44] =  45 'b00001100xx0001000100001000001xx00010001001000;
	cfgsin11[0:44] =  45 'b00010xx0100000100100000010xx01000010000010000;
	cfgsin10[0:44] =  45 'b01xx0000001000010000100xx1000001000100000010x;
	cfgsin9[0:44] =  45 'bx1000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000100000000010100xx00000000;
	cfgsin19[0:44] =  45 'b10000010100xx0000000100001000010xx00000010000;
	cfgsin20[0:44] =  45 'b00001100xx0000100000001000010xx00000001000000;
	cfgsin21[0:44] =  45 'b01100xx0000100000000001010xx00000001000010001;
	cfgsin22[0:44] =  45 'b00xx0000000010010000100xx0000010000000001010x;
	cfgsin23[0:44] =  45 'bx0000000100010000100xx0000000100000100100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000001000100xx0000000100001000100xx00000;
	cfgsin30[0:44] =  45 'b01000001000100xx0000000100001000100xx00000001;
	cfgsin29[0:44] =  45 'b00001000100xx0000100000000010100xx00000000101;
	cfgsin28[0:44] =  45 'b00000100xx0000100000001000100xx00000010000010;
	cfgsin27[0:44] =  45 'b00100xx0000100000010000100xx00000001000100001;
	cfgsin26[0:44] =  45 'b00xx0000001000001000100xx0010001000001000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
end
endtask
task get_wl_pat185; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx1001000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1001000100000001xx1xx0000010100000001xx1xx00;
	cfgsin2[0:44] =  45 'b00001000100001xx1xx1100000001000010xx0xx11000;
	cfgsin3[0:44] =  45 'b00010000001xx0xx0000010000010100xx0xx00010001;
	cfgsin4[0:44] =  45 'b00000001xx0xx1010000001000100xx0xx10010001000;
	cfgsin5[0:44] =  45 'b00001xx1xx0100000000001001xx1xx00001001000000;
	cfgsin6[0:44] =  45 'b01xx1xx1001000000010001xx1xx1001000000010001x;
	cfgsin7[0:44] =  45 'bx1xx1001000010000001xx1xx1100000001000010xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1001000000100001xx1xx0100000001000010xx0xx00;
	cfgsin14[0:44] =  45 'b01000010000001xx1xx1100000001000010xx0xx10010;
	cfgsin13[0:44] =  45 'b00010000100xx1xx1000100000010001xx0xx01000000;
	cfgsin12[0:44] =  45 'b10000001xx0xx0001000000010100xx0xx00000101000;
	cfgsin11[0:44] =  45 'b00100xx0xx1000100001000010xx0xx10010001000000;
	cfgsin10[0:44] =  45 'b01xx1xx1001000100000100xx0xx1001000001000010x;
	cfgsin9[0:44] =  45 'bx0xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00010;
	cfgsin18[0:44] =  45 'b00010100000010xx0000001000000001001xx10000001;
	cfgsin19[0:44] =  45 'b00100000001xx0000000010001000100xx10000000010;
	cfgsin20[0:44] =  45 'b01000001xx1000001000001000100xx00000010000000;
	cfgsin21[0:44] =  45 'b01010xx0000001000000001100xx10010001000010000;
	cfgsin22[0:44] =  45 'b01xx0101001000100000010xx0101000100000001100x;
	cfgsin23[0:44] =  45 'bx0100000010000001010xx1000001000100000100xx10;
// BR
	cfgsin31[0:44] =  45 'b00001000001000001xx0101000001001000001xx00100;
	cfgsin30[0:44] =  45 'b01000001000001xx1001000100001000010xx00010010;
	cfgsin29[0:44] =  45 'b00001000001xx1000000010001000100xx00000010000;
	cfgsin28[0:44] =  45 'b01000001xx1000000010000001100xx01000010000010;
	cfgsin27[0:44] =  45 'b00010xx0000000100010000100xx00000000100100001;
	cfgsin26[0:44] =  45 'b00xx1001000100001000010xx0100001000001000001x;
	cfgsin25[0:44] =  45 'bx1000010000001000001xx0100001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
end
endtask
task get_wl_pat184; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000100x00xx1100000100000100x01x;
	cfgsin1[0:44] =  45 'bx0000001000001001x01xx0100000000001001x00xx01;
	cfgsin2[0:44] =  45 'b00000000010100x00xx1001000001000001x00xx10100;
	cfgsin3[0:44] =  45 'b00100000010x01xx1010000000100100x11xx10000100;
	cfgsin4[0:44] =  45 'b01000001x00xx1000010010000100x10xx10000101000;
	cfgsin5[0:44] =  45 'b00010x00xx1000010100000010x00xx10010000010000;
	cfgsin6[0:44] =  45 'b10x00xx1010000100000010x01xx1100000100000010x;
	cfgsin7[0:44] =  45 'b01xx1001000010000010x00xx1000010001000100x00x;
// TR
	cfgsin15[0:44] =  45 'bx1001000010000100x00xx1000010001000001x00xx00;
	cfgsin14[0:44] =  45 'b00010001000001x01xx0010000001000100x01xx10100;
	cfgsin13[0:44] =  45 'b00001000100x01xx1000010001000100x00xx10100000;
	cfgsin12[0:44] =  45 'b00010001x00xx1010000000001001x00xx10100000100;
	cfgsin11[0:44] =  45 'b00010x00xx1010000001000100x00xx10010000000100;
	cfgsin10[0:44] =  45 'b01x10xx1010000100000010x01xx1000010001000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100x01xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx00;
	cfgsin18[0:44] =  45 'b01000000100100xx1xx1000100010000100xx0xx10010;
	cfgsin19[0:44] =  45 'b00000010010xx1xx1010000010000001xx0xx10010000;
	cfgsin20[0:44] =  45 'b00001001xx0xx1001000000010001xx1xx00001001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1000010001000001xx0xx00010001000000;
	cfgsin22[0:44] =  45 'b01xx0xx0001000010000001xx0xx0001000000100001x;
	cfgsin23[0:44] =  45 'bx0xx1001000010000001xx0xx1001000010000100xx0x;
// BR
	cfgsin31[0:44] =  45 'bx0001000000100001xx0xx0001000010000001xx1xx00;
	cfgsin30[0:44] =  45 'b00010001000001xx0xx0001000000010001xx0xx00001;
	cfgsin29[0:44] =  45 'b00100000001xx0xx1000100100000100xx1xx00001000;
	cfgsin28[0:44] =  45 'b10000001xx0xx1000100100000100xx0xx10010000010;
	cfgsin27[0:44] =  45 'b00001xx1xx1001000100000100xx1xx10001000100001;
	cfgsin26[0:44] =  45 'b00xx0xx0001000100000001xx0xx0001000001000001x;
	cfgsin25[0:44] =  45 'bx0xx0100000000010001xx0xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat183; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx1000100000100000100x000;
	cfgsin1[0:44] =  45 'b01000100100000001x00000100000100000001x001000;
	cfgsin2[0:44] =  45 'b01000001000001x00000010000000001100x010000000;
	cfgsin3[0:44] =  45 'b10010000100x10000010000010000100x100000100000;
	cfgsin4[0:44] =  45 'b10000001x00100010000001000001x001000100001000;
	cfgsin5[0:44] =  45 'b00100x00000001000100000100x000000100001000001;
	cfgsin6[0:44] =  45 'b00x00000000010100000100x00000000010100000100x;
	cfgsin7[0:44] =  45 'b00000000010000001100x01000010000001000001x000;
// TR
	cfgsin15[0:44] =  45 'b00100000010000010x00000010000001000100x010010;
	cfgsin14[0:44] =  45 'b10000100000001x00000010000001000001x000000100;
	cfgsin13[0:44] =  45 'b00010000010x00000010000000100010x000001000000;
	cfgsin12[0:44] =  45 'b10000100x11000010000100000001x100000010000001;
	cfgsin11[0:44] =  45 'b00100x01000010000001000010x100000100001000000;
	cfgsin10[0:44] =  45 'b01x11000010000100000100x00000010000001000010x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000100x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000010x01xx1010000100000010x00xx10000;
	cfgsin19[0:44] =  45 'b10001000100x00xx1100000100000001x01xx10100001;
	cfgsin20[0:44] =  45 'b00000010x00xx1001000100000010x00xx10100000000;
	cfgsin21[0:44] =  45 'b10001x00xx1010000000001100x10xx10100000000010;
	cfgsin22[0:44] =  45 'b01x01xx1000010001000100x01xx1010000000010100x;
	cfgsin23[0:44] =  45 'b00xx1010000000001010x11xx1010000001000010x00x;
// BR
	cfgsin31[0:44] =  45 'bx1100000010000001x01xx1100000010000100x00xx00;
	cfgsin30[0:44] =  45 'b01000001000100x01xx0001000000100010x00xx00001;
	cfgsin29[0:44] =  45 'b00100000001x01xx0010000000100010x00xx00100000;
	cfgsin28[0:44] =  45 'b00100001x00xx1010000001000010x00xx11000000000;
	cfgsin27[0:44] =  45 'b01010x00xx1010000100000010x00xx10100000100000;
	cfgsin26[0:44] =  45 'b01x00xx1010000100000010x00xx1010000001000010x;
	cfgsin25[0:44] =  45 'b01xx1100000010000010x00xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000001x01x0;
end
endtask
task get_wl_pat182; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx0000100000100000100x100;
	cfgsin1[0:44] =  45 'b00010000100000001x10000010000100000001x100010;
	cfgsin2[0:44] =  45 'b10000100000010x10000100000001000010x100000100;
	cfgsin3[0:44] =  45 'b00000100001x10000000010010000100x100000100000;
	cfgsin4[0:44] =  45 'b10000001x10000010000100000010x100000100000001;
	cfgsin5[0:44] =  45 'b00001x10100010000000010001x110000100000000100;
	cfgsin6[0:44] =  45 'b01x10000010000001000001x10000010000001000001x;
	cfgsin7[0:44] =  45 'b10000010000001000001x10000001000001000010x101;
// TR
	cfgsin15[0:44] =  45 'b00010000100000001x10000001000001000010x100000;
	cfgsin14[0:44] =  45 'b10000001000001x10000000010001000010x100001000;
	cfgsin13[0:44] =  45 'b00100000001x10000100000100000001x101000010000;
	cfgsin12[0:44] =  45 'b01000010x10000010000100000001x100001000000000;
	cfgsin11[0:44] =  45 'b01001x10000100000100000001x100000100001000000;
	cfgsin10[0:44] =  45 'b01x10000100000000001001x10000100000100000001x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin18[0:44] =  45 'b00000001000001x00000000001100000001x000000100;
	cfgsin19[0:44] =  45 'b00001000001x01000100000001000001x000000000101;
	cfgsin20[0:44] =  45 'b00000100x00000000010100000100x001001000000000;
	cfgsin21[0:44] =  45 'b01010x01000010000100000001x000000100001000000;
	cfgsin22[0:44] =  45 'b01x00000010000000001010x00000001000100000100x;
	cfgsin23[0:44] =  45 'b10100001000001000001x00000001000010000001x010;
// BR
	cfgsin31[0:44] =  45 'b00000001000100001x00000000010010000010x001000;
	cfgsin30[0:44] =  45 'b10000001000010x00000000010010000100x001010100;
	cfgsin29[0:44] =  45 'b00100000001x00000000010100000001x100000010000;
	cfgsin28[0:44] =  45 'b10000001x00100010000100000001x010001000000100;
	cfgsin27[0:44] =  45 'b00100x00100000010100000001x010000000100100000;
	cfgsin26[0:44] =  45 'b10x00100001000000001100x00100010000001000100x;
	cfgsin25[0:44] =  45 'b00000001000000010100x01000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001010000100000100xx00x;
end
endtask
task get_wl_pat181; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000000010010x10001100000100000100x100001;
	cfgsin2[0:44] =  45 'b00000001000010x11000000010001000100x100001000;
	cfgsin3[0:44] =  45 'b00010000100x10000100000010000100x000000100000;
	cfgsin4[0:44] =  45 'b10000001x00000001000001000001x000000100001000;
	cfgsin5[0:44] =  45 'b00001x00000010000100000001x000001000000100000;
	cfgsin6[0:44] =  45 'b10x00100100000100000001x00000010000100000001x;
	cfgsin7[0:44] =  45 'b00000000001010000001x00000010000001000010x000;
// TR
	cfgsin15[0:44] =  45 'b00010000000001001x00100010000001000010x000000;
	cfgsin14[0:44] =  45 'b10000001000100x00010000001001000010x000000000;
	cfgsin13[0:44] =  45 'b01000001010x00000001000001000010x000001000001;
	cfgsin12[0:44] =  45 'b00000001x00000000010100000100x001000000100000;
	cfgsin11[0:44] =  45 'b01010x00000001000001000010x001000100001000000;
	cfgsin10[0:44] =  45 'b01x00000010000000001010x00000010000010000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100000;
	cfgsin18[0:44] =  45 'b10000000010100x10000100000000100100x101001000;
	cfgsin19[0:44] =  45 'b00001000010x10000010000001000001x100000100000;
	cfgsin20[0:44] =  45 'b00100001x10100010000001000001x100000010000100;
	cfgsin21[0:44] =  45 'b00100x10000010000001000010x100000100001000000;
	cfgsin22[0:44] =  45 'b01x10000001000100000001x10000000010100000100x;
	cfgsin23[0:44] =  45 'b10000100000000100100x10000000001000001100x100;
// BR
	cfgsin31[0:44] =  45 'b00010000000100001x10000010000100000001x100010;
	cfgsin30[0:44] =  45 'b10000100000001x10000010000001000001x100000100;
	cfgsin29[0:44] =  45 'b00100000001x10000100000000001100x100100100000;
	cfgsin28[0:44] =  45 'b10000001x10000001000000001100x100000100001000;
	cfgsin27[0:44] =  45 'b00001x10000010000000100100x100000100001000001;
	cfgsin26[0:44] =  45 'b00x10000010000001000001x10000010000010000001x;
	cfgsin25[0:44] =  45 'b10000010000100000001x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat180; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000000100001x00000001000010000001x000000;
	cfgsin2[0:44] =  45 'b01000000100001x01000100000000010010x000001000;
	cfgsin3[0:44] =  45 'b00001000001x00000100000100000100x010000100000;
	cfgsin4[0:44] =  45 'b00001100x00010000010000010001x000000100001000;
	cfgsin5[0:44] =  45 'b00001x00000010000100000001x010000010000001000;
	cfgsin6[0:44] =  45 'b01x00001100000100000001x00000010000100000001x;
	cfgsin7[0:44] =  45 'b00000010000100000001x00100010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000000010010x10000010000100000001x110100;
	cfgsin14[0:44] =  45 'b01000000001100x10000010000000001100x000001000;
	cfgsin13[0:44] =  45 'b00000001100x00000100000001000001x100001000000;
	cfgsin12[0:44] =  45 'b00100010x10000100000000001100x110000100000010;
	cfgsin11[0:44] =  45 'b00100x11000010000001000010x000000100000000100;
	cfgsin10[0:44] =  45 'b01x00000010000000010100x00000010000001000001x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000001;
	cfgsin18[0:44] =  45 'b00000100000100x00000100000100000001x000000000;
	cfgsin19[0:44] =  45 'b01001000010x00000010000001000100x100000100000;
	cfgsin20[0:44] =  45 'b01000010x10000010000100000001x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000000001100x010000100001000000;
	cfgsin22[0:44] =  45 'b01x00000000010001000001x10000001000100000001x;
	cfgsin23[0:44] =  45 'b00000010000010000100x00000100000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00010000000010010x00000010000000010010x000000;
	cfgsin30[0:44] =  45 'b10000001000100x10010010000000100001x000000100;
	cfgsin29[0:44] =  45 'b00000001001x00001000001000100001x110000100000;
	cfgsin28[0:44] =  45 'b01000001x00000100000001000010x000000100000010;
	cfgsin27[0:44] =  45 'b00001x00000010000100000100x000000100000001001;
	cfgsin26[0:44] =  45 'b00x00000010000000010010x10000010000000001001x;
	cfgsin25[0:44] =  45 'b00000100000000001001x10000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000000100100000100xx00x;
end
endtask
task get_wl_pat179; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000001000001x01000000001000010001x010100;
	cfgsin2[0:44] =  45 'b00010010000001x00010000001000100010x010001000;
	cfgsin3[0:44] =  45 'b00000010001x00000000001010000100x000000100000;
	cfgsin4[0:44] =  45 'b00100001x00000010000000100001x000000100001000;
	cfgsin5[0:44] =  45 'b00001x00000010000001000001x000011000000000010;
	cfgsin6[0:44] =  45 'b01x00000100000100000001x00000010000100000001x;
	cfgsin7[0:44] =  45 'b00000000001000001100x00000001000001000010x000;
// TR
	cfgsin15[0:44] =  45 'b00010000010000001x00000010000001000010x000000;
	cfgsin14[0:44] =  45 'b10000000001001x00000010000000001100x000001000;
	cfgsin13[0:44] =  45 'b00010000100x00000100000001000001x100001000000;
	cfgsin12[0:44] =  45 'b00001001x00000100000100000001x000100100000000;
	cfgsin11[0:44] =  45 'b10010x00010000010001000100x100000000101000000;
	cfgsin10[0:44] =  45 'b01x00000010000100000010x00000010000001000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00100001000100000001x000000100;
	cfgsin19[0:44] =  45 'b00001000001x01000000010010000001x000000000010;
	cfgsin20[0:44] =  45 'b10000001x01000010000100000001x000001000000001;
	cfgsin21[0:44] =  45 'b00001x00001010000000100001x000000100001000000;
	cfgsin22[0:44] =  45 'b01x00000001000000010010x00110010000000001100x;
	cfgsin23[0:44] =  45 'b00000010000100000100x00100010000000010010x100;
// BR
	cfgsin31[0:44] =  45 'b00001000001000100x00000010000000001001x000000;
	cfgsin30[0:44] =  45 'b00010010000001x00001001000100000100x100000100;
	cfgsin29[0:44] =  45 'b00000100010x10000010000001000100x100000100001;
	cfgsin28[0:44] =  45 'b00000100x00000100000000100100x010000010000000;
	cfgsin27[0:44] =  45 'b10100x00000010000001000001x000000100000010000;
	cfgsin26[0:44] =  45 'b10x10000000010010000010x00000000001100000010x;
	cfgsin25[0:44] =  45 'b00000000001000100001x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat178; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100001000001000100000100x000;
	cfgsin1[0:44] =  45 'b00000010000001001x00001000001000001001x000000;
	cfgsin2[0:44] =  45 'b01000000001001x00000100000100000001x000001000;
	cfgsin3[0:44] =  45 'b00010000001x00000001000001000100x000010010000;
	cfgsin4[0:44] =  45 'b01000100x00000001000000001100x001001000000000;
	cfgsin5[0:44] =  45 'b01001x00001100000100000001x000001000001000000;
	cfgsin6[0:44] =  45 'b01x01000100000000001001x00000100000000001001x;
	cfgsin7[0:44] =  45 'b00000100000010000100x00000001000001000001x010;
// TR
	cfgsin15[0:44] =  45 'b00010000010000001x01001100000001000100x100000;
	cfgsin14[0:44] =  45 'b10000001000001x01010001000001000010x000000100;
	cfgsin13[0:44] =  45 'b00001000010x10100010000001000010x000101000000;
	cfgsin12[0:44] =  45 'b10000001x01000010000100000001x000001000000000;
	cfgsin11[0:44] =  45 'b01100x00000001000001000010x010000100000000010;
	cfgsin10[0:44] =  45 'b01x00000100000000001100x00000010000001000010x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000000010000001001x000000100;
	cfgsin19[0:44] =  45 'b00001000001x00000001000000010001x000001000000;
	cfgsin20[0:44] =  45 'b00010100x00000100000100000001x000000000010010;
	cfgsin21[0:44] =  45 'b00001x00000000010000010010x100000100000000100;
	cfgsin22[0:44] =  45 'b01x00000000001001000100x00000010000001000100x;
	cfgsin23[0:44] =  45 'b00000000100000010100x00000010000010000100x000;
// BR
	cfgsin31[0:44] =  45 'b00000100100000001x00000001000001000001x000000;
	cfgsin30[0:44] =  45 'b00100001000001x01000010000000100001x000000100;
	cfgsin29[0:44] =  45 'b00100000001x00000010000000001010x000000100001;
	cfgsin28[0:44] =  45 'b00000010x00000100000000010100x000000000100010;
	cfgsin27[0:44] =  45 'b00001x00000010000100000001x000000100000100001;
	cfgsin26[0:44] =  45 'b00x00000010000100000100x00010000010001000010x;
	cfgsin25[0:44] =  45 'b00100001000001000010x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000000010100x0000;
end
endtask
task get_wl_pat177; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1001000100000100x01x;
	cfgsin1[0:44] =  45 'bx1001000010000100x00xx0001000001000010x00xx00;
	cfgsin2[0:44] =  45 'b10000100000100x00xx0010000000001100x00xx10010;
	cfgsin3[0:44] =  45 'b00001000100x01xx1000010001000001x00xx00000010;
	cfgsin4[0:44] =  45 'b10000010x01xx0010000000001010x00xx10010000010;
	cfgsin5[0:44] =  45 'b00001x01xx0010000010000001x00xx00100000010000;
	cfgsin6[0:44] =  45 'b10x00xx0001000010000001x01xx1010000010000001x;
	cfgsin7[0:44] =  45 'b01xx1000001000010010x10xx1000001000001010x10x;
// TR
	cfgsin15[0:44] =  45 'bx1100000100000010x00xx0001000010000010x00xx00;
	cfgsin14[0:44] =  45 'b00001100000100x00xx0010000010000001x01xx11000;
	cfgsin13[0:44] =  45 'b00001000001x00xx1100000000001001x01xx00001000;
	cfgsin12[0:44] =  45 'b01000010x00xx1010000100000010x00xx00010000010;
	cfgsin11[0:44] =  45 'b00010x00xx0100000001000100x00xx10100001000001;
	cfgsin10[0:44] =  45 'b00x01xx1010000001000001x01xx1100000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100000000100000100000100x000;
	cfgsin17[0:44] =  45 'b00010000100000100x00000100000100000100x000000;
	cfgsin18[0:44] =  45 'b00001000001100x00000001000001000100x010000000;
	cfgsin19[0:44] =  45 'b01001000010x00000010000000001100x110000000011;
	cfgsin20[0:44] =  45 'b00000001x00000010000000001001x000010010001000;
	cfgsin21[0:44] =  45 'b00001x00000001000001000001x001010100000000010;
	cfgsin22[0:44] =  45 'b01x00100000001001000010x00000001000100000100x;
	cfgsin23[0:44] =  45 'b01000010000010000010x00000001000000001100x100;
// BR
	cfgsin31[0:44] =  45 'b00100000000100001x11001000001010000010x001010;
	cfgsin30[0:44] =  45 'b10000000001001x00000100000000001001x001010100;
	cfgsin29[0:44] =  45 'b00100000001x00110000001000001100x010000100000;
	cfgsin28[0:44] =  45 'b00001001x00000010000001000100x000001000000000;
	cfgsin27[0:44] =  45 'b01001x00100010000000001100x000000100000000011;
	cfgsin26[0:44] =  45 'b00x00001100000000100001x00000100000000001001x;
	cfgsin25[0:44] =  45 'b00000100000000001001x01000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000010100001000000010000x;
end
endtask
task get_wl_pat176; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000100xx0xx1001000100000100x01x;
	cfgsin1[0:44] =  45 'bx0001000100000010x11xx0001000000100100x10xx01;
	cfgsin2[0:44] =  45 'b00000000100010x10xx0001000000010010x01xx00100;
	cfgsin3[0:44] =  45 'b00000001010x01xx1001000010000010x01xx00001000;
	cfgsin4[0:44] =  45 'b00100001x00xx0100000001000001x00xx00010000100;
	cfgsin5[0:44] =  45 'b00001x01xx0010000001000001x11xx10100000100001;
	cfgsin6[0:44] =  45 'b00x11xx0001000010000001x00xx1010000010000001x;
	cfgsin7[0:44] =  45 'b00xx0010000010000001x00xx0100000000010100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1010000000001100x01xx1010000000100001x01xx00;
	cfgsin14[0:44] =  45 'b10000000001010x11xx0100000010000100x01xx00100;
	cfgsin13[0:44] =  45 'b00000001100x01xx0010000100000100x01xx10000100;
	cfgsin12[0:44] =  45 'b01000100x01xx0010000000010100x01xx00100000010;
	cfgsin11[0:44] =  45 'b00001x11xx0010000000010001x01xx00100000010000;
	cfgsin10[0:44] =  45 'b10x01xx0001000001000010x01xx1010000100000001x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x1xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000100x00xx1010000100000001x00xx10100;
	cfgsin19[0:44] =  45 'b00000010100x00xx1001000100000001x00xx10010000;
	cfgsin20[0:44] =  45 'b01000010x00xx1010000100000001x01xx00010000100;
	cfgsin21[0:44] =  45 'b00010x01xx0000100001000010x00xx00100001000000;
	cfgsin22[0:44] =  45 'b01x00xx1100000010000100x00xx0010000001000001x;
	cfgsin23[0:44] =  45 'b00xx1001000001000001x00xx1000001001000010x01x;
// BR
	cfgsin31[0:44] =  45 'bx1001000100000010x00xx0100000001000100x00xx01;
	cfgsin30[0:44] =  45 'b00000100000100x00xx0001000010000100x00xx00100;
	cfgsin29[0:44] =  45 'b00100000010x00xx0010000001000001x00xx10000011;
	cfgsin28[0:44] =  45 'b00000100x01xx1010000001000010x00xx10000010000;
	cfgsin27[0:44] =  45 'b01100x00xx1010000001000010x01xx11000000010000;
	cfgsin26[0:44] =  45 'b01x01xx0010000010000010x01xx0001000001000100x;
	cfgsin25[0:44] =  45 'b00xx1001000001000100x00xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx00100001000001000x1x0;
end
endtask
task get_wl_pat175; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx1000100000100000100xx00;
	cfgsin1[0:44] =  45 'b10010000010000001xx0000010000001000001xx10001;
	cfgsin2[0:44] =  45 'b00000100000001xx0101010000000100100xx00000000;
	cfgsin3[0:44] =  45 'b10010000100xx0000001000001000100xx00010000101;
	cfgsin4[0:44] =  45 'b00000001xx1000010000000010001xx01100100000100;
	cfgsin5[0:44] =  45 'b00001xx0001010000010000001xx00000100000100000;
	cfgsin6[0:44] =  45 'b01xx0000010000010000001xx0000010000010000001x;
	cfgsin7[0:44] =  45 'bx0001001000000100010xx1000000100000001001xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000001xx0000010000010000010xx00010;
	cfgsin14[0:44] =  45 'b00010100000100xx0000000010000100100xx00000010;
	cfgsin13[0:44] =  45 'b00001000001xx0010100000100000010xx00000100000;
	cfgsin12[0:44] =  45 'b00100010xx0000000010000001001xx00000001000010;
	cfgsin11[0:44] =  45 'b00100xx0000000010001000010xx00011000001000000;
	cfgsin10[0:44] =  45 'b01xx0000001000001000100xx0000000001100000010x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100xx1xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000001000100x01xx1100000001000100x00xx11000;
	cfgsin19[0:44] =  45 'b00100000001x00xx1010000100000010x10xx10100000;
	cfgsin20[0:44] =  45 'b00001100x11xx1010000100000001x01xx00010000010;
	cfgsin21[0:44] =  45 'b00100x11xx0100000000001100x01xx00100000000010;
	cfgsin22[0:44] =  45 'b01x01xx0010000000100001x01xx0000001001000010x;
	cfgsin23[0:44] =  45 'b01xx1100000001000100x01xx0010000001000001x01x;
// BR
	cfgsin31[0:44] =  45 'bx0100000000001100x00xx0010000000010001x00xx10;
	cfgsin30[0:44] =  45 'b10000100000010x00xx1010000010000010x00xx00100;
	cfgsin29[0:44] =  45 'b00100000100x01xx1100000000010010x01xx00000100;
	cfgsin28[0:44] =  45 'b00100010x01xx0100000000100001x01xx10100000010;
	cfgsin27[0:44] =  45 'b00010x01xx1100000001000001x01xx10010000010000;
	cfgsin26[0:44] =  45 'b10x01xx1010000010000100x00xx1010000001000010x;
	cfgsin25[0:44] =  45 'b00xx1000001000100010x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000001xx1xx;
end
endtask
task get_wl_pat174; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000010000010xx0001100000001000100xx00000;
	cfgsin2[0:44] =  45 'b00010010000100xx0000001000100000010xx00100001;
	cfgsin3[0:44] =  45 'b00100000001xx0000001000001000100xx00000010000;
	cfgsin4[0:44] =  45 'b10000001xx0010100000000100001xx00000100001000;
	cfgsin5[0:44] =  45 'b00001xx0000010000100000010xx00000000101000001;
	cfgsin6[0:44] =  45 'b00xx0010010000100000001xx1000010000100000001x;
	cfgsin7[0:44] =  45 'bx1000000001100000001xx0001010000001000010xx00;
// TR
	cfgsin15[0:44] =  45 'b00000100001000001xx0000001000100000010xx00000;
	cfgsin14[0:44] =  45 'b00001100000100xx0010000100100000010xx00100000;
	cfgsin13[0:44] =  45 'b10000001001xx0000001000000001010xx00000000011;
	cfgsin12[0:44] =  45 'b00000100xx0000000100100000001xx00000010001000;
	cfgsin11[0:44] =  45 'b00001xx0000100000000001010xx00000100001000000;
	cfgsin10[0:44] =  45 'b01xx0010001000100000100xx0000001000000001010x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000001000100xx0000001000001000010xx00000100;
	cfgsin19[0:44] =  45 'b00010000010xx0000000100010000001xx00000000010;
	cfgsin20[0:44] =  45 'b01000100xx0000100000001000001xx00010010000010;
	cfgsin21[0:44] =  45 'b00001xx0000001000100000010xx00101000001000000;
	cfgsin22[0:44] =  45 'b01xx0000000001000100001xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000100xx0001001000001000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00000001100000001xx0000001000001000001xx01000;
	cfgsin30[0:44] =  45 'b00010100000001xx0000000100010000001xx10011000;
	cfgsin29[0:44] =  45 'b00100000001xx0000100000001000100xx00000000101;
	cfgsin28[0:44] =  45 'b00000001xx0000000010001000100xx00000000100010;
	cfgsin27[0:44] =  45 'b00001xx0000001000001000100xx00000010000010001;
	cfgsin26[0:44] =  45 'b00xx0000000001010000001xx1000001000001000001x;
	cfgsin25[0:44] =  45 'bx1000001000001000001xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000100xx000;
end
endtask
task get_wl_pat173; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin1[0:44] =  45 'b00000010xx010x100xx0000000010xx010x010xx00100;
	cfgsin2[0:44] =  45 'b00001xx010x010xx0000000001xx100x001xx00000010;
	cfgsin3[0:44] =  45 'b00xx001x010xx0000001000xx100x001xx0000010000x;
	cfgsin4[0:44] =  45 'bx001x010xx0000010000xx010x010xx0000010000xx01;
	cfgsin5[0:44] =  45 'b0x001xx0000000100xx100x100xx0000000100xx100x0;
	cfgsin6[0:44] =  45 'b10xx0000010000xx010x001xx0000010000xx010x001x;
	cfgsin7[0:44] =  45 'bx0000001000xx100x100xx0000100000xx001x100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x001xx0000010000xx010x001xx00000;
	cfgsin14[0:44] =  45 'b00010xx001x010xx0000000001xx010x001xx00000000;
	cfgsin13[0:44] =  45 'b10xx001x100xx0000100000xx100x010xx0000001000x;
	cfgsin12[0:44] =  45 'bx100x001xx0001000100xx100x100xx0010001000xx10;
	cfgsin11[0:44] =  45 'b0x010xx0001010000xx100x100xx0000010000xx010x1;
	cfgsin10[0:44] =  45 'b00xx0000001000xx100x100xx0000100000xx010x010x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000001000100xx0000010000001000100xx10000010;
	cfgsin19[0:44] =  45 'b00000100100xx0100000001100000100xx10001000000;
	cfgsin20[0:44] =  45 'b10000001xx0000100000010000001xx00000000010010;
	cfgsin21[0:44] =  45 'b00100xx0000000010010000001xx00001000001000000;
	cfgsin22[0:44] =  45 'b10xx0000000010001000010xx0000001000001000001x;
	cfgsin23[0:44] =  45 'bx0000010000001000100xx0000100000001000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000100000001xx1001010000000100001xx00000;
	cfgsin30[0:44] =  45 'b10000000100001xx0000000001100000001xx00000010;
	cfgsin29[0:44] =  45 'b00100000001xx0000001000001000010xx00010001001;
	cfgsin28[0:44] =  45 'b00000100xx0001001000001000010xx00000100001000;
	cfgsin27[0:44] =  45 'b00001xx0000001000001000100xx00000010000010001;
	cfgsin26[0:44] =  45 'b00xx0000000010100000001xx0000010000100000001x;
	cfgsin25[0:44] =  45 'bx0000010000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat172; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin1[0:44] =  45 'b00010000xx001x0101x0000001000xx001x0101x00001;
	cfgsin2[0:44] =  45 'b00000xx001x0101x0000000001xx010x1001x00000010;
	cfgsin3[0:44] =  45 'b00xx100x0011x0000000001xx010x1001x0010010000x;
	cfgsin4[0:44] =  45 'bx010x0011x0001010000xx001x0101x0000010000xx00;
	cfgsin5[0:44] =  45 'b1x0101x0000000001xx001x1001x0000000001xx001x1;
	cfgsin6[0:44] =  45 'b001x0000010000xx001x0101x0000010000xx001x0101;
	cfgsin7[0:44] =  45 'bx0000000001xx001x1001x1000000001xx010x0011x00;
// TR
	cfgsin15[0:44] =  45 'b00000001xx001x1001x0001000001xx010x1001x00000;
	cfgsin14[0:44] =  45 'b01000xx010x1001x0000000001xx010x1001x00000000;
	cfgsin13[0:44] =  45 'b01xx010x1001x0000000001xx010x1001x0000001000x;
	cfgsin12[0:44] =  45 'bx100x0011x0000000001xx001x1001x0001001000xx10;
	cfgsin11[0:44] =  45 'b0x0101x0000000001xx010x1001x0010100000xx001x0;
	cfgsin10[0:44] =  45 'b101x0000001000xx100x0101x0000000001xx010x1001;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000100000xx100x001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00000;
	cfgsin18[0:44] =  45 'b01000xx010x100xx0000010000xx001x001xx00000000;
	cfgsin19[0:44] =  45 'b01xx100x001xx0000000001xx010x010xx0000001000x;
	cfgsin20[0:44] =  45 'bx100x010xx0000100000xx010x001xx0000000010xx00;
	cfgsin21[0:44] =  45 'b1x010xx0001000100xx010x100xx0000000100xx010x1;
	cfgsin22[0:44] =  45 'b00xx0001100000xx100x100xx0010001000xx001x010x;
	cfgsin23[0:44] =  45 'bx0000001000xx100x010xx0000001000xx100x001xx00;
// BR
	cfgsin31[0:44] =  45 'b01100000xx100x010xx0000001000xx001x010xx00001;
	cfgsin30[0:44] =  45 'b00000xx100x001xx1000010000xx100x001xx00001000;
	cfgsin29[0:44] =  45 'b00xx100x001xx0000001000xx001x001xx0000000001x;
	cfgsin28[0:44] =  45 'bx010x010xx0000000001xx010x001xx0000001000xx01;
	cfgsin27[0:44] =  45 'b0x001xx0000001000xx100x100xx0000001000xx100x1;
	cfgsin26[0:44] =  45 'b00xx0000010000xx010x001xx0000001000xx100x001x;
	cfgsin25[0:44] =  45 'bx0000000001xx100x010xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000000010xx001x010xx00x;
end
endtask
task get_wl_pat171; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000010000000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000001000000000000000000;
	cfgsin3[0:44] =  45 'b100000000000000000000000100000000010000000000;
	cfgsin4[0:44] =  45 'b000000000001000000000000100001010000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000001000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000001000001000000000000000100;
	cfgsin14[0:44] =  45 'b000000000000000001000000000000000000000000001;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000010100000100;
	cfgsin12[0:44] =  45 'b100000000000000000100000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000100000000000;
	cfgsin10[0:44] =  45 'b000010000001000000000000000000001000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00000;
	cfgsin18[0:44] =  45 'b01000xx100x0101x0000001000xx100x0101x00000000;
	cfgsin19[0:44] =  45 'b01xx010x1001x0000100000xx001x0101x0100000001x;
	cfgsin20[0:44] =  45 'bx001x1001x0000100000xx001x0101x0000001000xx10;
	cfgsin21[0:44] =  45 'b0x0011x0000001000xx010x0011x0000100000xx001x0;
	cfgsin22[0:44] =  45 'b101x0000000001xx010x1001x0000001000xx100x0011;
	cfgsin23[0:44] =  45 'bx1000001000xx100x0011x0000001000xx100x0101x00;
// BR
	cfgsin31[0:44] =  45 'b00000001xx001x1001x0000100000xx001x1001x00000;
	cfgsin30[0:44] =  45 'b01000xx001x0101x0000001000xx001x0101x00100000;
	cfgsin29[0:44] =  45 'b01xx001x1001x0000001000xx100x0101x0010100000x;
	cfgsin28[0:44] =  45 'bx001x0101x0000100000xx010x0011x0000001000xx00;
	cfgsin27[0:44] =  45 'b1x0101x0000001000xx100x0101x0000001000xx100x0;
	cfgsin26[0:44] =  45 'b101x0001000001xx001x1001x0000000010xx001x0101;
	cfgsin25[0:44] =  45 'bx0000000010xx001x0101x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx001x100x0000;
end
endtask
task get_wl_pat170; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000001000000000000000100000000001000000;
	cfgsin2[0:44] =  45 'b001001100000000001000000000000000000001000000;
	cfgsin3[0:44] =  45 'b000010000000010010000000000000000000000000100;
	cfgsin4[0:44] =  45 'b000000000000000000100000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000001000000000000000000100010000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000100000000000;
	cfgsin7[0:44] =  45 'b000000000100000000000000010000000000000000010;
// TR
	cfgsin15[0:44] =  45 'b000000010000000000000001000000000000000010000;
	cfgsin14[0:44] =  45 'b001000000010000000001000000000000000010000000;
	cfgsin13[0:44] =  45 'b000000000000000010100000000000000000000000000;
	cfgsin12[0:44] =  45 'b010000100010000000000000000000010000000000000;
	cfgsin11[0:44] =  45 'b000010010010000000000010000001000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000001000000000000000;
	cfgsin9[0:44] =  45 'b010000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000001000000000000000001000000000;
	cfgsin19[0:44] =  45 'b000000000001001000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000001000010000001000000000000001;
	cfgsin21[0:44] =  45 'b000000010100000000000000001000000000001000000;
	cfgsin22[0:44] =  45 'b000000000000000000000001000000000000000000000;
	cfgsin23[0:44] =  45 'b000000001000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b001000100000000000110000000000000000000000100;
	cfgsin30[0:44] =  45 'b000000000000000000000000000100000000000001000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000100;
	cfgsin28[0:44] =  45 'b000000000000000001000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000100;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b010000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000001000x;
end
endtask
task get_wl_pat169; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001100xx110x0110x0110001101x;
	cfgsin1[0:44] =  45 'bx101x1010x0000001101xx110x0001x0110010001xx11;
	cfgsin2[0:44] =  45 'b0x0000x0010101000xx110x0100x0110001100xx110x0;
	cfgsin3[0:44] =  45 'b010x0010001100xx001x0100x0110001100xx010x0001;
	cfgsin4[0:44] =  45 'bx0101010100xx010x0010x0100001000xx110x0110x01;
	cfgsin5[0:44] =  45 'b10001101xx110x0100x0110010101xx110x0001x00100;
	cfgsin6[0:44] =  45 'b10101xx110x0110x0110001101xx110x0010x01100011;
	cfgsin7[0:44] =  45 'b01xx110x0010x0110001100xx001x0010x0110001100x;
// TR
	cfgsin15[0:44] =  45 'bx101x0100x0110001100xx000x0001x0110010100xx01;
	cfgsin14[0:44] =  45 'b0x0001x1000010010xx100x1010x0110001100xx110x0;
	cfgsin13[0:44] =  45 'b010x0110001101xx000x1010x0110001100xx010x0000;
	cfgsin12[0:44] =  45 'bx0001000100xx101x0001x0101010100xx010x0101x01;
	cfgsin11[0:44] =  45 'b10000100xx001x0110x0100001100xx000x1010x01100;
	cfgsin10[0:44] =  45 'b01100xx110x0010x0110001101xx100x0010x01100011;
	cfgsin9[0:44] =  45 'b00xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000010000001000000000010000100;
	cfgsin19[0:44] =  45 'b100000000000000000001000000000000000010001000;
	cfgsin20[0:44] =  45 'b000000000010000000000000000000000010000000000;
	cfgsin21[0:44] =  45 'b000000100000000010000000000010001000000000000;
	cfgsin22[0:44] =  45 'b000000100000000000000000001000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000101000100000010000000000;
	cfgsin30[0:44] =  45 'b010010000000010001011000000000000000010000000;
	cfgsin29[0:44] =  45 'b010001100001000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000100000000000000000000000010010000;
	cfgsin27[0:44] =  45 'b010000000000000000000000000010100000000000000;
	cfgsin26[0:44] =  45 'b000010000010000000001000001000000100000000000;
	cfgsin25[0:44] =  45 'b000000010000000000000001000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000010000000000;
end
endtask
task get_wl_pat168; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x011000110000000x0110x01000011000;
	cfgsin1[0:44] =  45 'b0000x0110x011000010000001x0100x00100011000000;
	cfgsin2[0:44] =  45 'b0x1000x000100010000000x0101x010100100000001x0;
	cfgsin3[0:44] =  45 'b000x010000010000000x0001x010000110000010x0110;
	cfgsin4[0:44] =  45 'bx001000010000000x0110x011000100000001x0010x01;
	cfgsin5[0:44] =  45 'b1000100000010x0110x011000110000010x0001x01010;
	cfgsin6[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin7[0:44] =  45 'b0000010x1000x001001010000001x0000x00000011000;
// TR
	cfgsin15[0:44] =  45 'b0010x1010x011000110000001x0000x01010011000000;
	cfgsin14[0:44] =  45 'b1x0100x000000110000000x1000x011000110000010x0;
	cfgsin13[0:44] =  45 'b000x011000110000001x0010x010101010000010x1010;
	cfgsin12[0:44] =  45 'bx010001010000010x1000x011001010000010x0000x01;
	cfgsin11[0:44] =  45 'b0000110000010x0110x011000110000010x1000x01100;
	cfgsin10[0:44] =  45 'b1010000010x1000x011001010000010x0100x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001100xx001x0100x0101001000xx100x0;
	cfgsin19[0:44] =  45 'b010x0101001000xx101x0010x0101001100xx010x0010;
	cfgsin20[0:44] =  45 'bx0110001100xx110x0010x0010001001xx001x1001x00;
	cfgsin21[0:44] =  45 'b01010000xx001x0100x0101001000xx100x1000x01010;
	cfgsin22[0:44] =  45 'b10101xx010x1001x0110010000xx110x0110x01100011;
	cfgsin23[0:44] =  45 'b00xx101x0010x0110001101xx110x0110x0110001101x;
// BR
	cfgsin31[0:44] =  45 'bx100x0010x0110001000xx000x0001x0100010101xx01;
	cfgsin30[0:44] =  45 'b0x0000x1010000010xx000x1000x0101001100xx000x1;
	cfgsin29[0:44] =  45 'b000x0000010001xx101x1010x0101001011xx001x0010;
	cfgsin28[0:44] =  45 'bx0101001101xx010x0010x0110001101xx110x0000x01;
	cfgsin27[0:44] =  45 'b00001101xx110x0110x0110001100xx010x0110x01000;
	cfgsin26[0:44] =  45 'b01100xx010x0001x0110000100xx110x0010x01100011;
	cfgsin25[0:44] =  45 'b00xx110x0010x0110001100xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x0001010001xx;
end
endtask
task get_wl_pat167; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000001000000000100000000;
	cfgsin1[0:44] =  45 'b001000000000000000000000000001010000000001001;
	cfgsin2[0:44] =  45 'b000000010000000000000100000000000001000000001;
	cfgsin3[0:44] =  45 'b000000010000000000100100000100000000000000000;
	cfgsin4[0:44] =  45 'b001000010000000100000000000001000000000100000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000001000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000100000000000000000000010000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000001010000000000001000000000000000000000000;
	cfgsin13[0:44] =  45 'b001000000000000000000100000000000000000000000;
	cfgsin12[0:44] =  45 'b000010000000000000000000000000000000000101000;
	cfgsin11[0:44] =  45 'b010000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100101000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0101x01010001000001;
	cfgsin18[0:44] =  45 'b0x0010x101000110000010x0001x011000110000010x0;
	cfgsin19[0:44] =  45 'b100x000100100000010x0000x010001010000000x0100;
	cfgsin20[0:44] =  45 'bx001000100000010x0010x101000110000010x0110x01;
	cfgsin21[0:44] =  45 'b0000010000000x0110x010100110000010x0100x01100;
	cfgsin22[0:44] =  45 'b0110000100x1000x001001000000010x1000x00100101;
	cfgsin23[0:44] =  45 'b0000000x0010x101000101000001x0010x00010101000;
// BR
	cfgsin31[0:44] =  45 'b0001x0110x010000000000010x0110x00100010000000;
	cfgsin30[0:44] =  45 'b0x1001x010101001000000x0000x011000010000000x0;
	cfgsin29[0:44] =  45 'b100x010100010000000x0100x000100110000001x0110;
	cfgsin28[0:44] =  45 'bx000000110000000x0100x011001010000010x0101x00;
	cfgsin27[0:44] =  45 'b0100100000010x0100x011000110000010x0010x00100;
	cfgsin26[0:44] =  45 'b0110000000x0010x000001010000010x0010x01100001;
	cfgsin25[0:44] =  45 'b0000010x0000x001000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat166; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000010000000000000000000000000000;
	cfgsin2[0:44] =  45 'b000010000000010000000000000000000000010000000;
	cfgsin3[0:44] =  45 'b001000000100000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000010000000000000000000010000000000000;
	cfgsin5[0:44] =  45 'b000000100000000000000000000000000001000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000001000000000010000001010000100000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000010000001001000000000000000;
	cfgsin14[0:44] =  45 'b000000000100000000000000001000000000010000000;
	cfgsin13[0:44] =  45 'b100000000000000000000000000000000010000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000100000000010000000000000;
	cfgsin11[0:44] =  45 'b000000010000000000000000000010000000000100000;
	cfgsin10[0:44] =  45 'b000000000000000100000000000000000000100000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b001000000000000000000001000000000000000000000;
	cfgsin19[0:44] =  45 'b001000000000000000000110000100000000010100000;
	cfgsin20[0:44] =  45 'b001000000100000010000000000000000000000000000;
	cfgsin21[0:44] =  45 'b100100000000000000000000000000000000001000000;
	cfgsin22[0:44] =  45 'b000000000000001001000001000000000010001000000;
	cfgsin23[0:44] =  45 'b000001010000000000000000000000100001000000010;
// BR
	cfgsin31[0:44] =  45 'b000000000000100101000000000000001000000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000100100000000010000000100;
	cfgsin29[0:44] =  45 'b001000000000000001000000000000000001000000000;
	cfgsin28[0:44] =  45 'b001000000000000100000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000100100000;
	cfgsin26[0:44] =  45 'b000000000100000001100000000000000100000000100;
	cfgsin25[0:44] =  45 'b000000001000001000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat165; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1010000001000100xx1x;
	cfgsin1[0:44] =  45 'bx1000010010000100xx1xx1000100010000100xx0xx10;
	cfgsin2[0:44] =  45 'b01000001000100xx1xx1100000001000010xx0xx10010;
	cfgsin3[0:44] =  45 'b00010000100xx1xx1000010001000100xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx0xx1000010000001010xx0xx10100000010;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000001000100xx1xx10100000010000;
	cfgsin6[0:44] =  45 'b10xx0xx1010000001000010xx1xx1010000001000010x;
	cfgsin7[0:44] =  45 'bx1xx1010000100000001xx0xx1010000001000001xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1100000100000100xx0xx1010000001000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000001000100xx1xx1000100010000100xx0xx10010;
	cfgsin13[0:44] =  45 'b00001000100xx1xx1100000100000100xx0xx10010000;
	cfgsin12[0:44] =  45 'b10000100xx1xx1010000001000010xx0xx10010000010;
	cfgsin11[0:44] =  45 'b00100xx0xx1010000001000100xx0xx10100000010001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000000001100xx1xx1010000001000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000100000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000010000001010000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b100000000010000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000100000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000001000100000000000000010000000000000000000;
	cfgsin23[0:44] =  45 'b001000000000000000000010000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000010000000000000000001010010;
	cfgsin30[0:44] =  45 'b100000000000000000000000001000000000000000000;
	cfgsin29[0:44] =  45 'b000000000010000000000001010000000000000000000;
	cfgsin28[0:44] =  45 'b000100000000000000000100000000010000000000001;
	cfgsin27[0:44] =  45 'b000000110000000000100000000001000000000000000;
	cfgsin26[0:44] =  45 'b000000000001000000000000010000000000000000000;
	cfgsin25[0:44] =  45 'b000000000001000000000010000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat164; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx1100000001000001xx0x;
	cfgsin1[0:44] =  45 'bx1010000010000010xx1xx1000100000010010xx1xx00;
	cfgsin2[0:44] =  45 'b00100000100001xx0xx1000100010000010xx0xx01000;
	cfgsin3[0:44] =  45 'b00000010100xx0xx1100000001000001xx0xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1010000001000100xx1xx10001000010;
	cfgsin5[0:44] =  45 'b00001xx0xx1100000001000001xx0xx10010000010000;
	cfgsin6[0:44] =  45 'b01xx1xx1100000001000001xx1xx1100000001000001x;
	cfgsin7[0:44] =  45 'bx1xx0100000001000100xx1xx1100000000001100xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1100000001000100xx1xx1100000001000001xx1xx11;
	cfgsin14[0:44] =  45 'b00000001000001xx0xx0010000001000100xx1xx01000;
	cfgsin13[0:44] =  45 'b00001000001xx1xx0100000000100100xx0xx01000001;
	cfgsin12[0:44] =  45 'b00000100xx0xx0100000001000100xx0xx10000100010;
	cfgsin11[0:44] =  45 'b00010xx0xx1100000001000001xx0xx01000000010000;
	cfgsin10[0:44] =  45 'b01xx1xx0100000100000001xx1xx1100000001000001x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000001000010xx1xx10;
	cfgsin18[0:44] =  45 'b10000001000010xx1xx1000100001000100xx1xx11000;
	cfgsin19[0:44] =  45 'b00100000100xx0xx1100000000010100xx1xx00000100;
	cfgsin20[0:44] =  45 'b00001100xx0xx1010000001000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000010000100xx1xx11000001000001;
	cfgsin22[0:44] =  45 'b00xx0xx0010000000010100xx0xx1001000001000100x;
	cfgsin23[0:44] =  45 'bx0xx1010000100000100xx0xx1010000000100001xx0x;
// BR
	cfgsin31[0:44] =  45 'bx1100000000001010xx0xx1010000001000100xx0xx01;
	cfgsin30[0:44] =  45 'b00000001000100xx1xx1100000010000100xx1xx11000;
	cfgsin29[0:44] =  45 'b00010000100xx1xx1000010000100100xx0xx10100001;
	cfgsin28[0:44] =  45 'b00000100xx1xx1100000100000100xx0xx11000000100;
	cfgsin27[0:44] =  45 'b00001xx0xx1100000100000100xx0xx10010000010001;
	cfgsin26[0:44] =  45 'b00xx1xx1001000000010100xx0xx1010000000010010x;
	cfgsin25[0:44] =  45 'bx1xx1010000000010010xx0xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat163; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000100x01000000010001000001xx01;
	cfgsin1[0:44] =  45 'b00100000010000010xx0000100000010000010xx00011;
	cfgsin2[0:44] =  45 'b00000000001010xx0000001000001000100xx00010010;
	cfgsin3[0:44] =  45 'b00010000010xx1000000100001000001xx00000100001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000001000001xx00001000000010;
	cfgsin5[0:44] =  45 'b00010xx1000010000001000010xx00001000000010001;
	cfgsin6[0:44] =  45 'b00xx0000010000001000100xx0000010000001000100x;
	cfgsin7[0:44] =  45 'bx0001010000000100010xx0000000010100000010xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000100000010xx0000001000001000001xx00000;
	cfgsin14[0:44] =  45 'b01000001000001xx1001100000010000100xx00010010;
	cfgsin13[0:44] =  45 'b00001000001xx0001001000100000100xx00010010000;
	cfgsin12[0:44] =  45 'b10000100xx0001010000001000001xx10001000000010;
	cfgsin11[0:44] =  45 'b00001xx1000000010001000001xx10100100001000000;
	cfgsin10[0:44] =  45 'b01xx0001100000010000100xx0000000100001000001x;
	cfgsin9[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1100000001000001xx1xx10;
	cfgsin18[0:44] =  45 'b10000001000001xx1xx1010000001000001xx0xx10001;
	cfgsin19[0:44] =  45 'b00100000100xx0xx0001000001000010xx0xx00100000;
	cfgsin20[0:44] =  45 'b00100001xx1xx1100000001000010xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx0xx0010000010000010xx0xx10100000100001;
	cfgsin22[0:44] =  45 'b00xx0xx0100000100000100xx0xx0100000001000001x;
	cfgsin23[0:44] =  45 'bx0xx1100000001000010xx1xx0000010010000100xx0x;
// BR
	cfgsin31[0:44] =  45 'bx0010000100000100xx0xx1100000001000001xx1xx00;
	cfgsin30[0:44] =  45 'b01000001000001xx1xx0010000000100100xx0xx10100;
	cfgsin29[0:44] =  45 'b00000001100xx0xx1000010001000010xx1xx01000000;
	cfgsin28[0:44] =  45 'b00100001xx1xx0000010001000100xx0xx10010000010;
	cfgsin27[0:44] =  45 'b00010xx0xx1010000000010100xx0xx11000001000000;
	cfgsin26[0:44] =  45 'b01xx1xx0010000001000010xx0xx0100000001000100x;
	cfgsin25[0:44] =  45 'bx1xx1000010001000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
end
endtask
task get_wl_pat162; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000100000100xx0000001000001000001xx00;
	cfgsin1[0:44] =  45 'b00001000100000010xx0000000010010000001xx00000;
	cfgsin2[0:44] =  45 'b10000100000100xx1000000001100000001xx00000001;
	cfgsin3[0:44] =  45 'b00100000001xx0000000100001000010xx01000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000000001100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00001xx0000001000001000001xx01000000010010000;
	cfgsin6[0:44] =  45 'b10xx0000001000001000001xx0000000001001000001x;
	cfgsin7[0:44] =  45 'bx0000001000001000100xx0000001000000010001xx10;
// TR
	cfgsin15[0:44] =  45 'b00001000000010001xx0000001000001000100xx00000;
	cfgsin14[0:44] =  45 'b01000001000100xx0000000100100000001xx00000010;
	cfgsin13[0:44] =  45 'b00001000001xx0000000100001000010xx00000001000;
	cfgsin12[0:44] =  45 'b01000010xx0100001000001000010xx00000000100010;
	cfgsin11[0:44] =  45 'b00010xx0000001000001000100xx00000100000010000;
	cfgsin10[0:44] =  45 'b01xx0000000100010000001xx0000001000001000001x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x00000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000001000100xx00001;
	cfgsin18[0:44] =  45 'b00000001000100xx0000100000001000010xx00000001;
	cfgsin19[0:44] =  45 'b00100000100xx1000000010000001001xx10001000000;
	cfgsin20[0:44] =  45 'b00010010xx0000010000001000001xx00000100001000;
	cfgsin21[0:44] =  45 'b00100xx1000100000010000010xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0001001000001000001xx0001010000001000001x;
	cfgsin23[0:44] =  45 'bx0000000010001000100xx0001100000000001010xx00;
// BR
	cfgsin31[0:44] =  45 'b01001000000001001xx1000010000001000001xx00011;
	cfgsin30[0:44] =  45 'b00000001000001xx0010001000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00010000100xx0000100000000010001xx00000100000;
	cfgsin28[0:44] =  45 'b00100100xx0001010000100000100xx00000000100010;
	cfgsin27[0:44] =  45 'b00100xx1000100000100000100xx00000100000000101;
	cfgsin26[0:44] =  45 'b00xx0001100000001000001xx1001000100001000001x;
	cfgsin25[0:44] =  45 'bx0000100000001000001xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
end
endtask
task get_wl_pat161; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000100000100x00000001000001000001xx00;
	cfgsin1[0:44] =  45 'b00001000010000010xx0000001000100000010xx00000;
	cfgsin2[0:44] =  45 'b01000001000010xx0000001000000001100xx10000000;
	cfgsin3[0:44] =  45 'b10010000100xx0000000010001000001xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000001000001xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx0000000001001000001xx00000010000010000;
	cfgsin6[0:44] =  45 'b01xx0000001000001000001xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0000000010001000010xx0000000100001000010xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000001000001xx00000;
	cfgsin14[0:44] =  45 'b01000001000010xx0000000100010000010xx00000000;
	cfgsin13[0:44] =  45 'b10001000001xx0000001000100000001xx10000010000;
	cfgsin12[0:44] =  45 'b00010001xx0000100000001000100xx00001000000010;
	cfgsin11[0:44] =  45 'b00001xx0000100000001000001xx00000010000010000;
	cfgsin10[0:44] =  45 'b01xx0000001000010000010xx0000001000001000001x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000001000001xx00000;
	cfgsin18[0:44] =  45 'b01000001000001xx0000001000001000001xx01000000;
	cfgsin19[0:44] =  45 'b01000001010xx0000001000010000001xx00000000010;
	cfgsin20[0:44] =  45 'b01000100xx0000001000001000001xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000010xx00000010000000011;
	cfgsin22[0:44] =  45 'b00xx0000000100000100001xx0000000100001000100x;
	cfgsin23[0:44] =  45 'bx1000000010000100100xx0000000010000010001xx10;
// BR
	cfgsin31[0:44] =  45 'b00100000010000100xx0000001000001000001xx00000;
	cfgsin30[0:44] =  45 'b00100001000010xx0000000100000001010xx01000000;
	cfgsin29[0:44] =  45 'b10100000100xx0100000010010000100xx00100010000;
	cfgsin28[0:44] =  45 'b10000100xx0000000100100000010xx00000100001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000001xx00000001001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000001000010xx0000001000001000001x;
	cfgsin25[0:44] =  45 'bx0000000010001000001xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
end
endtask
task get_wl_pat160; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000100x00000001000001000001xx00;
	cfgsin1[0:44] =  45 'b00001000000001100xx0000000001100000010xx00000;
	cfgsin2[0:44] =  45 'b00100010000001xx0000001000000100010xx00000010;
	cfgsin3[0:44] =  45 'b00000010010xx0000001000000001001xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000001000001xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx0000001000001000001xx00000010000010000;
	cfgsin6[0:44] =  45 'b01xx0000001000001000001xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0000000001001000001xx0000000010000100100xx00;
// TR
	cfgsin15[0:44] =  45 'b00000010000100010xx0000001000000100001xx00000;
	cfgsin14[0:44] =  45 'b01000000001001xx0000000100000001100xx00000001;
	cfgsin13[0:44] =  45 'b00001000001xx0000000100000100100xx00000000010;
	cfgsin12[0:44] =  45 'b00100100xx0000000100001000001xx00000010000010;
	cfgsin11[0:44] =  45 'b00001xx0100001000100000010xx00000001000010000;
	cfgsin10[0:44] =  45 'b01xx0001000100100000100xx0000001000001000001x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000000010001000001xx00000;
	cfgsin18[0:44] =  45 'b00010001000001xx0000001000001000001xx00000010;
	cfgsin19[0:44] =  45 'b00000001100xx0001000001000001010xx00010100000;
	cfgsin20[0:44] =  45 'b00100010xx0000001000001000001xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0001001000010000010xx10000010000000010;
	cfgsin22[0:44] =  45 'b01xx1000000100000001100xx1000000010001000001x;
	cfgsin23[0:44] =  45 'bx0000010000100000001xx0000010000000100010xx00;
// BR
	cfgsin31[0:44] =  45 'b00000001100000100xx0000001000001000001xx00000;
	cfgsin30[0:44] =  45 'b01000000001001xx0000000100000001100xx00000010;
	cfgsin29[0:44] =  45 'b00010000010xx0000001000000010010xx00000010000;
	cfgsin28[0:44] =  45 'b01000100xx0000000100100000100xx01001000000000;
	cfgsin27[0:44] =  45 'b01001xx0000000010001000010xx01000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000000100001000100xx0000000100001000001x;
	cfgsin25[0:44] =  45 'bx0000001000001000001xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
end
endtask
task get_wl_pat159; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100xx1000000010001000100xx00;
	cfgsin1[0:44] =  45 'b00000100010000100xx0000000100010000100xx00000;
	cfgsin2[0:44] =  45 'b01000001000010xx0001010000001000100xx00000000;
	cfgsin3[0:44] =  45 'b10010000100xx0000001000001000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000001000010xx00000010000010;
	cfgsin5[0:44] =  45 'b00100xx0000001000001000100xx00000010000010001;
	cfgsin6[0:44] =  45 'b00xx0000001000001000100xx0000001000001000100x;
	cfgsin7[0:44] =  45 'bx0000100000001000100xx0000001000010000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000000100100xx0000100000000100100xx01010;
	cfgsin14[0:44] =  45 'b00100000001100xx0000100000000100100xx00000010;
	cfgsin13[0:44] =  45 'b00001000100xx0000001000000001100xx00000100001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000001000010xx00000010000010;
	cfgsin11[0:44] =  45 'b00100xx0000001000001000100xx00000010000010000;
	cfgsin10[0:44] =  45 'b01xx0000001000010000100xx0000001000001000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000001000001xx00000;
	cfgsin18[0:44] =  45 'b01000001000001xx0000001000001000001xx00000010;
	cfgsin19[0:44] =  45 'b00000001100xx0000010000000100010xx00000000101;
	cfgsin20[0:44] =  45 'b00000001xx0000001000001000001xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000000010000010100xx00000000100000100;
	cfgsin22[0:44] =  45 'b10xx0000001000010000100xx0000000010000100010x;
	cfgsin23[0:44] =  45 'bx0000001000001000010xx0000001000001000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000000100100xx0000001000001000010xx00000;
	cfgsin30[0:44] =  45 'b00100000100100xx0000000100001000001xx00000010;
	cfgsin29[0:44] =  45 'b00001000001xx0000001000100000001xx00100010001;
	cfgsin28[0:44] =  45 'b00000100xx0000000100100000001xx00000010000000;
	cfgsin27[0:44] =  45 'b01001xx0000000100000010100xx00001000000010000;
	cfgsin26[0:44] =  45 'b10xx0101010000001000001xx0000010000001000001x;
	cfgsin25[0:44] =  45 'bx0000010000001000001xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
end
endtask
task get_wl_pat158; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000100xx0000001000001000001xx00;
	cfgsin1[0:44] =  45 'b00000100001000010xx1001000100010000010xx00010;
	cfgsin2[0:44] =  45 'b10000001000001xx0100001000000001010xx01000010;
	cfgsin3[0:44] =  45 'b00010000100xx0100001000001000001xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx1000000100001000100xx10000010000010;
	cfgsin5[0:44] =  45 'b00001xx0000001000001000001xx00011000000010000;
	cfgsin6[0:44] =  45 'b01xx0000001000001000001xx0000001000001000001x;
	cfgsin7[0:44] =  45 'bx0000001000001000001xx0001000100001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00000100000001100xx0001001000001000001xx00000;
	cfgsin14[0:44] =  45 'b00100001000001xx0000000010010000100xx01000010;
	cfgsin13[0:44] =  45 'b00001000001xx0001100000100000100xx00001000000;
	cfgsin12[0:44] =  45 'b10000100xx0000000100001000100xx10000010000010;
	cfgsin11[0:44] =  45 'b00010xx0000001000001000001xx10000010000010000;
	cfgsin10[0:44] =  45 'b10xx1000001000010000010xx1000001000001000001x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000001000100xx00000;
	cfgsin18[0:44] =  45 'b01000001000100xx0000001000001000100xx00000010;
	cfgsin19[0:44] =  45 'b00001000100xx0000010000100000010xx00000100001;
	cfgsin20[0:44] =  45 'b00000100xx0000001000001000010xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000010000100xx00000001001000001;
	cfgsin22[0:44] =  45 'b00xx0000010000010000100xx0000100000001000100x;
	cfgsin23[0:44] =  45 'bx0000001000100000010xx0000000100100000010xx00;
// BR
	cfgsin31[0:44] =  45 'b00000010100000010xx0000001000001000100xx00000;
	cfgsin30[0:44] =  45 'b10000001000100xx0000010000000001010xx01000001;
	cfgsin29[0:44] =  45 'b00010000100xx0000001000000010100xx00000010000;
	cfgsin28[0:44] =  45 'b00100100xx0000001000100000100xx00000001000010;
	cfgsin27[0:44] =  45 'b00001xx0000001000000001100xx00000010001000000;
	cfgsin26[0:44] =  45 'b10xx0000001000100000100xx0000001000001000010x;
	cfgsin25[0:44] =  45 'bx0000001000001000010xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
end
endtask
task get_wl_pat157; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx1000010100000001xx1x;
	cfgsin1[0:44] =  45 'bx1100000001000010xx0xx0000100001000010xx1xx01;
	cfgsin2[0:44] =  45 'b00000000001100xx0xx0000001001000010xx0xx10001;
	cfgsin3[0:44] =  45 'b00000010100xx0xx1001000100000001xx1xx10010001;
	cfgsin4[0:44] =  45 'b00000100xx0xx1010000010000001xx0xx10010000000;
	cfgsin5[0:44] =  45 'b01001xx1xx1001000000010001xx1xx00010000100000;
	cfgsin6[0:44] =  45 'b01xx1xx1000100010000001xx1xx1001000010000001x;
	cfgsin7[0:44] =  45 'bx1xx1001000001000010xx1xx0100000000010010xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1100000010000100xx1xx0000010100000001xx0xx00;
	cfgsin14[0:44] =  45 'b00100100000001xx1xx1010000010000100xx0xx10010;
	cfgsin13[0:44] =  45 'b00100000001xx1xx0010000100000100xx1xx10010001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1010000100000001xx0xx10010000000;
	cfgsin11[0:44] =  45 'b10001xx0xx1001000010000001xx0xx10000100100001;
	cfgsin10[0:44] =  45 'b00xx0xx0001000100000100xx0xx1000010100000001x;
	cfgsin9[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000001000001xx00000;
	cfgsin18[0:44] =  45 'b01000001000001xx0001001000001000001xx00010000;
	cfgsin19[0:44] =  45 'b10000001100xx0010001000000001100xx10000010000;
	cfgsin20[0:44] =  45 'b10000001xx1000001000001000100xx00010010001000;
	cfgsin21[0:44] =  45 'b00100xx0001001000001000010xx00000100000000011;
	cfgsin22[0:44] =  45 'b00xx0001000100001000100xx0100001000001000001x;
	cfgsin23[0:44] =  45 'bx0000100000100000100xx1000000100000100001xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000000001100xx0000001000001000001xx00011;
	cfgsin30[0:44] =  45 'b00000001000001xx0000000010000001001xx00010010;
	cfgsin29[0:44] =  45 'b00000001100xx0000000100000010010xx00000001000;
	cfgsin28[0:44] =  45 'b00100010xx0100001000000001100xx00100010000000;
	cfgsin27[0:44] =  45 'b01010xx0000001000000001100xx10000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000000100001000010xx1000001000001000100x;
	cfgsin25[0:44] =  45 'bx0000001000001000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
end
endtask
task get_wl_pat156; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000100x00xx1100000100000001x01x;
	cfgsin1[0:44] =  45 'bx1100000001000100x01xx1100000001000010x01xx11;
	cfgsin2[0:44] =  45 'b00000001000100x00xx1010000000001100x10xx10100;
	cfgsin3[0:44] =  45 'b00000001010x01xx1100000010000001x00xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1001000010000100x00xx10100000100;
	cfgsin5[0:44] =  45 'b00100x00xx1010000100000010x00xx10010000000010;
	cfgsin6[0:44] =  45 'b10x00xx1010000010000100x01xx1000010010000100x;
	cfgsin7[0:44] =  45 'b00xx1001000100000010x00xx1000010001000001x10x;
// TR
	cfgsin15[0:44] =  45 'bx1010000000001001x00xx1000010100000010x01xx10;
	cfgsin14[0:44] =  45 'b00010000001001x00xx1010000000001010x00xx10000;
	cfgsin13[0:44] =  45 'b10100000001x00xx1010000000010010x00xx10100000;
	cfgsin12[0:44] =  45 'b00010010x00xx1000010000010001x01xx10100000100;
	cfgsin11[0:44] =  45 'b00001x01xx1010000001000001x10xx10100000100000;
	cfgsin10[0:44] =  45 'b01x01xx1010000000010100x01xx1010000100000001x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100x01xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000001xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000001xx1xx0001000000001001xx1xx00010;
	cfgsin19[0:44] =  45 'b00010000100xx1xx0000100000001010xx0xx10010000;
	cfgsin20[0:44] =  45 'b00010010xx0xx1001000000001001xx1xx00010001000;
	cfgsin21[0:44] =  45 'b00100xx1xx0001000001000010xx1xx11000000000101;
	cfgsin22[0:44] =  45 'b00xx1xx0000010010000100xx0xx1001000100000001x;
	cfgsin23[0:44] =  45 'bx1xx1000100000100001xx0xx1001000000010100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1100000010000001xx1xx1001000010000001xx1xx00;
	cfgsin30[0:44] =  45 'b01000010000001xx1xx1100000000010100xx0xx00001;
	cfgsin29[0:44] =  45 'b00010000100xx1xx1010000001000010xx1xx00010001;
	cfgsin28[0:44] =  45 'b00000100xx0xx1001000100000100xx1xx00000010100;
	cfgsin27[0:44] =  45 'b00001xx1xx1001000010000100xx0xx10010000100000;
	cfgsin26[0:44] =  45 'b01xx0xx0100000001000001xx0xx1001000010000001x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000001xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat155; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx1000100000100000001x000;
	cfgsin1[0:44] =  45 'b00010000001000001x00000010000001000010x000000;
	cfgsin2[0:44] =  45 'b10000010000001x00100010000001000001x010001000;
	cfgsin3[0:44] =  45 'b00010000001x00000100000100000001x010001000001;
	cfgsin4[0:44] =  45 'b00000100x00000000010010000010x010000100000100;
	cfgsin5[0:44] =  45 'b00010x00000000010100000100x000000100000100001;
	cfgsin6[0:44] =  45 'b00x01000010000010000010x00000100000010000010x;
	cfgsin7[0:44] =  45 'b00000000010000001100x00000010000001000100x000;
// TR
	cfgsin15[0:44] =  45 'b00000100000100010x01000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000001x00000010000010000001x110000100;
	cfgsin13[0:44] =  45 'b00100000001x00000001000100000100x110000000101;
	cfgsin12[0:44] =  45 'b00000100x10000001000100000001x100000100001000;
	cfgsin11[0:44] =  45 'b00001x00000001000010000001x010000100001000000;
	cfgsin10[0:44] =  45 'b01x00000000010000010100x10000000010100000001x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000100x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000010x01xx10;
	cfgsin18[0:44] =  45 'b10000100000010x01xx1010000010000100x00xx10100;
	cfgsin19[0:44] =  45 'b00000100001x00xx1000001001000100x00xx10010000;
	cfgsin20[0:44] =  45 'b01000001x10xx1000010100000001x00xx10100001000;
	cfgsin21[0:44] =  45 'b00100x00xx1010000001000100x00xx10100000100000;
	cfgsin22[0:44] =  45 'b01x01xx1010000010000001x01xx1001000000001010x;
	cfgsin23[0:44] =  45 'b00xx0010000001000001x11xx0100000001000001x00x;
// BR
	cfgsin31[0:44] =  45 'bx1010000010000010x00xx1100000000001010x00xx00;
	cfgsin30[0:44] =  45 'b00010000100100x01xx0010000000001001x11xx10100;
	cfgsin29[0:44] =  45 'b00100000010x00xx1001000001000100x01xx10100001;
	cfgsin28[0:44] =  45 'b00000010x00xx1010000000001100x11xx10000100010;
	cfgsin27[0:44] =  45 'b00100x01xx1010000100000100x00xx10100001000001;
	cfgsin26[0:44] =  45 'b00x10xx1001000010000100x00xx1000010010000100x;
	cfgsin25[0:44] =  45 'b00xx1000010100000010x00xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000001x01x0;
end
endtask
task get_wl_pat154; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000100xx0000010000100000001x100;
	cfgsin1[0:44] =  45 'b00010000001000010x10000100000001000010x100000;
	cfgsin2[0:44] =  45 'b10000100000010x10000100000100000010x100001000;
	cfgsin3[0:44] =  45 'b00100000100x10000010000100000001x100001000001;
	cfgsin4[0:44] =  45 'b00000100x10000010000100000001x100000100001000;
	cfgsin5[0:44] =  45 'b00001x10000010000001000001x100000100001000000;
	cfgsin6[0:44] =  45 'b01x10000010000100000001x10000010000100000001x;
	cfgsin7[0:44] =  45 'b10000010000000010001x11000010000001000010x100;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100x10000010000000100001x100000;
	cfgsin14[0:44] =  45 'b10000100000001x10000001000000100100x100000100;
	cfgsin13[0:44] =  45 'b00100000001x10000100000000001001x100001000000;
	cfgsin12[0:44] =  45 'b00001001x10000010000100000001x100000100000010;
	cfgsin11[0:44] =  45 'b00001x10000010000010000001x100000100000100000;
	cfgsin10[0:44] =  45 'b01x10000010000100000100x10000010000100000001x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000010000010000010x000000010;
	cfgsin19[0:44] =  45 'b00010000010x01000010000001000001x000000100000;
	cfgsin20[0:44] =  45 'b01000100x01000010000100000001x000000100001000;
	cfgsin21[0:44] =  45 'b00100x01000010000001000001x000001000000000100;
	cfgsin22[0:44] =  45 'b10x10000100000010000010x00000010000100000100x;
	cfgsin23[0:44] =  45 'b01001100000010000010x00000010000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00000010010000001x00100000010010000100x010011;
	cfgsin30[0:44] =  45 'b00000010000010x00010100000000010010x000000100;
	cfgsin29[0:44] =  45 'b00010000001x10100010000001000001x000000100000;
	cfgsin28[0:44] =  45 'b00100001x00000000010100000100x000000100000001;
	cfgsin27[0:44] =  45 'b00010x00000001000010000100x101000100000100001;
	cfgsin26[0:44] =  45 'b00x01000000010000100010x01000010000010000010x;
	cfgsin25[0:44] =  45 'b00000100000100000100x01000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001010000100000100xx00x;
end
endtask
task get_wl_pat153; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x100;
	cfgsin1[0:44] =  45 'b00100000001000010x00000100000001000001x100000;
	cfgsin2[0:44] =  45 'b01000010000100x00000000001001000010x000001000;
	cfgsin3[0:44] =  45 'b00000001100x10000100000100000100x000000100001;
	cfgsin4[0:44] =  45 'b00000100x00000010000010000001x000000100000100;
	cfgsin5[0:44] =  45 'b00001x01000010000100000001x010001000000100000;
	cfgsin6[0:44] =  45 'b01x00000100000010000001x00000010000010000001x;
	cfgsin7[0:44] =  45 'b01000010000010000001x00000001000100000001x010;
// TR
	cfgsin15[0:44] =  45 'b00010000000001010x00000010000100000001x000000;
	cfgsin14[0:44] =  45 'b10000010000010x00100010000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000100x10100100000000001010x000001000000;
	cfgsin12[0:44] =  45 'b00001010x01000100000001000001x000000100000010;
	cfgsin11[0:44] =  45 'b00001x00000010000010000001x000000100000100001;
	cfgsin10[0:44] =  45 'b00x00000010000000010010x00000010000100000001x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000010000000010001x100000;
	cfgsin18[0:44] =  45 'b10000000010001x10000010000100000001x100000000;
	cfgsin19[0:44] =  45 'b10100000100x10000000010001000010x100000000010;
	cfgsin20[0:44] =  45 'b01000010x10000010000100000001x101000100001000;
	cfgsin21[0:44] =  45 'b00100x10000100000001000010x100000100001000001;
	cfgsin22[0:44] =  45 'b00x10000010000100000100x10000010000000001001x;
	cfgsin23[0:44] =  45 'b10000000010100000100x10000000010001000010x100;
// BR
	cfgsin31[0:44] =  45 'b00100000001000100x10000010000001000001x100000;
	cfgsin30[0:44] =  45 'b10000100000001x10000000100100000100x100001000;
	cfgsin29[0:44] =  45 'b00000100100x10000100000001000010x100000001000;
	cfgsin28[0:44] =  45 'b00001100x10000100000100000100x100000100001000;
	cfgsin27[0:44] =  45 'b00001x10000100000010000100x100001000000100001;
	cfgsin26[0:44] =  45 'b00x10000010000100000001x10000010000100000001x;
	cfgsin25[0:44] =  45 'b10000010000000001001x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat152; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000000100001x000;
	cfgsin1[0:44] =  45 'b00100000001000100x00000100000100000010x000001;
	cfgsin2[0:44] =  45 'b00000000100100x00001000010010000001x000101000;
	cfgsin3[0:44] =  45 'b00000100010x00000000001000010001x000000100001;
	cfgsin4[0:44] =  45 'b00000100x00000010000000100001x010000100000100;
	cfgsin5[0:44] =  45 'b00001x00000010000100000001x000001000000100000;
	cfgsin6[0:44] =  45 'b01x00001100000010000001x00000010000010000001x;
	cfgsin7[0:44] =  45 'b00000010000010000001x01000010000000001001x000;
// TR
	cfgsin15[0:44] =  45 'b10000010000100010x00000010000100000100x010000;
	cfgsin14[0:44] =  45 'b01000001000001x00000010000001000010x100001000;
	cfgsin13[0:44] =  45 'b00000010001x00000100000001000100x100001000000;
	cfgsin12[0:44] =  45 'b01000001x00000100000000100010x101000000010000;
	cfgsin11[0:44] =  45 'b01100x11000010000100000001x000000100000000100;
	cfgsin10[0:44] =  45 'b01x00000010000001000010x10000010000001000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000001x000000;
	cfgsin18[0:44] =  45 'b10000100000001x00000100000010000001x010000100;
	cfgsin19[0:44] =  45 'b00010000100x00000100000000010010x001000100000;
	cfgsin20[0:44] =  45 'b01000001x10000010000100000001x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000001000100x010000000100000100;
	cfgsin22[0:44] =  45 'b01x00000000001010000100x00000010000100000001x;
	cfgsin23[0:44] =  45 'b00000010000010000100x00001001000100000100x010;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000010000010000001x000000;
	cfgsin30[0:44] =  45 'b10000010000001x00000010000000010001x000000100;
	cfgsin29[0:44] =  45 'b00010000100x00000100000100000100x000001000001;
	cfgsin28[0:44] =  45 'b00000100x00100100000100000100x000000100000010;
	cfgsin27[0:44] =  45 'b00001x00000010000010000001x000000100000000010;
	cfgsin26[0:44] =  45 'b10x00000010000000010001x00000010000010000001x;
	cfgsin25[0:44] =  45 'b01000100000100000001x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat151; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x01000000001100000001x000;
	cfgsin1[0:44] =  45 'b00100000001000100x00000100000001000010x000000;
	cfgsin2[0:44] =  45 'b00010000010100x00000100000001000010x000001000;
	cfgsin3[0:44] =  45 'b00000100010x00000001000100000001x000000100001;
	cfgsin4[0:44] =  45 'b00000100x00000010000001000001x000000010000100;
	cfgsin5[0:44] =  45 'b00001x00000010000100000001x000001000000001000;
	cfgsin6[0:44] =  45 'b01x00000100000010000001x00000010000010000001x;
	cfgsin7[0:44] =  45 'b00000010000000001001x00000010000001000001x010;
// TR
	cfgsin15[0:44] =  45 'b00010000000001100x00000010000001000100x000010;
	cfgsin14[0:44] =  45 'b10000001000001x01000010000001000100x000001000;
	cfgsin13[0:44] =  45 'b00100000001x00000100000000100010x000001000000;
	cfgsin12[0:44] =  45 'b00100010x00100001000100000001x000000010001000;
	cfgsin11[0:44] =  45 'b00001x00000001000000010001x000000100000100000;
	cfgsin10[0:44] =  45 'b01x00000010000001000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000001x000010;
	cfgsin18[0:44] =  45 'b10000100000001x00000100000010000001x000000100;
	cfgsin19[0:44] =  45 'b00001000001x00000010000001000010x100010100000;
	cfgsin20[0:44] =  45 'b00001010x00000010000100000001x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00001010000001000010x000010000010001000;
	cfgsin22[0:44] =  45 'b01x00000010000000100001x10000001000010000001x;
	cfgsin23[0:44] =  45 'b00000010000000010100x01000010000000001100x010;
// BR
	cfgsin31[0:44] =  45 'b00010000000010010x10000010000100000001x000000;
	cfgsin30[0:44] =  45 'b10000000010001x01001001000010000100x000000100;
	cfgsin29[0:44] =  45 'b00001000100x00000010000000100100x000100100000;
	cfgsin28[0:44] =  45 'b00100001x10100100000000001100x000000000100000;
	cfgsin27[0:44] =  45 'b01010x00000010000001000100x000000100000010001;
	cfgsin26[0:44] =  45 'b00x00000001000000010001x00000010000010000001x;
	cfgsin25[0:44] =  45 'b00000100000100000001x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat150; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000001000000001000000001001x001;
	cfgsin1[0:44] =  45 'b00001000100000010x00001000100001000001x101100;
	cfgsin2[0:44] =  45 'b00001010000001x11000001000001000100x101000100;
	cfgsin3[0:44] =  45 'b00000001100x00000001000000001001x001000010001;
	cfgsin4[0:44] =  45 'b00000100x00000001000010000010x000000010000100;
	cfgsin5[0:44] =  45 'b00001x01000100000000001001x000011000000100000;
	cfgsin6[0:44] =  45 'b01x00000000010000001001x00000010000000001001x;
	cfgsin7[0:44] =  45 'b00000100000000001001x00001100000000001010x000;
// TR
	cfgsin15[0:44] =  45 'b00010000001000100x10001100000000001100x000000;
	cfgsin14[0:44] =  45 'b00001000001010x00010010000001000010x000000100;
	cfgsin13[0:44] =  45 'b00000001001x00001100000000001001x000011000000;
	cfgsin12[0:44] =  45 'b00001100x00000001000000001001x000000000010010;
	cfgsin11[0:44] =  45 'b00001x00000010000000001001x110000010000000010;
	cfgsin10[0:44] =  45 'b01x00000010000000001100x00000010000000001001x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000001x000001;
	cfgsin18[0:44] =  45 'b00000100000001x00000100000010000001x000000010;
	cfgsin19[0:44] =  45 'b00010000001x00000010000001000001x000001000000;
	cfgsin20[0:44] =  45 'b01000010x00000010000100000001x010000100001000;
	cfgsin21[0:44] =  45 'b00100x00000000100001000100x000000100000000010;
	cfgsin22[0:44] =  45 'b01x00000010000001000100x00000100000100000001x;
	cfgsin23[0:44] =  45 'b01000000001000100100x00000100000001000100x000;
// BR
	cfgsin31[0:44] =  45 'b00010000010000100x00000100000010000001x000000;
	cfgsin30[0:44] =  45 'b00001000001001x00000010000000100001x000000100;
	cfgsin29[0:44] =  45 'b00000001100x00000010000001000100x000000100001;
	cfgsin28[0:44] =  45 'b00000100x00000100000001000100x000000010000000;
	cfgsin27[0:44] =  45 'b10100x00001010000000010100x000000100000100000;
	cfgsin26[0:44] =  45 'b10x00000010000000001001x00000010000010000001x;
	cfgsin25[0:44] =  45 'b00000100000100000001x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat149; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1001000100000100x00x;
	cfgsin1[0:44] =  45 'bx1010000100000001x01xx0000010100000010x00xx00;
	cfgsin2[0:44] =  45 'b10000001000100x00xx0010000100000010x00xx00000;
	cfgsin3[0:44] =  45 'b10001000001x01xx1001000100000100x00xx10010001;
	cfgsin4[0:44] =  45 'b00000100x01xx1100000100000001x00xx11000001000;
	cfgsin5[0:44] =  45 'b00001x00xx1010000010000001x01xx00000100000100;
	cfgsin6[0:44] =  45 'b01x01xx0100000000100001x01xx1100000001000001x;
	cfgsin7[0:44] =  45 'b01xx1000001001000001x00xx0010000001000100x10x;
// TR
	cfgsin15[0:44] =  45 'bx0100000001000001x01xx0010000010000100x00xx00;
	cfgsin14[0:44] =  45 'b10000010000001x00xx0000001001000001x01xx10100;
	cfgsin13[0:44] =  45 'b00100000100x01xx0010000001000100x01xx00010000;
	cfgsin12[0:44] =  45 'b01000010x10xx1010000000100100x00xx10010000010;
	cfgsin11[0:44] =  45 'b00100x00xx1001000100000100x00xx10000100100000;
	cfgsin10[0:44] =  45 'b10x01xx1010000001000001x01xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100000000100000100000100x000;
	cfgsin17[0:44] =  45 'b00010000100000100x00010000100000001001x000000;
	cfgsin18[0:44] =  45 'b00100100000001x00001010000010000001x001000100;
	cfgsin19[0:44] =  45 'b00010000001x00101010000001000010x010000010000;
	cfgsin20[0:44] =  45 'b01000001x00000010000000001001x000010010001000;
	cfgsin21[0:44] =  45 'b00100x01000000010001000010x000000100000010001;
	cfgsin22[0:44] =  45 'b00x00000001000000001100x00100010000000001010x;
	cfgsin23[0:44] =  45 'b10000010000000001001x10000010000001000100x000;
// BR
	cfgsin31[0:44] =  45 'b00100000000001100x01000000001000001001x000100;
	cfgsin30[0:44] =  45 'b10000001000100x10000001000001000100x010010100;
	cfgsin29[0:44] =  45 'b00010000010x00010010000001000001x100000100000;
	cfgsin28[0:44] =  45 'b00001100x00000010000100000100x100010000100010;
	cfgsin27[0:44] =  45 'b00001x00000010000010000100x001000100000000010;
	cfgsin26[0:44] =  45 'b10x00100010000000010001x01000010000000001001x;
	cfgsin25[0:44] =  45 'b00000100000100000001x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000010100001000000010000x;
end
endtask
task get_wl_pat148; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000001xx0xx1001000100000010x01x;
	cfgsin1[0:44] =  45 'bx1100000000001100x01xx1000001100000100x01xx01;
	cfgsin2[0:44] =  45 'b00000000100010x01xx0100000001000001x00xx01000;
	cfgsin3[0:44] =  45 'b00001000010x00xx0001000100000010x00xx10010001;
	cfgsin4[0:44] =  45 'b00000100x00xx1010000001000001x00xx10100001000;
	cfgsin5[0:44] =  45 'b00001x00xx1010000010000001x01xx10100000100000;
	cfgsin6[0:44] =  45 'b01x11xx1001000010000001x01xx1010000100000001x;
	cfgsin7[0:44] =  45 'b00xx0010000001000001x00xx0000001000100001x00x;
// TR
	cfgsin15[0:44] =  45 'bx1010000001000100x10xx1010000001000001x01xx10;
	cfgsin14[0:44] =  45 'b10000001000100x11xx0100000001000100x01xx10100;
	cfgsin13[0:44] =  45 'b00100000010x00xx0010000001000010x00xx10001000;
	cfgsin12[0:44] =  45 'b01000001x01xx1010000001000010x00xx00100000010;
	cfgsin11[0:44] =  45 'b00010x10xx1000001010000010x01xx00100000100001;
	cfgsin10[0:44] =  45 'b00x01xx0001000001000010x01xx0010000100000010x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x1xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx0100000100000001x01xx00;
	cfgsin18[0:44] =  45 'b10000100000001x01xx0100000100000001x00xx11000;
	cfgsin19[0:44] =  45 'b00001000010x00xx0010000100000001x00xx00100000;
	cfgsin20[0:44] =  45 'b00100100x01xx1010000100000001x00xx00010001000;
	cfgsin21[0:44] =  45 'b00100x00xx0001000001000100x01xx01000000010000;
	cfgsin22[0:44] =  45 'b10x01xx1100000001000001x10xx1010000100000001x;
	cfgsin23[0:44] =  45 'b00xx1100000001000010x10xx1010000000100010x10x;
// BR
	cfgsin31[0:44] =  45 'bx1000010000010010x00xx1000010001000100x01xx01;
	cfgsin30[0:44] =  45 'b00000100000010x00xx0100000001000001x00xx00000;
	cfgsin29[0:44] =  45 'b01001000100x01xx0010000100000100x01xx00100000;
	cfgsin28[0:44] =  45 'b01000001x00xx1010000001000100x01xx01000000000;
	cfgsin27[0:44] =  45 'b01010x01xx0001000001000001x00xx10010000010001;
	cfgsin26[0:44] =  45 'b00x00xx1100000100000001x00xx1100000000010001x;
	cfgsin25[0:44] =  45 'b01xx1001000001000001x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx00100001000001000x1x0;
end
endtask
task get_wl_pat147; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx1000000001100000001xx00;
	cfgsin1[0:44] =  45 'b00000001100000010xx0000100000100000010xx00010;
	cfgsin2[0:44] =  45 'b00001100000001xx0000010000010000010xx00010001;
	cfgsin3[0:44] =  45 'b00001000100xx0000010000100000001xx10001000001;
	cfgsin4[0:44] =  45 'b00000100xx1000010000000010001xx00001000001000;
	cfgsin5[0:44] =  45 'b00001xx1000010000010000001xx00000100000100000;
	cfgsin6[0:44] =  45 'b01xx0000010000010000001xx0000100000100000001x;
	cfgsin7[0:44] =  45 'bx0001010000010000001xx1000010000010000100xx01;
// TR
	cfgsin15[0:44] =  45 'b00001000001000010xx1000000100010000010xx00000;
	cfgsin14[0:44] =  45 'b10000010000010xx0001001000001000010xx00000000;
	cfgsin13[0:44] =  45 'b10100000001xx1010000001001000001xx10000100000;
	cfgsin12[0:44] =  45 'b01000001xx0000000001010000001xx00001000000010;
	cfgsin11[0:44] =  45 'b00001xx0000100000100000001xx00010001001000000;
	cfgsin10[0:44] =  45 'b01xx0000000001001000100xx0000000100100000001x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100xx1xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx1100000001000001x01xx10;
	cfgsin18[0:44] =  45 'b10000001000001x01xx1010000100000001x01xx10100;
	cfgsin19[0:44] =  45 'b00001000100x10xx0001000100000100x10xx00000011;
	cfgsin20[0:44] =  45 'b00000010x01xx1010000100000001x01xx10010001000;
	cfgsin21[0:44] =  45 'b00100x01xx1100000100000001x01xx10100000001000;
	cfgsin22[0:44] =  45 'b01x01xx0000001001000010x01xx1010000000001100x;
	cfgsin23[0:44] =  45 'b00xx0010000000010100x01xx0000001001000001x00x;
// BR
	cfgsin31[0:44] =  45 'bx0100000001000001x01xx1010000001000010x01xx00;
	cfgsin30[0:44] =  45 'b10000001000001x01xx1000001000100010x01xx01000;
	cfgsin29[0:44] =  45 'b00000010001x01xx1000001001000010x01xx10010000;
	cfgsin28[0:44] =  45 'b01000010x01xx0010000001000010x01xx00100000000;
	cfgsin27[0:44] =  45 'b10100x01xx1010000000001010x00xx10100000010000;
	cfgsin26[0:44] =  45 'b01x00xx0001000000100001x00xx0010000100000001x;
	cfgsin25[0:44] =  45 'b00xx0001000010000001x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000001xx1xx;
end
endtask
task get_wl_pat146; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000010000100000001xx00;
	cfgsin1[0:44] =  45 'b00000100000001010xx0000000010100000010xx00000;
	cfgsin2[0:44] =  45 'b00010010000001xx0010000001000010010xx10000001;
	cfgsin3[0:44] =  45 'b00100000100xx0100000001100000001xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000000100001xx00001000000100;
	cfgsin5[0:44] =  45 'b00001xx0000010000100000001xx00000100001000000;
	cfgsin6[0:44] =  45 'b10xx0000010000100000001xx0000100000000010001x;
	cfgsin7[0:44] =  45 'bx0000010000100000010xx0000001000100000010xx00;
// TR
	cfgsin15[0:44] =  45 'b00000100001000100xx0000000001100000010xx00001;
	cfgsin14[0:44] =  45 'b00000010000001xx0000000100001000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000001xx0000000100100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000000010000001001xx01100100000010;
	cfgsin11[0:44] =  45 'b00100xx1000000001100000001xx00000000100100000;
	cfgsin10[0:44] =  45 'b01xx0000001000001000100xx0010000001100000001x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000001000001000001xx00000;
	cfgsin18[0:44] =  45 'b01000001000001xx0000100000100000001xx00000010;
	cfgsin19[0:44] =  45 'b00001000100xx0001100000001000010xx01000001000;
	cfgsin20[0:44] =  45 'b00100010xx0000100000001000001xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000000001001000010xx00001000000010001;
	cfgsin22[0:44] =  45 'b00xx0001001000001000010xx0000100000100000001x;
	cfgsin23[0:44] =  45 'bx0010001000000100010xx0001000001000001100xx10;
// BR
	cfgsin31[0:44] =  45 'b00001000000100100xx0000001000001000001xx00011;
	cfgsin30[0:44] =  45 'b00000100000001xx0000001000100000100xx00010010;
	cfgsin29[0:44] =  45 'b00001000100xx0000000001100000010xx00000010000;
	cfgsin28[0:44] =  45 'b01000100xx0001001000001000100xx00101000001000;
	cfgsin27[0:44] =  45 'b00010xx0000000001001000100xx10000010000000101;
	cfgsin26[0:44] =  45 'b00xx1001100000100000001xx1010100000001000001x;
	cfgsin25[0:44] =  45 'bx1000010000000010001xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat145; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx010x001xx00;
	cfgsin1[0:44] =  45 'b00100000xx001x010xx0000000010xx100x100xx00000;
	cfgsin2[0:44] =  45 'b01000xx100x010xx0000000100xx001x100xx00000010;
	cfgsin3[0:44] =  45 'b00xx010x010xx0001000010xx010x100xx0000100000x;
	cfgsin4[0:44] =  45 'bx100x100xx0000010000xx100x010xx1000100000xx10;
	cfgsin5[0:44] =  45 'b0x001xx0000010000xx010x001xx0000001000xx100x1;
	cfgsin6[0:44] =  45 'b00xx0000010000xx010x001xx0000100000xx010x001x;
	cfgsin7[0:44] =  45 'bx1000000010xx010x100xx0010000001xx010x001xx00;
// TR
	cfgsin15[0:44] =  45 'b00000100xx001x001xx0000010000xx001x001xx00000;
	cfgsin14[0:44] =  45 'b00001xx010x100xx0000000001xx010x001xx00001000;
	cfgsin13[0:44] =  45 'b00xx010x001xx0000001000xx100x010xx0000001000x;
	cfgsin12[0:44] =  45 'bx100x010xx0000100000xx010x100xx0000000010xx10;
	cfgsin11[0:44] =  45 'b0x010xx0000100000xx010x010xx0000010000xx010x0;
	cfgsin10[0:44] =  45 'b01xx0010001000xx010x010xx0000100000xx010x001x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000001000010000001xx00000;
	cfgsin18[0:44] =  45 'b01000010000001xx0000100000000001001xx00000100;
	cfgsin19[0:44] =  45 'b00001000100xx1000000010000001100xx00100010000;
	cfgsin20[0:44] =  45 'b10000001xx0000100000100000001xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000010000000001010xx00000010000010001;
	cfgsin22[0:44] =  45 'b00xx0000001000001000100xx0000000010010000001x;
	cfgsin23[0:44] =  45 'bx0000000001001000010xx0000000001010000010xx00;
// BR
	cfgsin31[0:44] =  45 'b10001000001000100xx0000100000010000001xx00000;
	cfgsin30[0:44] =  45 'b10000000001001xx0000001000001000001xx00000000;
	cfgsin29[0:44] =  45 'b01001000100xx0000000100000001010xx00000010000;
	cfgsin28[0:44] =  45 'b01000100xx0000000001001000100xx00000010000001;
	cfgsin27[0:44] =  45 'b00001xx0000001000001000001xx00000000010010001;
	cfgsin26[0:44] =  45 'b00xx0000100000000010010xx0000100000000001001x;
	cfgsin25[0:44] =  45 'bx0010010000100000001xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat144; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx001x001x00000100000xx001x0101x00;
	cfgsin1[0:44] =  45 'b01000001xx010x1001x0000000001xx010x1001x00100;
	cfgsin2[0:44] =  45 'b00001xx001x1001x0000010000xx010x0011x00000010;
	cfgsin3[0:44] =  45 'b00xx100x0101x0010100000xx001x0101x0000100000x;
	cfgsin4[0:44] =  45 'bx100x1000x0000000001xx001x1001x0000000001xx00;
	cfgsin5[0:44] =  45 'b1x1001x0000010000xx001x0101x0000000001xx001x1;
	cfgsin6[0:44] =  45 'b001x0000010000xx001x0101x0000100000xx001x0101;
	cfgsin7[0:44] =  45 'bx0000010000xx001x0101x0000010000xx001x0101x00;
// TR
	cfgsin15[0:44] =  45 'b01001000xx100x0101x0001010000xx001x0101x00000;
	cfgsin14[0:44] =  45 'b10000xx001x0101x1000000001xx010x1001x00001000;
	cfgsin13[0:44] =  45 'b00xx001x0101x0000001000xx100x0101x0001001000x;
	cfgsin12[0:44] =  45 'bx100x0101x0000000001xx001x0101x0000000001xx00;
	cfgsin11[0:44] =  45 'b1x1001x0000100000xx001x0101x1000010000xx001x0;
	cfgsin10[0:44] =  45 'b101x0000001000xx100x0101x0000100000xx001x0101;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000100000xx100x001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000001000xx010x001xx00000;
	cfgsin18[0:44] =  45 'b01000xx100x001xx0000100000xx100x001xx00000000;
	cfgsin19[0:44] =  45 'b10xx100x001xx0000000100xx001x001xx0000000010x;
	cfgsin20[0:44] =  45 'bx100x100xx0000100000xx010x001xx0000100000xx10;
	cfgsin21[0:44] =  45 'b0x100xx0000001000xx001x010xx0000001000xx010x0;
	cfgsin22[0:44] =  45 'b10xx0000001000xx010x001xx0000001000xx001x100x;
	cfgsin23[0:44] =  45 'bx1000010000xx100x100xx0000000010xx100x001xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000xx010x100xx0000001000xx001x001xx00001;
	cfgsin30[0:44] =  45 'b00000xx010x010xx0000000100xx010x010xx00000010;
	cfgsin29[0:44] =  45 'b00xx100x010xx0000000010xx100x100xx0000001000x;
	cfgsin28[0:44] =  45 'bx100x100xx0000001000xx001x010xx0000010000xx00;
	cfgsin27[0:44] =  45 'b1x100xx0000001000xx001x010xx0000001000xx010x1;
	cfgsin26[0:44] =  45 'b00xx0000001000xx100x100xx0000100000xx010x001x;
	cfgsin25[0:44] =  45 'bx0000010000xx100x001xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
end
endtask
task get_wl_pat143; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000001000000000000000000110001;
	cfgsin2[0:44] =  45 'b000000000000000000011000000000000000000000000;
	cfgsin3[0:44] =  45 'b001000000010000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000001000100100010000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000110000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000001000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000100001000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000001000010000000001000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000010000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000001000xx001x0101x00000;
	cfgsin18[0:44] =  45 'b00001xx001x1001x0000000001xx001x1001x00000010;
	cfgsin19[0:44] =  45 'b00xx100x0011x0000100000xx010x0011x1000000001x;
	cfgsin20[0:44] =  45 'bx010x1001x0000100000xx001x0101x0000100000xx10;
	cfgsin21[0:44] =  45 'b0x1000x0000000001xx010x1001x0000001000xx100x0;
	cfgsin22[0:44] =  45 'b011x0010001000xx100x0101x0001100000xx001x0101;
	cfgsin23[0:44] =  45 'bx0000001000xx100x0101x0010000001xx010x1001x00;
// BR
	cfgsin31[0:44] =  45 'b10001000xx100x0011x0000001000xx001x0101x00000;
	cfgsin30[0:44] =  45 'b00001xx001x1001x0000001000xx100x0011x00000010;
	cfgsin29[0:44] =  45 'b00xx100x0011x0010000001xx010x1001x0001001000x;
	cfgsin28[0:44] =  45 'bx100x0101x0000001000xx100x0011x0000100000xx01;
	cfgsin27[0:44] =  45 'b0x0011x1000001000xx100x0011x1000001000xx100x0;
	cfgsin26[0:44] =  45 'b101x0000000001xx001x1001x0000100000xx001x0101;
	cfgsin25[0:44] =  45 'bx0000000001xx001x1001x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx100x001x0000;
end
endtask
task get_wl_pat142; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010010000000100000000000;
	cfgsin1[0:44] =  45 'b000100000000000000000010100000100000000000000;
	cfgsin2[0:44] =  45 'b000000000000000110000001000100000000010011000;
	cfgsin3[0:44] =  45 'b100000000000110000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000010000000010000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000100000000000000010010000000000000000;
// TR
	cfgsin15[0:44] =  45 'b001000100000100000000000100000000000000000000;
	cfgsin14[0:44] =  45 'b010000000000000000000100000000000000001000000;
	cfgsin13[0:44] =  45 'b000000000000000010000100000010000000000000000;
	cfgsin12[0:44] =  45 'b010000000000000000000000000000001000000000000;
	cfgsin11[0:44] =  45 'b000000001000000000000000000000000010000000000;
	cfgsin10[0:44] =  45 'b000010000001000000000000010000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000010000000001000001000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000001000000000100000000001000000000000000;
	cfgsin21[0:44] =  45 'b000000000000001000010000000000000001001000000;
	cfgsin22[0:44] =  45 'b101000000000000000000001000000100000000000001;
	cfgsin23[0:44] =  45 'b000000000001000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b001000000100000000000000001000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000100000011000000100000000000101001;
	cfgsin29[0:44] =  45 'b001000000000100000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000001000000000000000010000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000100000;
	cfgsin26[0:44] =  45 'b000001000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat141; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001100xx010x0110x0001001101x;
	cfgsin1[0:44] =  45 'bx000x0110x0110001100xx000x0101x0010010000xx00;
	cfgsin2[0:44] =  45 'b0x0101x0101010000xx000x0001x0010010100xx000x0;
	cfgsin3[0:44] =  45 'b000x0101000000xx010x0110x0110001101xx110x0110;
	cfgsin4[0:44] =  45 'bx0110001100xx100x0010x0010101000xx110x0100x01;
	cfgsin5[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0101x01100;
	cfgsin6[0:44] =  45 'b10101xx110x0110x0110001101xx110x0000x01100011;
	cfgsin7[0:44] =  45 'b01xx110x0010x0110001101xx001x0010x0101010101x;
// TR
	cfgsin15[0:44] =  45 'bx000x0010x0100001101xx000x0100x0101010101xx10;
	cfgsin14[0:44] =  45 'b1x0001x1001010100xx000x0010x0110001100xx110x1;
	cfgsin13[0:44] =  45 'b010x0110001101xx001x0001x0100010101xx010x1010;
	cfgsin12[0:44] =  45 'bx0010001100xx100x1010x0100001100xx110x1010x01;
	cfgsin11[0:44] =  45 'b10001100xx101x0110x0110001100xx110x0010x01100;
	cfgsin10[0:44] =  45 'b01100xx110x0010x0100001100xx110x0110x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000010000000010000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000001000000100000000000000;
	cfgsin20[0:44] =  45 'b000000000010000000000010000000000000000000000;
	cfgsin21[0:44] =  45 'b000000100000000001000000100000010000000000000;
	cfgsin22[0:44] =  45 'b000000000000100000000000000000000010000000000;
	cfgsin23[0:44] =  45 'b000010000000000010000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000001000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b000000000000000001000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000010000010000000000010000000010000000000;
	cfgsin28[0:44] =  45 'b000100000001000000000000000000000010001000000;
	cfgsin27[0:44] =  45 'b000000000010000010100000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000100000000000010000001000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat140; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x011000110000000x0110x10100010100;
	cfgsin1[0:44] =  45 'b0000x1010x011001010000001x0000x00000001000000;
	cfgsin2[0:44] =  45 'b0x0101x000000001000000x0100x010000110000001x0;
	cfgsin3[0:44] =  45 'b000x011000110000000x0010x010000010000010x0110;
	cfgsin4[0:44] =  45 'bx011000010000001x0110x011000100000010x0110x01;
	cfgsin5[0:44] =  45 'b1000010000010x0110x011000110000010x0110x01100;
	cfgsin6[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin7[0:44] =  45 'b0000010x0000x101000110000000x0000x10000011000;
// TR
	cfgsin15[0:44] =  45 'b0010x0000x010000110000010x0110x01100011000011;
	cfgsin14[0:44] =  45 'b0x0100x001000110000110x0100x000000110000010x1;
	cfgsin13[0:44] =  45 'b001x010001010000010x0010x010000100000010x0101;
	cfgsin12[0:44] =  45 'bx011000110000000x1010x011001010000000x0000x00;
	cfgsin11[0:44] =  45 'b1000110000010x1000x000001010000010x0001x01000;
	cfgsin10[0:44] =  45 'b0110000010x0100x011000010000010x0110x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0100x0110000101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx110x0101x0110010101xx110x0;
	cfgsin19[0:44] =  45 'b101x0010010100xx110x0000x0110000100xx110x0110;
	cfgsin20[0:44] =  45 'bx0110001000xx110x0010x0010001001xx110x0110x01;
	cfgsin21[0:44] =  45 'b10010001xx110x0000x0001000101xx010x0000x01010;
	cfgsin22[0:44] =  45 'b00001xx001x0010x0110001001xx000x1000x01100010;
	cfgsin23[0:44] =  45 'b01xx001x0100x1000001011xx001x1010x0101001101x;
// BR
	cfgsin31[0:44] =  45 'bx000x0000x0110001101xx110x0010x0110001101xx11;
	cfgsin30[0:44] =  45 'b0x1010x1010000010xx000x1000x0110001101xx000x0;
	cfgsin29[0:44] =  45 'b000x0100010000xx001x0101x0001010100xx010x1010;
	cfgsin28[0:44] =  45 'bx0100001100xx110x1000x0110001101xx000x0010x01;
	cfgsin27[0:44] =  45 'b01010100xx010x0100x0010001100xx110x0100x01100;
	cfgsin26[0:44] =  45 'b01100xx110x0010x0110001100xx110x0010x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
end
endtask
task get_wl_pat139; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000100000000000000000000001010000000000000000;
	cfgsin2[0:44] =  45 'b100000000010000000000100010000100000000000000;
	cfgsin3[0:44] =  45 'b100000000000000000101000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000001000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000010000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000110000000000000001000100000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000110000100000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000001000000001000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000100000000000010000000010001000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000100110010;
	cfgsin11[0:44] =  45 'b000000000000000010001100000000000010000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000010000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0110x01100001000001;
	cfgsin18[0:44] =  45 'b0x0010x011000110000001x0000x011000100000010x0;
	cfgsin19[0:44] =  45 'b100x010000110000010x0110x011000110000000x0000;
	cfgsin20[0:44] =  45 'bx000000110000010x0110x011000110000010x1010x01;
	cfgsin21[0:44] =  45 'b0100110000001x0010x011000100000001x0100x00100;
	cfgsin22[0:44] =  45 'b1010000000x0000x000000010000010x0110x01010011;
	cfgsin23[0:44] =  45 'b0000010x0010x011001010000000x0000x00000101000;
// BR
	cfgsin31[0:44] =  45 'b0010x0000x001000010000000x1010x00000101000000;
	cfgsin30[0:44] =  45 'b0x0010x010000010010001x0010x010100001000000x0;
	cfgsin29[0:44] =  45 'b000x001000010000010x0000x000000100000010x0100;
	cfgsin28[0:44] =  45 'bx010100110000000x0100x010000110000000x0000x01;
	cfgsin27[0:44] =  45 'b0100100000010x0010x011000110000001x0101x01100;
	cfgsin26[0:44] =  45 'b1010000000x0100x010000100000001x0010x01000010;
	cfgsin25[0:44] =  45 'b0000001x0010x010000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat138; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000001010100000000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000001000000000001100010000010;
	cfgsin2[0:44] =  45 'b000000001000100001000000000000000000000000000;
	cfgsin3[0:44] =  45 'b001000000000000000000000000100010000000000000;
	cfgsin4[0:44] =  45 'b000000010000000000000000000000100000000000000;
	cfgsin5[0:44] =  45 'b000100000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000010000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000100010000010;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000010000000000000000000000000;
	cfgsin14[0:44] =  45 'b000001000000000000000000001010010000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000001000100000000000000010000000000000;
	cfgsin11[0:44] =  45 'b000000010000000000000000000001000000000000001;
	cfgsin10[0:44] =  45 'b000000000000000100000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b001000000000000000000000000000000001000000000;
	cfgsin19[0:44] =  45 'b010000010000001000000000000000000000000001001;
	cfgsin20[0:44] =  45 'b010010000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000000000000001000000;
	cfgsin22[0:44] =  45 'b000000000101000100000100000000000000000000000;
	cfgsin23[0:44] =  45 'b000000001000000000000000000101000001010000010;
// BR
	cfgsin31[0:44] =  45 'b000000000001000010000000000000001000000000000;
	cfgsin30[0:44] =  45 'b100100000000010000000000100000000010000000001;
	cfgsin29[0:44] =  45 'b000001000000000000001010001000000101000000010;
	cfgsin28[0:44] =  45 'b000000000000000000001000010000000000100100000;
	cfgsin27[0:44] =  45 'b000001000000001000000000000001000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000110000000000000000000;
	cfgsin25[0:44] =  45 'b100000000100000100000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat137; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx0010000000010010xx1x;
	cfgsin1[0:44] =  45 'bx1001000010000100xx0xx1010000001000010xx1xx01;
	cfgsin2[0:44] =  45 'b00000010000010xx0xx1100000010000010xx1xx10010;
	cfgsin3[0:44] =  45 'b00001000100xx1xx1010000100000100xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1010000001000010xx0xx10100000010;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000100000100xx0xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1010000100000100xx0xx1010000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1010000010000100xx1xx1010000000100010xx0x;
// TR
	cfgsin15[0:44] =  45 'bx1100000000100010xx0xx1010000001000100xx1xx00;
	cfgsin14[0:44] =  45 'b00010010000100xx0xx0010000001000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00100000010xx1xx1001000001000010xx1xx10100001;
	cfgsin12[0:44] =  45 'b00000100xx0xx1000010100000100xx0xx10010000010;
	cfgsin11[0:44] =  45 'b00100xx0xx1100000010000100xx0xx11000000010001;
	cfgsin10[0:44] =  45 'b00xx1xx1001000001000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000100000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000101000000000010000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000001000100000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000001000001000000000000100000000000001000;
	cfgsin22[0:44] =  45 'b000000000000001000100000000000000000000000000;
	cfgsin23[0:44] =  45 'b010000000000000000000000000000001000000000000;
// BR
	cfgsin31[0:44] =  45 'b010001001000000000001001000000000001000010000;
	cfgsin30[0:44] =  45 'b000000000001000000010000000000000000000000010;
	cfgsin29[0:44] =  45 'b001000000010000000000000000100000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000100000000000000000000000000100;
	cfgsin27[0:44] =  45 'b000000001000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000001000010001000010000000000001000000010000;
	cfgsin25[0:44] =  45 'b000000000000000000000001000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat136; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000001000100xx0xx1000010001000100xx1x;
	cfgsin1[0:44] =  45 'bx0100000001000100xx0xx0100000000010001xx0xx11;
	cfgsin2[0:44] =  45 'b00000000010010xx0xx1001000000100010xx0xx11000;
	cfgsin3[0:44] =  45 'b00001000001xx1xx1010000100000100xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx0100000001000001xx1xx10001000010;
	cfgsin5[0:44] =  45 'b00001xx1xx1010000100000100xx1xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin7[0:44] =  45 'bx0xx1100000100000100xx0xx1001000001000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1100000001000100xx1xx1100000001000001xx1xx00;
	cfgsin14[0:44] =  45 'b10000001000010xx0xx0100000001000001xx0xx10010;
	cfgsin13[0:44] =  45 'b00010000010xx1xx1010000001000100xx0xx11000000;
	cfgsin12[0:44] =  45 'b00100100xx0xx0010000100000010xx1xx10100000010;
	cfgsin11[0:44] =  45 'b00001xx1xx0001000000100100xx1xx00100000000100;
	cfgsin10[0:44] =  45 'b01xx1xx1010000001000001xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000001000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000001000010xx1xx1001000001000010xx0xx10001;
	cfgsin19[0:44] =  45 'b00001000100xx0xx1010000000010100xx0xx10010000;
	cfgsin20[0:44] =  45 'b00010100xx1xx1001000001000100xx1xx10100001000;
	cfgsin21[0:44] =  45 'b00100xx0xx1010000001000010xx1xx10100000000011;
	cfgsin22[0:44] =  45 'b00xx1xx1100000010000010xx1xx1010000001000100x;
	cfgsin23[0:44] =  45 'bx0xx1001000001000100xx1xx1010000001000010xx0x;
// BR
	cfgsin31[0:44] =  45 'bx0010000001000100xx0xx1100000100000100xx0xx10;
	cfgsin30[0:44] =  45 'b00100010000010xx0xx0001000000001010xx1xx10001;
	cfgsin29[0:44] =  45 'b00100000010xx1xx1010000100000100xx0xx10100000;
	cfgsin28[0:44] =  45 'b01000100xx1xx1010000010000100xx1xx11000000010;
	cfgsin27[0:44] =  45 'b00100xx0xx1010000001000100xx0xx10100000010001;
	cfgsin26[0:44] =  45 'b00xx0xx1010000000010100xx0xx1100000001000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000001000100xx0xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat135; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000001000100x01000100000000001001xx00;
	cfgsin1[0:44] =  45 'b01001000000100100xx0101000010001000100xx01001;
	cfgsin2[0:44] =  45 'b00000000100100xx0100000010010000100xx10000100;
	cfgsin3[0:44] =  45 'b00001000010xx0000010000100000100xx00000100001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000001000100xx00001000000010;
	cfgsin5[0:44] =  45 'b00010xx0000010000100000100xx00000100001000001;
	cfgsin6[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin7[0:44] =  45 'bx0000010000010000100xx1000100000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000001000001xx0000010000001000001xx00001;
	cfgsin14[0:44] =  45 'b00000010000010xx1000010000001000001xx10001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000001000001xx10000100001;
	cfgsin12[0:44] =  45 'b00000100xx0101100000100000010xx00001000000010;
	cfgsin11[0:44] =  45 'b00001xx0001010000010000100xx00000010000000011;
	cfgsin10[0:44] =  45 'b00xx0000100000001000001xx0000010000100000100x;
	cfgsin9[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx0100000001000001xx1xx11;
	cfgsin18[0:44] =  45 'b00000001000001xx1xx1010000001000001xx0xx10001;
	cfgsin19[0:44] =  45 'b00001000001xx0xx1100000001000010xx0xx10000100;
	cfgsin20[0:44] =  45 'b01000010xx1xx1010000001000001xx0xx00100001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000001000001xx1xx00010000010000;
	cfgsin22[0:44] =  45 'b01xx1xx0000100100000100xx0xx0100000001000001x;
	cfgsin23[0:44] =  45 'bx0xx0100000001000001xx0xx0100000001000001xx0x;
// BR
	cfgsin31[0:44] =  45 'bx0000001000100001xx1xx0000001000001100xx1xx01;
	cfgsin30[0:44] =  45 'b00000000001100xx0xx0100000000100001xx0xx10010;
	cfgsin29[0:44] =  45 'b00010000010xx0xx1100000100000100xx0xx01000001;
	cfgsin28[0:44] =  45 'b00000001xx1xx1001000010000010xx1xx10100000000;
	cfgsin27[0:44] =  45 'b01001xx1xx1100000001000001xx0xx11000000010000;
	cfgsin26[0:44] =  45 'b01xx0xx1100000000100010xx0xx1100000000010001x;
	cfgsin25[0:44] =  45 'bx0xx1000100001000001xx0xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
end
endtask
task get_wl_pat134; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx0000100000001000001xx00;
	cfgsin1[0:44] =  45 'b00000010100000010xx0000000010100000001xx00000;
	cfgsin2[0:44] =  45 'b00001100000001xx0000000010100000001xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0010001000100000001xx00000010001000;
	cfgsin5[0:44] =  45 'b00001xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0100001000010000001xx0000000010001000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000001xx0000001000001000001xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0010001000001000100xx00000001;
	cfgsin13[0:44] =  45 'b00001000001xx0000001000001000010xx00000010000;
	cfgsin12[0:44] =  45 'b01000001xx0000000100001000010xx00000010000010;
	cfgsin11[0:44] =  45 'b00010xx0000000010000001001xx00100010000000010;
	cfgsin10[0:44] =  45 'b10xx0000001000001000001xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x00000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0001010000001000010xx00000;
	cfgsin18[0:44] =  45 'b10000001000100xx0000100000001000100xx01001000;
	cfgsin19[0:44] =  45 'b00001000001xx1000000010001000001xx10001000000;
	cfgsin20[0:44] =  45 'b01000001xx0000100000001000001xx00100100001000;
	cfgsin21[0:44] =  45 'b00100xx0000100000001000100xx00001000001000000;
	cfgsin22[0:44] =  45 'b10xx0010010000000001010xx1000010000001000001x;
	cfgsin23[0:44] =  45 'bx0001010000001000001xx0001001000001000100xx01;
// BR
	cfgsin31[0:44] =  45 'b10100000001000001xx0010000010000010100xx00101;
	cfgsin30[0:44] =  45 'b00000100000010xx0010000100000100100xx00001000;
	cfgsin29[0:44] =  45 'b00000010100xx0000010000100000100xx10000000010;
	cfgsin28[0:44] =  45 'b01000001xx0000100000010000010xx00000100000010;
	cfgsin27[0:44] =  45 'b00001xx0000010000001000001xx00000100000010000;
	cfgsin26[0:44] =  45 'b01xx0100001000001000001xx0100100000001000001x;
	cfgsin25[0:44] =  45 'bx1000100000001000001xx0100010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
end
endtask
task get_wl_pat133; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100x00000001000001000001xx00;
	cfgsin1[0:44] =  45 'b00001000010000100xx0000100000010000010xx00001;
	cfgsin2[0:44] =  45 'b00000010000100xx0000001000000001010xx00000000;
	cfgsin3[0:44] =  45 'b10001000010xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000001000001xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000010000010xx0000010000001000010xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000000001010xx0000001000001000001xx00010;
	cfgsin14[0:44] =  45 'b01000010000001xx0000000010001000001xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000001000001xx00000010000;
	cfgsin12[0:44] =  45 'b00010100xx0000000100000010010xx00001000000010;
	cfgsin11[0:44] =  45 'b00100xx0000000100010000100xx00000010000000010;
	cfgsin10[0:44] =  45 'b01xx0000001000001000001xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000000010001000001xx00000;
	cfgsin18[0:44] =  45 'b01000001000001xx0000001000001000001xx00000010;
	cfgsin19[0:44] =  45 'b00001000001xx0000000010001000001xx00000000100;
	cfgsin20[0:44] =  45 'b01000001xx0000000010001000001xx00000000101000;
	cfgsin21[0:44] =  45 'b00100xx0000000100100000010xx00000010001000001;
	cfgsin22[0:44] =  45 'b00xx0000010000000001100xx0000001000001000010x;
	cfgsin23[0:44] =  45 'bx0100001000001000010xx1000001000001000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000001000001xx0000010000010000100xx00000;
	cfgsin30[0:44] =  45 'b01000000100001xx0000000100000010100xx00000001;
	cfgsin29[0:44] =  45 'b00100000010xx1000001000100000100xx00000001000;
	cfgsin28[0:44] =  45 'b01000001xx0000001000100000010xx00000010000010;
	cfgsin27[0:44] =  45 'b00010xx0000000100001000100xx00000010000010000;
	cfgsin26[0:44] =  45 'b01xx0000000100001000010xx0000001000001000010x;
	cfgsin25[0:44] =  45 'bx0000001000001000001xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
end
endtask
task get_wl_pat132; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000100x00000010000001000010xx00;
	cfgsin1[0:44] =  45 'b00010000000010001xx0000001000001000100xx00000;
	cfgsin2[0:44] =  45 'b10000001000010xx0000010000000010100xx00000010;
	cfgsin3[0:44] =  45 'b00010000001xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000001000001xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000010000100xx0000001000001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b10001000001000010xx0000001000001000001xx00000;
	cfgsin14[0:44] =  45 'b01000000001010xx0000001000000100001xx00000010;
	cfgsin13[0:44] =  45 'b00000001010xx0000001000001000001xx00000001000;
	cfgsin12[0:44] =  45 'b10000010xx0000001000000001010xx00000000010000;
	cfgsin11[0:44] =  45 'b10001xx0000001000100000010xx00000100000001001;
	cfgsin10[0:44] =  45 'b00xx0000001000001000010xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000001000001xx00000;
	cfgsin18[0:44] =  45 'b00010001000001xx0000001000001000001xx00000010;
	cfgsin19[0:44] =  45 'b00001000001xx0000001000001000001xx00000010000;
	cfgsin20[0:44] =  45 'b01000001xx0000001000001000001xx10000000101000;
	cfgsin21[0:44] =  45 'b00100xx0000000010001000001xx00100001001000000;
	cfgsin22[0:44] =  45 'b01xx0000000100000001010xx0010001000001000001x;
	cfgsin23[0:44] =  45 'bx0000000100001000001xx0000000100001000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00000100001000100xx0000000100000001001xx00000;
	cfgsin30[0:44] =  45 'b00100010000010xx1000000100100000010xx10000000;
	cfgsin29[0:44] =  45 'b10001000001xx0000000010100000100xx00100010000;
	cfgsin28[0:44] =  45 'b01000100xx0000001000010000010xx00000010000010;
	cfgsin27[0:44] =  45 'b00001xx0000001000001000001xx01000010000010000;
	cfgsin26[0:44] =  45 'b01xx0000000001001000100xx0000001000001000001x;
	cfgsin25[0:44] =  45 'bx0000000100001000001xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
end
endtask
task get_wl_pat131; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100xx1000001000001000010xx00;
	cfgsin1[0:44] =  45 'b00010000010000010xx0000000100001000100xx10001;
	cfgsin2[0:44] =  45 'b00000000001100xx0000100000010000001xx00000001;
	cfgsin3[0:44] =  45 'b00001000100xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx1000001000001000100xx00000010000010;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000001000100xx0000000100001000001xx00;
// TR
	cfgsin15[0:44] =  45 'b00000100000001100xx0000001000001000100xx00001;
	cfgsin14[0:44] =  45 'b00000000100100xx0000100000001000100xx00000100;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000001000010xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010000010;
	cfgsin11[0:44] =  45 'b00100xx0000100000000010100xx00000100000000100;
	cfgsin10[0:44] =  45 'b10xx0000001000001000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000000010001000001xx00000;
	cfgsin18[0:44] =  45 'b01000001000001xx0000001000001000100xx00000010;
	cfgsin19[0:44] =  45 'b00001000001xx0000010000001000001xx00000100000;
	cfgsin20[0:44] =  45 'b01000001xx0000001000001000001xx00000000101000;
	cfgsin21[0:44] =  45 'b00100xx0000001000001000001xx00100000100100000;
	cfgsin22[0:44] =  45 'b10xx0000001000001000001xx0000001000001000001x;
	cfgsin23[0:44] =  45 'bx0001000100100000001xx0000000001000100001xx00;
// BR
	cfgsin31[0:44] =  45 'b00000100000001010xx0000001000001000010xx00000;
	cfgsin30[0:44] =  45 'b00100001000010xx0000010000001000010xx00001000;
	cfgsin29[0:44] =  45 'b00000100100xx0000001000001000100xx00010010000;
	cfgsin28[0:44] =  45 'b01000010xx0000001000000001100xx00000010000010;
	cfgsin27[0:44] =  45 'b00100xx0000000010000010010xx00000010000010000;
	cfgsin26[0:44] =  45 'b10xx0000010000010000001xx1001000010000001100x;
	cfgsin25[0:44] =  45 'bx0000001000001000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
end
endtask
task get_wl_pat130; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx0000100000100000001xx00;
	cfgsin1[0:44] =  45 'b00000001010000100xx1000000001010000001xx00010;
	cfgsin2[0:44] =  45 'b00001000001001xx1010010000000001010xx10000000;
	cfgsin3[0:44] =  45 'b10001000001xx0000001000100000100xx10000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000001000001xx00000010000010;
	cfgsin5[0:44] =  45 'b00001xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0010001000010000100xx0010001000001000010xx10;
// TR
	cfgsin15[0:44] =  45 'b00001000000001001xx0000100000001000001xx00000;
	cfgsin14[0:44] =  45 'b01000010000010xx0000100000001000001xx10000010;
	cfgsin13[0:44] =  45 'b00000100010xx0000000100001000100xx00010010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000010xx10000010000010;
	cfgsin11[0:44] =  45 'b00001xx0001000001000001100xx00001000000000011;
	cfgsin10[0:44] =  45 'b00xx1000001000001000001xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000001000100xx00000;
	cfgsin18[0:44] =  45 'b01000001000100xx0000000100001000100xx00000010;
	cfgsin19[0:44] =  45 'b00001000100xx0000000010001000010xx00000010000;
	cfgsin20[0:44] =  45 'b01000010xx0000001000001000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000000010001000100xx00000001000000100;
	cfgsin22[0:44] =  45 'b10xx0000001000000010001xx0000001000001000100x;
	cfgsin23[0:44] =  45 'bx1000000100001000100xx0000010000001000010xx00;
// BR
	cfgsin31[0:44] =  45 'b00000100001000100xx0000000100000001010xx00000;
	cfgsin30[0:44] =  45 'b10000001000100xx0000000100010000100xx00101000;
	cfgsin29[0:44] =  45 'b00000001100xx0000001000100000100xx00000010000;
	cfgsin28[0:44] =  45 'b01000100xx0000001000010000100xx00010010000000;
	cfgsin27[0:44] =  45 'b01100xx0000001000001000100xx00000001000010001;
	cfgsin26[0:44] =  45 'b00xx0000001000001000010xx0000000100001000100x;
	cfgsin25[0:44] =  45 'bx0000001000001000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
end
endtask
task get_wl_pat129; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx1000010010000100xx1x;
	cfgsin1[0:44] =  45 'bx1100000010000001xx0xx1001000010000001xx0xx00;
	cfgsin2[0:44] =  45 'b01000001000010xx0xx0000010001000100xx0xx10010;
	cfgsin3[0:44] =  45 'b00000010001xx1xx1001000100000100xx0xx10010001;
	cfgsin4[0:44] =  45 'b00000100xx0xx1000010010000001xx1xx10010000000;
	cfgsin5[0:44] =  45 'b01001xx1xx1001000100000100xx1xx10010001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin7[0:44] =  45 'bx1xx0001000100000100xx1xx0100000010000001xx0x;
// TR
	cfgsin15[0:44] =  45 'bx0100000100000010xx1xx1000010010000001xx1xx10;
	cfgsin14[0:44] =  45 'b10000001000010xx1xx1000010010000001xx0xx10010;
	cfgsin13[0:44] =  45 'b00001000010xx1xx1010000010000001xx1xx00001000;
	cfgsin12[0:44] =  45 'b10000100xx1xx1001000001000010xx0xx10010000100;
	cfgsin11[0:44] =  45 'b00001xx1xx0000100100000100xx1xx10001000100000;
	cfgsin10[0:44] =  45 'b01xx0xx1001000100000001xx1xx1001000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000001000001xx00000;
	cfgsin18[0:44] =  45 'b01000001000001xx0000000100001000001xx00001000;
	cfgsin19[0:44] =  45 'b00001000001xx0000000100001000100xx00000010000;
	cfgsin20[0:44] =  45 'b01000100xx0000001000001000001xx00010010001000;
	cfgsin21[0:44] =  45 'b00100xx0000000100001000001xx00000001001000001;
	cfgsin22[0:44] =  45 'b00xx0001000100000001010xx1010001000001000001x;
	cfgsin23[0:44] =  45 'bx0000000100001000001xx1001001000001000001xx10;
// BR
	cfgsin31[0:44] =  45 'b00000010001000001xx0000001000000001100xx10010;
	cfgsin30[0:44] =  45 'b00100010000001xx0101000100000100010xx01000010;
	cfgsin29[0:44] =  45 'b00100000001xx0100000100100000100xx00000001000;
	cfgsin28[0:44] =  45 'b01000001xx0000001000001000010xx00000000100000;
	cfgsin27[0:44] =  45 'b01001xx0000010000001000001xx00000010000010000;
	cfgsin26[0:44] =  45 'b01xx0001000100001000100xx0000000100001000001x;
	cfgsin25[0:44] =  45 'bx0000001000001000001xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
end
endtask
task get_wl_pat128; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000001x00xx0100000000001100x10x;
	cfgsin1[0:44] =  45 'bx0010000000010010x00xx1010000000001100x00xx00;
	cfgsin2[0:44] =  45 'b01000001000100x00xx0000010001000010x01xx10000;
	cfgsin3[0:44] =  45 'b10000100100x01xx1100000100000100x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1010000010000100x01xx10100001000;
	cfgsin5[0:44] =  45 'b00010x00xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x00xx1010000100000100x01xx1100000100000100x;
	cfgsin7[0:44] =  45 'b01xx1010000001000100x01xx1000010000100100x00x;
// TR
	cfgsin15[0:44] =  45 'bx1000010001000100x00xx1100000010000010x00xx10;
	cfgsin14[0:44] =  45 'b00010001000001x00xx1000010010000100x01xx10000;
	cfgsin13[0:44] =  45 'b10001000100x00xx1000010000100001x01xx10100000;
	cfgsin12[0:44] =  45 'b00001010x00xx1001000001000100x00xx10010000000;
	cfgsin11[0:44] =  45 'b10001x00xx1010000000010001x10xx10100001000000;
	cfgsin10[0:44] =  45 'b01x01xx1010000001000001x11xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100x01xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000001xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000001xx1xx1001000010000001xx1xx10010;
	cfgsin19[0:44] =  45 'b00100000001xx1xx1001000001000001xx1xx10010000;
	cfgsin20[0:44] =  45 'b10000001xx1xx1001000010000001xx1xx00010001000;
	cfgsin21[0:44] =  45 'b00100xx1xx1001000100000001xx1xx00010000010000;
	cfgsin22[0:44] =  45 'b10xx1xx0100000001000001xx0xx0000100010000001x;
	cfgsin23[0:44] =  45 'bx0xx0000100001000001xx0xx0000100100000001xx0x;
// BR
	cfgsin31[0:44] =  45 'bx1001000100000001xx1xx1000100010000001xx0xx00;
	cfgsin30[0:44] =  45 'b00100001000010xx0xx0000001000100100xx0xx00001;
	cfgsin29[0:44] =  45 'b00001000010xx0xx1001000100000100xx1xx00010001;
	cfgsin28[0:44] =  45 'b00000001xx1xx1001000001000010xx1xx00000101000;
	cfgsin27[0:44] =  45 'b00001xx1xx1001000100000001xx1xx10001001000000;
	cfgsin26[0:44] =  45 'b01xx1xx0010000000010001xx0xx0010000000100001x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000001xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat127; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx1001100000010000010x000;
	cfgsin1[0:44] =  45 'b00100000010000100x00100000001010000010x000010;
	cfgsin2[0:44] =  45 'b10000000100001x00100010000000001001x000001000;
	cfgsin3[0:44] =  45 'b00010000010x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000010000010000001x000000100001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin6[0:44] =  45 'b00x01000010000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000000010100000100x00000010000000100010x100;
// TR
	cfgsin15[0:44] =  45 'b00010000001000001x00100100000010000100x000000;
	cfgsin14[0:44] =  45 'b10000001000100x11000010000010000010x000000100;
	cfgsin13[0:44] =  45 'b00001000010x10000010000010000001x000000010000;
	cfgsin12[0:44] =  45 'b10000100x00000010000001000010x000000000100100;
	cfgsin11[0:44] =  45 'b00001x10100100000100000100x001001000000100001;
	cfgsin10[0:44] =  45 'b00x10000000010100000001x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000100x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000010000010x01xx10;
	cfgsin18[0:44] =  45 'b00100100000010x00xx1010000010000100x00xx10100;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000010x01xx1010000010000100x00xx10100001000;
	cfgsin21[0:44] =  45 'b00100x00xx1000010000100010x00xx10000101000000;
	cfgsin22[0:44] =  45 'b10x10xx1100000001000001x00xx1000010100000010x;
	cfgsin23[0:44] =  45 'b00xx1010000100000010x00xx1001000100000100x00x;
// BR
	cfgsin31[0:44] =  45 'bx0000010000001100x10xx0010000001000010x10xx10;
	cfgsin30[0:44] =  45 'b00100000001001x01xx0010000000001001x00xx00010;
	cfgsin29[0:44] =  45 'b00100000001x00xx1010000100000100x01xx10001000;
	cfgsin28[0:44] =  45 'b00001001x01xx1010000001000100x01xx10100000100;
	cfgsin27[0:44] =  45 'b00001x10xx1010000000100001x00xx10010000000010;
	cfgsin26[0:44] =  45 'b10x00xx1100000000100100x00xx1100000010000100x;
	cfgsin25[0:44] =  45 'b00xx1001000100000010x00xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000001x01x0;
end
endtask
task get_wl_pat126; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000001xx0000010000100000001x101;
	cfgsin1[0:44] =  45 'b01001000000001001x10000010000100000001x100000;
	cfgsin2[0:44] =  45 'b00010001000010x10010100000100000100x100000100;
	cfgsin3[0:44] =  45 'b00100000001x10000100000100000100x100001000001;
	cfgsin4[0:44] =  45 'b00000100x10000010000100000010x100000100000100;
	cfgsin5[0:44] =  45 'b00001x10000010000100000100x100000100001000001;
	cfgsin6[0:44] =  45 'b00x10000010000100000100x10000100000100000100x;
	cfgsin7[0:44] =  45 'b10000000100100000100x10000010000100000001x100;
// TR
	cfgsin15[0:44] =  45 'b00001000001000010x10000010000100000001x100000;
	cfgsin14[0:44] =  45 'b01000001000010x10000010000100000001x100001000;
	cfgsin13[0:44] =  45 'b00100000001x10000010000010000001x100001000000;
	cfgsin12[0:44] =  45 'b00001001x10100100000100000001x100000100000100;
	cfgsin11[0:44] =  45 'b00001x10000010000001000010x100000000100010000;
	cfgsin10[0:44] =  45 'b10x10000010000100000001x10000010000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000010000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000010000010000010x010000100;
	cfgsin19[0:44] =  45 'b00100000010x00000000010100000010x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000010000010x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00100010000100000100x000000100000010000;
	cfgsin22[0:44] =  45 'b10x11000010000000100100x00100001000010000100x;
	cfgsin23[0:44] =  45 'b01000010000001000100x00000010000100000010x000;
// BR
	cfgsin31[0:44] =  45 'b01000100100000010x00000001000010000001x010000;
	cfgsin30[0:44] =  45 'b10000001000100x00001100000001000010x000100100;
	cfgsin29[0:44] =  45 'b00000010100x10000010000100000100x000000100001;
	cfgsin28[0:44] =  45 'b00000001x10000010000001000001x000000000101000;
	cfgsin27[0:44] =  45 'b00001x00000001000100000001x000000100001000001;
	cfgsin26[0:44] =  45 'b00x00000001000010000010x10000000010000100010x;
	cfgsin25[0:44] =  45 'b00100100000100000100x00100100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001010000100000100xx00x;
end
endtask
task get_wl_pat125; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000000001100x000;
	cfgsin1[0:44] =  45 'b00100000000001010x00000100000001000010x110001;
	cfgsin2[0:44] =  45 'b00000001000100x10000100000010000001x000000000;
	cfgsin3[0:44] =  45 'b10010000100x00000100000100000100x000000100001;
	cfgsin4[0:44] =  45 'b00000100x00000010000010000001x000000100001000;
	cfgsin5[0:44] =  45 'b00001x01000010000100000100x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000100000100x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000100000100x00000010000000010100x010;
// TR
	cfgsin15[0:44] =  45 'b00010000001000100x00000010000010000001x010000;
	cfgsin14[0:44] =  45 'b10000001000010x00000010000010000001x000000010;
	cfgsin13[0:44] =  45 'b00001000100x00100100000000001100x000000010000;
	cfgsin12[0:44] =  45 'b10000100x00000100000010000100x010000100001000;
	cfgsin11[0:44] =  45 'b00001x00000010000100000100x000000100000100000;
	cfgsin10[0:44] =  45 'b01x00000010000100000001x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000010000000010001x100000;
	cfgsin18[0:44] =  45 'b10000000010001x10000010000100000001x100000100;
	cfgsin19[0:44] =  45 'b00010000001x10000010000010000001x100000100000;
	cfgsin20[0:44] =  45 'b00001001x10000010000100000001x110000100001000;
	cfgsin21[0:44] =  45 'b00100x10000010000000010001x101000010000010000;
	cfgsin22[0:44] =  45 'b10x10000000100001000010x10000010000000001001x;
	cfgsin23[0:44] =  45 'b10000010000000001001x10000010000010000001x100;
// BR
	cfgsin31[0:44] =  45 'b00010000010000001x11000000010000001100x100001;
	cfgsin30[0:44] =  45 'b00000001000010x10000000100100000100x100000000;
	cfgsin29[0:44] =  45 'b10001000010x10000001000100000100x100000100001;
	cfgsin28[0:44] =  45 'b00000001x10000100000001000010x100000100001000;
	cfgsin27[0:44] =  45 'b00001x10000010000100000001x101000100000100000;
	cfgsin26[0:44] =  45 'b01x10000010000100000001x11000010000100000001x;
	cfgsin25[0:44] =  45 'b10000010000000001001x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat124; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000000100001x000;
	cfgsin1[0:44] =  45 'b00100000100000010x00000100000000100100x000001;
	cfgsin2[0:44] =  45 'b00000000001010x00000100000000100001x000011000;
	cfgsin3[0:44] =  45 'b00000001001x00000100000100000100x000000100001;
	cfgsin4[0:44] =  45 'b00000100x00000010000010000001x000000000101000;
	cfgsin5[0:44] =  45 'b00001x00000010000100000100x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000100000100x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000100000100x00000010000000001001x000;
// TR
	cfgsin15[0:44] =  45 'b10010000000001010x00001010000000100100x000000;
	cfgsin14[0:44] =  45 'b10000001000100x10000010000000010100x000001000;
	cfgsin13[0:44] =  45 'b00001000010x00000100000100000001x001001000000;
	cfgsin12[0:44] =  45 'b01000001x00000100000001000001x000000100000010;
	cfgsin11[0:44] =  45 'b00010x10000010000000001100x000000100000000011;
	cfgsin10[0:44] =  45 'b00x00000010000000001001x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000010000001x000000;
	cfgsin18[0:44] =  45 'b10000100000001x01000100000010000100x000000100;
	cfgsin19[0:44] =  45 'b00100000001x00000010000100000100x000000100001;
	cfgsin20[0:44] =  45 'b00000001x00000010000010000001x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000001x000000000100010000;
	cfgsin22[0:44] =  45 'b10x00000010000100000001x00000010000010000001x;
	cfgsin23[0:44] =  45 'b00000010000000001001x01000010000000001010x001;
// BR
	cfgsin31[0:44] =  45 'b00010000000001100x00001100000001000001x000000;
	cfgsin30[0:44] =  45 'b10000001000010x00000000010000100100x010000000;
	cfgsin29[0:44] =  45 'b10001000010x01000010000000100010x100000100001;
	cfgsin28[0:44] =  45 'b00000001x00000100000001000010x000000100001000;
	cfgsin27[0:44] =  45 'b00001x00100010000000001001x000000100001000000;
	cfgsin26[0:44] =  45 'b01x01000001000001000001x00000010000000100001x;
	cfgsin25[0:44] =  45 'b00000100000100000001x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat123; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000010000010x000;
	cfgsin1[0:44] =  45 'b00000001000100100x01000100000000010100x000000;
	cfgsin2[0:44] =  45 'b01000000010010x00000001000001000001x000001000;
	cfgsin3[0:44] =  45 'b00000001001x00000100000100000100x000000100001;
	cfgsin4[0:44] =  45 'b00000100x00000010000010000001x000000100001000;
	cfgsin5[0:44] =  45 'b00001x00000010000100000100x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000100000100x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000000001100x00000000010010000010x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000001x00000000010010000100x001000;
	cfgsin14[0:44] =  45 'b01000001000010x00000010000000100100x000001000;
	cfgsin13[0:44] =  45 'b00001000010x00000001000000001010x000001000001;
	cfgsin12[0:44] =  45 'b00000100x00000100000001000100x000000100000000;
	cfgsin11[0:44] =  45 'b01001x00000010000100000100x000010100000001000;
	cfgsin10[0:44] =  45 'b01x00001010000100000001x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000010000001x000000;
	cfgsin18[0:44] =  45 'b10000100000001x00000100000000001100x100001000;
	cfgsin19[0:44] =  45 'b00000100100x00001100000000100001x000000000011;
	cfgsin20[0:44] =  45 'b00000001x00000010000000001100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00000010000100000001x000000100000010000;
	cfgsin22[0:44] =  45 'b10x01000010000001000001x00010010000001000100x;
	cfgsin23[0:44] =  45 'b10001000010010000010x00000100000000010001x000;
// BR
	cfgsin31[0:44] =  45 'b00100000000100001x00000010000100000100x001000;
	cfgsin30[0:44] =  45 'b10000000001010x00000000001010000001x100000100;
	cfgsin29[0:44] =  45 'b00001000001x00100010000000010100x000000100000;
	cfgsin28[0:44] =  45 'b00100100x10000100000001000100x000000000100100;
	cfgsin27[0:44] =  45 'b00001x00000000010001000010x000000000100001000;
	cfgsin26[0:44] =  45 'b01x00000010000000001100x00001001000001000001x;
	cfgsin25[0:44] =  45 'b00000100000000010001x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat122; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000001001000001000010000001x000;
	cfgsin1[0:44] =  45 'b00100000000001100x10000001000000001001x000010;
	cfgsin2[0:44] =  45 'b01000100000010x00001010000001000100x110000000;
	cfgsin3[0:44] =  45 'b01000001010x00000001000100000100x000000010001;
	cfgsin4[0:44] =  45 'b00000100x00000000010000001001x000001000001000;
	cfgsin5[0:44] =  45 'b00001x00000010000100000100x000000100001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00010010000000001100x00001000010010000001x000;
// TR
	cfgsin15[0:44] =  45 'b00000010001000010x00000100000000001001x000001;
	cfgsin14[0:44] =  45 'b00000001000010x01000001000000001010x010000100;
	cfgsin13[0:44] =  45 'b00001000010x01000010000010000001x000001000000;
	cfgsin12[0:44] =  45 'b00001001x10000010000001000010x000000100000100;
	cfgsin11[0:44] =  45 'b00100x01001100000100000100x100001000000100001;
	cfgsin10[0:44] =  45 'b00x00000000001100000001x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000010000001x000001;
	cfgsin18[0:44] =  45 'b00000100000001x00000000001010000001x000000000;
	cfgsin19[0:44] =  45 'b01100000100x00000001000100000001x000001000001;
	cfgsin20[0:44] =  45 'b00000001x00000010000010000100x000000100001000;
	cfgsin21[0:44] =  45 'b00100x00100010000100000001x001000100000010000;
	cfgsin22[0:44] =  45 'b10x00000001000001000001x00000010000001000001x;
	cfgsin23[0:44] =  45 'b00000010000001000010x00100001000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b10010000001000010x10000010000000100010x100000;
	cfgsin30[0:44] =  45 'b00001000001010x00000010000000001100x000000010;
	cfgsin29[0:44] =  45 'b00001000100x00000010000100000100x000000100000;
	cfgsin28[0:44] =  45 'b00001001x00001000010001000010x000000100000001;
	cfgsin27[0:44] =  45 'b00001x00000001000010000001x000000100001000000;
	cfgsin26[0:44] =  45 'b01x00000010000000001010x00000010000000001001x;
	cfgsin25[0:44] =  45 'b00000100000100000001x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat121; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1100000000001100x01x;
	cfgsin1[0:44] =  45 'bx1001000001000001x00xx1100000000001100x01xx00;
	cfgsin2[0:44] =  45 'b10000100000100x01xx0001000000010001x00xx01000;
	cfgsin3[0:44] =  45 'b00010000001x01xx1001000100000100x01xx10010001;
	cfgsin4[0:44] =  45 'b00000100x01xx1010000100000001x01xx10010000100;
	cfgsin5[0:44] =  45 'b00001x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1001000100000100x01xx1010000100000100x;
	cfgsin7[0:44] =  45 'b01xx0010000001000100x01xx0100000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx0010000000001001x01xx0000010001000100x00xx10;
	cfgsin14[0:44] =  45 'b10000000010001x00xx1100000010000010x00xx11000;
	cfgsin13[0:44] =  45 'b00000001100x00xx1000010000100100x00xx10001000;
	cfgsin12[0:44] =  45 'b01000100x01xx1100000100000100x01xx10000011000;
	cfgsin11[0:44] =  45 'b00001x00xx0010000001000001x01xx00010000010000;
	cfgsin10[0:44] =  45 'b10x11xx0010000010000010x01xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100000000100000100000100x000;
	cfgsin17[0:44] =  45 'b00010000100000100x00000100000000001001x000000;
	cfgsin18[0:44] =  45 'b10000000001001x00000000001010000001x001010100;
	cfgsin19[0:44] =  45 'b00100000001x00100010000000001001x010000100001;
	cfgsin20[0:44] =  45 'b00000001x00000010000010000001x000000010001000;
	cfgsin21[0:44] =  45 'b00100x00000100000100000100x100000100000010000;
	cfgsin22[0:44] =  45 'b10x00001100000001000010x01000100000000001001x;
	cfgsin23[0:44] =  45 'b00000100000000001010x10001000001000001100x001;
// BR
	cfgsin31[0:44] =  45 'b00100000100000100x00000000001010000100x000001;
	cfgsin30[0:44] =  45 'b00000001000010x00001010000000001100x001101000;
	cfgsin29[0:44] =  45 'b00001000010x00001010000000001100x010000100000;
	cfgsin28[0:44] =  45 'b00001001x00000000001001000010x000000000100010;
	cfgsin27[0:44] =  45 'b00001x01000010000000001010x100001000000000010;
	cfgsin26[0:44] =  45 'b01x00001000001000001010x01000000001000001001x;
	cfgsin25[0:44] =  45 'b00000100000100000001x00100100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000010100001000000010000x;
end
endtask
task get_wl_pat120; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000001xx0xx1010000100000010x01x;
	cfgsin1[0:44] =  45 'bx0010000001000010x01xx0010000001000010x11xx01;
	cfgsin2[0:44] =  45 'b00000000001001x01xx1100000000100010x01xx10100;
	cfgsin3[0:44] =  45 'b00000100100x00xx1001000100000100x01xx10010001;
	cfgsin4[0:44] =  45 'b00000100x01xx1100000010000001x01xx10100000100;
	cfgsin5[0:44] =  45 'b00001x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1001000100000100x01xx1010000100000100x;
	cfgsin7[0:44] =  45 'b00xx1000100001000100x01xx1010000001000010x01x;
// TR
	cfgsin15[0:44] =  45 'bx1100000010000100x00xx1010000001000010x01xx10;
	cfgsin14[0:44] =  45 'b00010010000100x01xx1010000001000001x01xx10100;
	cfgsin13[0:44] =  45 'b00000010001x01xx1010000100000010x11xx10010000;
	cfgsin12[0:44] =  45 'b01000010x01xx0010000100000001x00xx00100000010;
	cfgsin11[0:44] =  45 'b00010x00xx0000010001000010x01xx00100000010000;
	cfgsin10[0:44] =  45 'b01x00xx1010000010000100x00xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x1xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx1000001100000001x01xx10;
	cfgsin18[0:44] =  45 'b10000001000001x01xx1100000000100100x00xx00100;
	cfgsin19[0:44] =  45 'b00100000100x00xx0010000100000100x00xx10100001;
	cfgsin20[0:44] =  45 'b00000001x01xx1100000100000010x01xx10010001000;
	cfgsin21[0:44] =  45 'b00100x00xx1001000000010001x00xx10000011000000;
	cfgsin22[0:44] =  45 'b01x00xx0000100000100100x00xx0000100010000010x;
	cfgsin23[0:44] =  45 'b01xx0001000010000100x00xx0010000000001001x00x;
// BR
	cfgsin31[0:44] =  45 'bx0100000100000010x01xx1000010001000010x00xx10;
	cfgsin30[0:44] =  45 'b10000010000100x01xx0100000000100010x00xx00000;
	cfgsin29[0:44] =  45 'b01010000100x00xx0010000001000001x00xx10100001;
	cfgsin28[0:44] =  45 'b00000010x01xx0010000001000001x01xx10010000100;
	cfgsin27[0:44] =  45 'b00010x00xx1010000100000001x01xx10100000100000;
	cfgsin26[0:44] =  45 'b10x01xx0100000010000100x00xx0100000010000100x;
	cfgsin25[0:44] =  45 'b01xx1001000010000100x00xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx00100001000001000x1x0;
end
endtask
task get_wl_pat119; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx0100000001000010001xx00;
	cfgsin1[0:44] =  45 'b01001000010000100xx0010001000010000001xx00000;
	cfgsin2[0:44] =  45 'b10000000001001xx0000100000000001010xx00001000;
	cfgsin3[0:44] =  45 'b00010000010xx1000100000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000010000001xx00000100000100;
	cfgsin5[0:44] =  45 'b00001xx0000100000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000001000100xx0000000001000001001xx00;
// TR
	cfgsin15[0:44] =  45 'b00000001010000001xx0100000100001000001xx00000;
	cfgsin14[0:44] =  45 'b01000000010010xx0000100000010000001xx00000000;
	cfgsin13[0:44] =  45 'b10100000010xx0000000001010000001xx00000010000;
	cfgsin12[0:44] =  45 'b01000100xx0001000001100000010xx00011000001000;
	cfgsin11[0:44] =  45 'b00100xx1001001000001000100xx00000000010001000;
	cfgsin10[0:44] =  45 'b01xx1000010000010000001xx1000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100xx1xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx0100000100000001x01xx00;
	cfgsin18[0:44] =  45 'b10000100000001x01xx1010000000001010x01xx10100;
	cfgsin19[0:44] =  45 'b00100000010x01xx1010000100000010x00xx10100001;
	cfgsin20[0:44] =  45 'b00000001x00xx1010000100000100x00xx00010001000;
	cfgsin21[0:44] =  45 'b00100x00xx0010000010000001x01xx00100000001001;
	cfgsin22[0:44] =  45 'b00x00xx0001000000010001x00xx0010000010000100x;
	cfgsin23[0:44] =  45 'b11xx0000001010000001x01xx0010000001000010x01x;
// BR
	cfgsin31[0:44] =  45 'bx0100000000001001x01xx0010000000001001x01xx00;
	cfgsin30[0:44] =  45 'b00001000100001x01xx1001000000100001x01xx00010;
	cfgsin29[0:44] =  45 'b00000100001x01xx1010000001000010x01xx10000010;
	cfgsin28[0:44] =  45 'b00010100x01xx1100000000001100x00xx10010000001;
	cfgsin27[0:44] =  45 'b00100x00xx1010000000010100x01xx10100000100001;
	cfgsin26[0:44] =  45 'b00x01xx1010000000010001x01xx1010000000001010x;
	cfgsin25[0:44] =  45 'b00xx1001000000001010x00xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000001xx1xx;
end
endtask
task get_wl_pat118; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000000100000001001xx00;
	cfgsin1[0:44] =  45 'b00000100100000100xx0000000010000100100xx00000;
	cfgsin2[0:44] =  45 'b01000000010100xx0000010000100000010xx00000000;
	cfgsin3[0:44] =  45 'b01001000001xx0000100000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000000100001xx00000100001000;
	cfgsin5[0:44] =  45 'b00001xx0000100000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0100001000001000010xx0000010000000010001xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000001000001xx0000010000100000001xx00000;
	cfgsin14[0:44] =  45 'b00100100000100xx0000010000000100001xx00000010;
	cfgsin13[0:44] =  45 'b00000001010xx0000010000100000010xx00000001001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000000001010xx01000010001000;
	cfgsin11[0:44] =  45 'b00001xx0000000100100000100xx00100010001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000010000001xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0001100000100000001xx00101;
	cfgsin18[0:44] =  45 'b00000100000001xx0000100000001000001xx00000000;
	cfgsin19[0:44] =  45 'b01100000001xx0000000001000010001xx00001000000;
	cfgsin20[0:44] =  45 'b00010001xx1000000001100000001xx00101000001000;
	cfgsin21[0:44] =  45 'b00100xx1010010000010000001xx00011000000010000;
	cfgsin22[0:44] =  45 'b10xx0000100000100000100xx0100000100010000001x;
	cfgsin23[0:44] =  45 'bx0001010000010000001xx0010000100100000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00000001100000001xx0000001000100000100xx00000;
	cfgsin30[0:44] =  45 'b00100000100010xx0000001000001000100xx00000000;
	cfgsin29[0:44] =  45 'b10000001010xx0000001000001000100xx00000000101;
	cfgsin28[0:44] =  45 'b00000001xx0000100000001000010xx00000100000100;
	cfgsin27[0:44] =  45 'b00100xx1000100000100000001xx00000100000100000;
	cfgsin26[0:44] =  45 'b01xx0000000001100000010xx0000010000010000010x;
	cfgsin25[0:44] =  45 'bx0000010000010000001xx1000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat117; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx001x001xx0000100000xx100x001xx00;
	cfgsin1[0:44] =  45 'b00001000xx100x010xx0000100000xx010x010xx00010;
	cfgsin2[0:44] =  45 'b00100xx001x010xx0000001000xx001x100xx00000000;
	cfgsin3[0:44] =  45 'b10xx010x100xx0000100000xx100x100xx0000100000x;
	cfgsin4[0:44] =  45 'bx100x100xx0000010000xx010x001xx0000010000xx10;
	cfgsin5[0:44] =  45 'b0x001xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin6[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin7[0:44] =  45 'bx0000001000xx010x001xx0000000100xx100x100xx00;
// TR
	cfgsin15[0:44] =  45 'b00000001xx001x100xx0000001000xx001x001xx00000;
	cfgsin14[0:44] =  45 'b00001xx010x001xx0000010000xx001x010xx00000010;
	cfgsin13[0:44] =  45 'b00xx001x100xx0000001000xx100x100xx0000001000x;
	cfgsin12[0:44] =  45 'bx100x010xx0000100000xx010x010xx0000000001xx10;
	cfgsin11[0:44] =  45 'b0x010xx0000001000xx100x001xx0000001000xx100x0;
	cfgsin10[0:44] =  45 'b10xx0000010000xx100x001xx0000100000xx100x100x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000010000001xx00001;
	cfgsin18[0:44] =  45 'b00000010000001xx0000010000000001001xx00000100;
	cfgsin19[0:44] =  45 'b00000001001xx0000010000000100001xx00001000000;
	cfgsin20[0:44] =  45 'b10000001xx0000000010000001001xx01001000001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000001xx00000000101000000;
	cfgsin22[0:44] =  45 'b10xx0100010000100000010xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0000000001100000001xx0000010000000010001xx00;
// BR
	cfgsin31[0:44] =  45 'b10000010001000100xx0000000010001000001xx00010;
	cfgsin30[0:44] =  45 'b00010100000001xx0000001000001000010xx00000010;
	cfgsin29[0:44] =  45 'b00100000010xx0000001000001000100xx00000000011;
	cfgsin28[0:44] =  45 'b00000010xx0000010000000001010xx00001000000100;
	cfgsin27[0:44] =  45 'b00001xx0000010000100000001xx00000010001000000;
	cfgsin26[0:44] =  45 'b01xx0000000010000100001xx0000100000000100001x;
	cfgsin25[0:44] =  45 'bx0100001000100000001xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat116; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx001x001x00000000001xx001x1001x00;
	cfgsin1[0:44] =  45 'b00001000xx100x0101x0000001000xx100x0101x00000;
	cfgsin2[0:44] =  45 'b00001xx010x0011x0000100000xx010x0011x00000100;
	cfgsin3[0:44] =  45 'b00xx001x0101x0000100000xx100x1000x0000100000x;
	cfgsin4[0:44] =  45 'bx100x1000x0000010000xx001x0101x0000000001xx00;
	cfgsin5[0:44] =  45 'b1x1001x0000100000xx100x1000x0000100000xx100x1;
	cfgsin6[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin7[0:44] =  45 'bx0000001000xx100x0101x1000000001xx001x1001x00;
// TR
	cfgsin15[0:44] =  45 'b01000100xx010x1001x0000001000xx001x0101x00000;
	cfgsin14[0:44] =  45 'b00001xx010x1001x0000010000xx001x0101x00000000;
	cfgsin13[0:44] =  45 'b01xx010x1001x0000000001xx001x1001x0000001000x;
	cfgsin12[0:44] =  45 'bx100x0101x1000000001xx010x1001x0000000001xx00;
	cfgsin11[0:44] =  45 'b1x1001x0000001000xx100x0011x0001001000xx100x0;
	cfgsin10[0:44] =  45 'b011x0000000001xx001x1001x0000100000xx100x1000;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000100000xx100x001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx010x001xx00001;
	cfgsin18[0:44] =  45 'b00000xx010x001xx0000001000xx100x001xx00001000;
	cfgsin19[0:44] =  45 'b00xx001x001xx0000100000xx010x001xx0100100000x;
	cfgsin20[0:44] =  45 'bx100x001xx0000100000xx001x001xx0000100000xx10;
	cfgsin21[0:44] =  45 'b0x100xx0000000100xx100x100xx0000100000xx100x0;
	cfgsin22[0:44] =  45 'b01xx0001000001xx100x001xx0001001000xx001x010x;
	cfgsin23[0:44] =  45 'bx0000000010xx001x100xx0000100000xx010x100xx00;
// BR
	cfgsin31[0:44] =  45 'b00000001xx001x010xx0010001000xx100x010xx00000;
	cfgsin30[0:44] =  45 'b01000xx010x100xx0000000001xx010x001xx00100000;
	cfgsin29[0:44] =  45 'b01xx100x001xx0000001000xx010x100xx0000001000x;
	cfgsin28[0:44] =  45 'bx010x100xx0000001000xx001x010xx1000001000xx00;
	cfgsin27[0:44] =  45 'b1x010xx0000100000xx010x010xx0000010000xx001x0;
	cfgsin26[0:44] =  45 'b01xx0000001000xx010x100xx0000001000xx001x100x;
	cfgsin25[0:44] =  45 'bx0000010000xx001x001xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
end
endtask
task get_wl_pat115; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000001000000100000001000000000000000000100100;
	cfgsin2[0:44] =  45 'b000000000000000001100000000000000000010000000;
	cfgsin3[0:44] =  45 'b000000000000100010000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000010000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000001;
	cfgsin13[0:44] =  45 'b000000000000000000000000100000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000001000000000100000000000001000;
	cfgsin11[0:44] =  45 'b000000000000000000000010000001000000010000001;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx001x0101x00001;
	cfgsin18[0:44] =  45 'b00000xx001x0101x0000000001xx001x1001x00010000;
	cfgsin19[0:44] =  45 'b01xx001x1001x0000100000xx001x0101x0000000001x;
	cfgsin20[0:44] =  45 'bx001x1001x0000000001xx001x1001x0000100000xx10;
	cfgsin21[0:44] =  45 'b0x1000x0000000001xx001x1001x0000000001xx010x1;
	cfgsin22[0:44] =  45 'b001x0001001000xx010x0011x0000010000xx001x0101;
	cfgsin23[0:44] =  45 'bx0000010000xx001x0101x0000100000xx001x0101x00;
// BR
	cfgsin31[0:44] =  45 'b00000001xx001x1001x0000001000xx100x0011x00000;
	cfgsin30[0:44] =  45 'b00001xx010x1001x0110001000xx100x0101x01000000;
	cfgsin29[0:44] =  45 'b01xx010x1001x0000001000xx100x0101x0000100000x;
	cfgsin28[0:44] =  45 'bx001x0101x0000000001xx010x1001x0000001000xx10;
	cfgsin27[0:44] =  45 'b0x0101x0000100000xx001x0101x0000010000xx001x0;
	cfgsin26[0:44] =  45 'b101x0010010000xx001x0101x0000010000xx001x0101;
	cfgsin25[0:44] =  45 'bx0001000001xx001x1001x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx100x001x0000;
end
endtask
task get_wl_pat114; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000100000000000001001;
	cfgsin1[0:44] =  45 'b000000000000000000000011000000010000000001000;
	cfgsin2[0:44] =  45 'b000000010000000000000010001000000100000010000;
	cfgsin3[0:44] =  45 'b000000010000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000010000000010000010000010000000010010;
// TR
	cfgsin15[0:44] =  45 'b000000100000000000000000100000000000000000000;
	cfgsin14[0:44] =  45 'b001000000000000001000000000000000000010000000;
	cfgsin13[0:44] =  45 'b000000001000000000010000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000001000000000010000010000000000000;
	cfgsin11[0:44] =  45 'b000000000010000100000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000010000000100000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000001000000000000100100;
	cfgsin22[0:44] =  45 'b001001000000000000000000000000000000000000100;
	cfgsin23[0:44] =  45 'b001000000000010000001000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000010001000000000001001010000000000010000;
	cfgsin30[0:44] =  45 'b000000000000000000000100000000000000000000100;
	cfgsin29[0:44] =  45 'b000100000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000001000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000001000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat113; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001100xx100x0110x0110001000x;
	cfgsin1[0:44] =  45 'bx110x0010x0100001100xx000x1010x0001001000xx00;
	cfgsin2[0:44] =  45 'b1x1010x0001010100xx010x0000x0110000100xx001x0;
	cfgsin3[0:44] =  45 'b110x0100001001xx010x0110x0110001101xx110x0110;
	cfgsin4[0:44] =  45 'bx0110001101xx110x0110x0010001101xx110x0110x01;
	cfgsin5[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin6[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin7[0:44] =  45 'b01xx110x0100x0110000100xx001x0100x0101000100x;
// TR
	cfgsin15[0:44] =  45 'bx010x0001x0110010101xx100x0110x0110001101xx11;
	cfgsin14[0:44] =  45 'b0x0010x0110001100xx110x0110x0110001100xx101x0;
	cfgsin13[0:44] =  45 'b010x0110000101xx110x0000x0110001101xx110x0101;
	cfgsin12[0:44] =  45 'bx0110001100xx100x0010x0100000100xx110x0100x01;
	cfgsin11[0:44] =  45 'b10001101xx010x0001x0100010100xx010x0100x01000;
	cfgsin10[0:44] =  45 'b10100xx110x0010x0110001101xx110x0110x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000010010000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000010010000000000000000100000100;
	cfgsin20[0:44] =  45 'b000000000000000000000010000000000000000100000;
	cfgsin21[0:44] =  45 'b000001000010000001000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000100000000000010000001000000000000;
	cfgsin23[0:44] =  45 'b000010000000000000000010100000100000000000001;
// BR
	cfgsin31[0:44] =  45 'b000101000000000000001010000000000100000000001;
	cfgsin30[0:44] =  45 'b000001000100000000000000000000000010000010000;
	cfgsin29[0:44] =  45 'b000000000000001000010000100000000000000001000;
	cfgsin28[0:44] =  45 'b000000000000000000001000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000101000000001100;
	cfgsin26[0:44] =  45 'b000000000000000100000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat112; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0010x000010000000000x0110x10100000100;
	cfgsin1[0:44] =  45 'b0000x0110x010000110000000x0010x01010011000001;
	cfgsin2[0:44] =  45 'b0x0110x010110100000000x0001x011001010000010x0;
	cfgsin3[0:44] =  45 'b000x000101010000000x0010x010000010000010x0110;
	cfgsin4[0:44] =  45 'bx011000110000010x0110x011000100000010x0110x01;
	cfgsin5[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin6[0:44] =  45 'b0110000010x0110x011000010000010x0110x01100011;
	cfgsin7[0:44] =  45 'b0000010x0110x011000110000010x0110x01100001000;
// TR
	cfgsin15[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000000;
	cfgsin14[0:44] =  45 'b0x0110x011000110000010x0010x011000110000010x0;
	cfgsin13[0:44] =  45 'b101x010100110000010x0100x011000110000010x0110;
	cfgsin12[0:44] =  45 'bx011000110000000x0110x011000110000000x0100x00;
	cfgsin11[0:44] =  45 'b1000110000000x0110x011000110000001x0100x01100;
	cfgsin10[0:44] =  45 'b0110000010x0100x001000110000010x0110x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x1010x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx001x0010x0101001101xx010x0;
	cfgsin19[0:44] =  45 'b110x0110010101xx001x0010x0101001101xx010x0001;
	cfgsin20[0:44] =  45 'bx0101001101xx110x0110x0010001101xx110x0010x01;
	cfgsin21[0:44] =  45 'b10001001xx001x1000x0101001001xx101x1000x01000;
	cfgsin22[0:44] =  45 'b01000xx010x0010x0110010100xx110x0010x01100001;
	cfgsin23[0:44] =  45 'b00xx001x1010x0001001000xx010x0001x0110010100x;
// BR
	cfgsin31[0:44] =  45 'bx100x0000x0010001010xx000x0000x0100001100xx10;
	cfgsin30[0:44] =  45 'b0x1000x0100001100xx000x1001x1010000010xx000x0;
	cfgsin29[0:44] =  45 'b100x0110001100xx110x0001x0010010101xx110x0001;
	cfgsin28[0:44] =  45 'bx0110010101xx110x0000x0110001101xx110x0110x01;
	cfgsin27[0:44] =  45 'b10001101xx110x0110x0010001101xx000x0110x00000;
	cfgsin26[0:44] =  45 'b01101xx001x1001x0001010101xx101x0110x01010011;
	cfgsin25[0:44] =  45 'b01xx010x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
end
endtask
task get_wl_pat111; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000100001100000000000000000000000010000;
	cfgsin1[0:44] =  45 'b000000000000010000000001001000000000000010000;
	cfgsin2[0:44] =  45 'b000000000000000000000100100000000000000000000;
	cfgsin3[0:44] =  45 'b101001000000000000100000000010000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000001001000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000001;
	cfgsin14[0:44] =  45 'b000000000000000000000000100000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000010000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000100000000000000000000000000001;
	cfgsin11[0:44] =  45 'b000000000001000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000010000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0110x00100011000001;
	cfgsin18[0:44] =  45 'b0x0010x011000110000001x0000x010100001000010x0;
	cfgsin19[0:44] =  45 'b000x010100000000000x0001x000101000000000x0000;
	cfgsin20[0:44] =  45 'bx001001010000001x0000x101000001000001x0110x01;
	cfgsin21[0:44] =  45 'b1000010000001x0001x010100010000010x0000x00000;
	cfgsin22[0:44] =  45 'b0110000000x0100x000000110000001x1010x01100101;
	cfgsin23[0:44] =  45 'b0000001x0100x001000110000000x0001x00010101000;
// BR
	cfgsin31[0:44] =  45 'b0000x0100x100100110100000x0010x01100000010000;
	cfgsin30[0:44] =  45 'b0x1000x000101000000001x0000x011001010000100x0;
	cfgsin29[0:44] =  45 'b001x000000000000010x0010x001000110000010x1010;
	cfgsin28[0:44] =  45 'bx011001001000010x0100x001000110000001x0110x01;
	cfgsin27[0:44] =  45 'b1000110000010x0010x011000110000010x0110x01100;
	cfgsin26[0:44] =  45 'b0110000010x0110x001000100000010x0010x00100011;
	cfgsin25[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat110; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000010001010100000000000000000;
	cfgsin1[0:44] =  45 'b000100000000000000001000000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000010000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000010000000100000000010000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000010010000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000010000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000010000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000010000000000000000000000000100001000;
	cfgsin11[0:44] =  45 'b000000010000000000000000000000000000001000000;
	cfgsin10[0:44] =  45 'b000010000000001000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000010000000000000;
	cfgsin18[0:44] =  45 'b001000000000000000000000100000000010000000000;
	cfgsin19[0:44] =  45 'b100000000010100001001000000000000000000101000;
	cfgsin20[0:44] =  45 'b001000000000000000000000000010001000000000000;
	cfgsin21[0:44] =  45 'b000010000000000000000000000000000000100000000;
	cfgsin22[0:44] =  45 'b000000000100000001000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000001000000001000010000100000000000;
// BR
	cfgsin31[0:44] =  45 'b001000000000000000000000000100000000010000000;
	cfgsin30[0:44] =  45 'b000010010000000000000000101000000000000001001;
	cfgsin29[0:44] =  45 'b000001000000000000000100001000000010000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000100000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000100000100000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000001000001000000000100001000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat109; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx0100000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1001000001000100xx0xx1100000001000100xx0xx11;
	cfgsin2[0:44] =  45 'b00000100000100xx0xx1010000001000100xx1xx10010;
	cfgsin3[0:44] =  45 'b00001000010xx0xx1100000001000100xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1010000100000100xx0xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1010000100000100xx0xx1010000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100xx0xx1010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10010;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1010000010000100xx1xx10100000;
	cfgsin12[0:44] =  45 'b01000100xx0xx1100000010000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx0xx1000100010000100xx1xx11000000100000;
	cfgsin10[0:44] =  45 'b01xx0xx1100000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000010000001000000000000000000;
	cfgsin19[0:44] =  45 'b001000000000010000000000001000000100000000001;
	cfgsin20[0:44] =  45 'b000000000010010000101000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000010000000100000000010010000000001010010;
	cfgsin22[0:44] =  45 'b000000000000010000100000001010000000000000000;
	cfgsin23[0:44] =  45 'b000000000001000000000000000010000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000001000000000000011000000000000001000000;
	cfgsin30[0:44] =  45 'b100000000000001000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000010011001010000000000000000000010000000;
	cfgsin28[0:44] =  45 'b000000000010000000001000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000010000000000000000000;
	cfgsin25[0:44] =  45 'b010000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat108; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000001000100xx0xx1010000000001010xx1x;
	cfgsin1[0:44] =  45 'bx1000010001000010xx0xx1000010001000001xx0xx10;
	cfgsin2[0:44] =  45 'b10000001000100xx1xx0100000001000001xx0xx00100;
	cfgsin3[0:44] =  45 'b00001000100xx1xx1000010000001001xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1010000100000100xx1xx0010000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx11000;
	cfgsin13[0:44] =  45 'b00100000100xx0xx1010000010000010xx0xx11000000;
	cfgsin12[0:44] =  45 'b01000001xx0xx1100000100000100xx1xx11000000100;
	cfgsin11[0:44] =  45 'b00100xx1xx1000010001000100xx1xx11000000010000;
	cfgsin10[0:44] =  45 'b10xx1xx1001000100000010xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0100000001000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx0100000010000100xx1xx11000;
	cfgsin19[0:44] =  45 'b00010000100xx0xx1100000001000010xx1xx10010000;
	cfgsin20[0:44] =  45 'b01000100xx0xx0010000001000100xx0xx10010000010;
	cfgsin21[0:44] =  45 'b00100xx0xx1100000001000100xx0xx11000000010001;
	cfgsin22[0:44] =  45 'b00xx1xx1010000100000010xx0xx0010000000001100x;
	cfgsin23[0:44] =  45 'bx1xx1010000001000100xx0xx1010000001000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1001000001000010xx0xx0100000000100100xx0xx11;
	cfgsin30[0:44] =  45 'b00000100000100xx1xx1100000000001100xx1xx00100;
	cfgsin29[0:44] =  45 'b00100000100xx0xx0100000000100100xx0xx00100000;
	cfgsin28[0:44] =  45 'b01000010xx0xx1010000000010100xx1xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx0010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx0xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx0xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat107; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000001000100x01000001000100000010xx00;
	cfgsin1[0:44] =  45 'b00100000000001001xx1000010000001000001xx01000;
	cfgsin2[0:44] =  45 'b01000100000100xx0010000100001000001xx10001000;
	cfgsin3[0:44] =  45 'b00000010001xx0000010000001000001xx00000100001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin5[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin6[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin7[0:44] =  45 'bx0000010000100000100xx0001010000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin14[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000010000010xx10000100000;
	cfgsin12[0:44] =  45 'b01000001xx0000010000010000100xx00000100001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000010000100xx00000100000000011;
	cfgsin10[0:44] =  45 'b00xx0000010000100000010xx0000010000100000100x;
	cfgsin9[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx0010000000001010xx1xx00100;
	cfgsin19[0:44] =  45 'b00000001010xx1xx0000010000001100xx0xx00100000;
	cfgsin20[0:44] =  45 'b01000001xx1xx0100000001000001xx1xx11000001000;
	cfgsin21[0:44] =  45 'b00010xx1xx0010000000001010xx0xx10010000010000;
	cfgsin22[0:44] =  45 'b01xx1xx1010000001000100xx1xx0001000010000010x;
	cfgsin23[0:44] =  45 'bx1xx0100000001000001xx0xx1100000000001100xx0x;
// BR
	cfgsin31[0:44] =  45 'bx1010000001000001xx1xx0001000100000100xx0xx00;
	cfgsin30[0:44] =  45 'b01000000001100xx0xx0100000100000010xx0xx11000;
	cfgsin29[0:44] =  45 'b00000010010xx1xx1010000010000010xx0xx00010000;
	cfgsin28[0:44] =  45 'b01000100xx0xx1100000000010010xx0xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
end
endtask
task get_wl_pat106; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx0000001000000001010xx00;
	cfgsin1[0:44] =  45 'b00001000100000001xx0000001000000001010xx00000;
	cfgsin2[0:44] =  45 'b01000100000001xx0000000100001000010xx00000000;
	cfgsin3[0:44] =  45 'b01001000100xx0000000010001000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000000100100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000001000010xx00000010000;
	cfgsin12[0:44] =  45 'b01000001xx0000001000001000001xx00000010000010;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000001xx00000010001000000;
	cfgsin10[0:44] =  45 'b01xx0000001000000001010xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x00000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000100000100xx0010010000010000010xx00100010;
	cfgsin19[0:44] =  45 'b00100000010xx0001001000001000001xx00011000000;
	cfgsin20[0:44] =  45 'b01000001xx0010010000001000010xx00000010001000;
	cfgsin21[0:44] =  45 'b00001xx0001001000100000001xx00001000000000100;
	cfgsin22[0:44] =  45 'b01xx0000100000100000010xx0001100000000100001x;
	cfgsin23[0:44] =  45 'bx0001001000000010010xx0000000010000100010xx10;
// BR
	cfgsin31[0:44] =  45 'b00100000000001001xx0010001000000100100xx10010;
	cfgsin30[0:44] =  45 'b10000010000100xx0000001000010000100xx10000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000000100010xx10011000000;
	cfgsin28[0:44] =  45 'b10000001xx0000001000000010100xx10000100001000;
	cfgsin27[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin26[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin25[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
end
endtask
task get_wl_pat105; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100x00000001000000001010xx00;
	cfgsin1[0:44] =  45 'b00001000000010001xx0000000010001000001xx00000;
	cfgsin2[0:44] =  45 'b01000100000010xx0000000100001000001xx00100001;
	cfgsin3[0:44] =  45 'b00001000001xx0000001000000001001xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000000100100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00000001100xx0100001000100000010xx00000010000;
	cfgsin12[0:44] =  45 'b01000001xx0100001000000100010xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000001000001xx00000010000100000;
	cfgsin10[0:44] =  45 'b01xx0000001000001000010xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000010xx00000001;
	cfgsin19[0:44] =  45 'b00001000100xx0000000010001000100xx10000001000;
	cfgsin20[0:44] =  45 'b01000100xx0000000100001000001xx00000010000001;
	cfgsin21[0:44] =  45 'b00010xx0000000001000100100xx01000100000010001;
	cfgsin22[0:44] =  45 'b00xx0000000100010000001xx0000001000100000010x;
	cfgsin23[0:44] =  45 'bx0000000010001000100xx1000000100100000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000010000010xx0000001000010000001xx00000;
	cfgsin30[0:44] =  45 'b00001000001010xx0010010000000001001xx00000010;
	cfgsin29[0:44] =  45 'b00000100001xx0000000100000100001xx00000010000;
	cfgsin28[0:44] =  45 'b01000010xx0000001000100000010xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
end
endtask
task get_wl_pat104; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000100x00100001000000100001xx00;
	cfgsin1[0:44] =  45 'b00010000001000001xx0000001000100000001xx00000;
	cfgsin2[0:44] =  45 'b01000010000100xx0000001000000010100xx00010010;
	cfgsin3[0:44] =  45 'b00000001001xx0000100000000010001xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000000100100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00001000100xx0000000010000010010xx00000010000;
	cfgsin12[0:44] =  45 'b01000001xx0000000010000010100xx00000010000001;
	cfgsin11[0:44] =  45 'b00001xx0000001000000001010xx00000010000010000;
	cfgsin10[0:44] =  45 'b01xx0000001000000100010xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000000100010000010xx00000100;
	cfgsin19[0:44] =  45 'b00000010010xx0000001000001000001xx00000010000;
	cfgsin20[0:44] =  45 'b01000010xx0000000100001000001xx00000010001000;
	cfgsin21[0:44] =  45 'b00010xx0000000100100000001xx00000000100000010;
	cfgsin22[0:44] =  45 'b01xx0000001000100000010xx0000000100010000010x;
	cfgsin23[0:44] =  45 'bx0000000100001000001xx0000001000001000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000001000001xx0000001000000001100xx00000;
	cfgsin30[0:44] =  45 'b01000000001100xx1000001000000001100xx00000010;
	cfgsin29[0:44] =  45 'b00100000100xx0000001000000001010xx00000001000;
	cfgsin28[0:44] =  45 'b01000001xx0100000010010000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
end
endtask
task get_wl_pat103; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000001000100xx0000000010100000100xx00;
	cfgsin1[0:44] =  45 'b01000100001000010xx0000000100001000100xx01000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000001000100xx00000010;
	cfgsin3[0:44] =  45 'b00001000010xx0000001000000001100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000010000100xx00000010000;
	cfgsin12[0:44] =  45 'b01000100xx0000001000000001100xx01000001001000;
	cfgsin11[0:44] =  45 'b00100xx0000000100001000100xx00000001000010001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000000100001000001xx00000010;
	cfgsin19[0:44] =  45 'b00000100001xx0000000100001000010xx00000001000;
	cfgsin20[0:44] =  45 'b00100001xx0000000100001000001xx00000010001000;
	cfgsin21[0:44] =  45 'b00010xx0001001000100000010xx00000000010000010;
	cfgsin22[0:44] =  45 'b10xx0000001000000100010xx0010000100001000010x;
	cfgsin23[0:44] =  45 'bx0000100000000100010xx0000000100010000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000000100100xx0000001000001000010xx00000;
	cfgsin30[0:44] =  45 'b00010000001001xx0000000010000100010xx00000100;
	cfgsin29[0:44] =  45 'b00001000010xx0001001000001000100xx00000001000;
	cfgsin28[0:44] =  45 'b00001001xx0000001000000100100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
end
endtask
task get_wl_pat102; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000001000001xx0001100000000001100xx00;
	cfgsin1[0:44] =  45 'b00100000001000001xx0000010000000001001xx00000;
	cfgsin2[0:44] =  45 'b10000000001100xx0001001000001000001xx00000010;
	cfgsin3[0:44] =  45 'b00001000100xx1010001000000001001xx10000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx1000001000100000100xx00010000;
	cfgsin13[0:44] =  45 'b10100000100xx0000001000010000010xx00000010000;
	cfgsin12[0:44] =  45 'b01000001xx0000100000010000100xx00010010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000001000100xx00000001000010000;
	cfgsin10[0:44] =  45 'b10xx1000001000000001010xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000000100010000100xx00000100;
	cfgsin19[0:44] =  45 'b00000001100xx0000001000000001010xx00000100000;
	cfgsin20[0:44] =  45 'b01000100xx0000000010001000100xx00000010001000;
	cfgsin21[0:44] =  45 'b00100xx0000001000000010100xx00000010000010000;
	cfgsin22[0:44] =  45 'b10xx0000000100100000010xx0000001000010000010x;
	cfgsin23[0:44] =  45 'bx0000001000001000010xx0000010000001000010xx00;
// BR
	cfgsin31[0:44] =  45 'b00000010001000010xx0000001000000100100xx00000;
	cfgsin30[0:44] =  45 'b00100000010100xx0000001000000010100xx00000010;
	cfgsin29[0:44] =  45 'b00000001100xx0000001000100000100xx00000010000;
	cfgsin28[0:44] =  45 'b01000010xx0000100000000001100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
end
endtask
task get_wl_pat101; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx0001000001000100xx1x;
	cfgsin1[0:44] =  45 'bx0000100001000100xx1xx1100000010000001xx0xx10;
	cfgsin2[0:44] =  45 'b01000100000100xx1xx0010000100000001xx1xx00010;
	cfgsin3[0:44] =  45 'b00100000001xx0xx0001000100000001xx0xx10010001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b01000100000100xx0xx1001000100000100xx1xx00010;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1001000001000010xx1xx10010001;
	cfgsin12[0:44] =  45 'b00000001xx1xx1010000100000100xx0xx00000101000;
	cfgsin11[0:44] =  45 'b00100xx1xx1000100100000100xx1xx10010001000000;
	cfgsin10[0:44] =  45 'b01xx0xx1001000001000010xx1xx1001000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0001000100000001010xx00010010;
	cfgsin19[0:44] =  45 'b00000001010xx0000001000001000100xx10101000000;
	cfgsin20[0:44] =  45 'b01000001xx0000000010001000001xx00000001001000;
	cfgsin21[0:44] =  45 'b00010xx0000000100000001010xx00100100000010001;
	cfgsin22[0:44] =  45 'b00xx0000100000100000100xx0000000100010000100x;
	cfgsin23[0:44] =  45 'bx0001000100001000100xx0101100000001000100xx00;
// BR
	cfgsin31[0:44] =  45 'b01001000001000001xx1000000010000001100xx10011;
	cfgsin30[0:44] =  45 'b00000000001100xx1000000010001000001xx10000001;
	cfgsin29[0:44] =  45 'b00100000010xx1000001000000001010xx00000010000;
	cfgsin28[0:44] =  45 'b01000100xx1000000100001000010xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
end
endtask
task get_wl_pat100; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000001x00xx0010000001000001x00x;
	cfgsin1[0:44] =  45 'bx0001000010000100x01xx1001000000010001x01xx10;
	cfgsin2[0:44] =  45 'b10000000001100x00xx1100000010000001x10xx10010;
	cfgsin3[0:44] =  45 'b00100000001x00xx1100000100000001x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x00xx1010000100000100x00xx10100001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1010000100000100x01xx1100000100000100x;
	cfgsin7[0:44] =  45 'b01xx1100000100000100x01xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx10;
	cfgsin14[0:44] =  45 'b10000100000100x01xx1010000100000100x01xx10100;
	cfgsin13[0:44] =  45 'b00100000100x01xx1000010001000100x00xx10010001;
	cfgsin12[0:44] =  45 'b00000001x00xx1010000001000010x00xx10100001000;
	cfgsin11[0:44] =  45 'b00010x00xx1010000000100100x00xx11000000100000;
	cfgsin10[0:44] =  45 'b10x00xx1100000001000001x01xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100x01xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx0001000001000010xx1xx01000;
	cfgsin19[0:44] =  45 'b00001000001xx1xx1100000100000001xx0xx00010001;
	cfgsin20[0:44] =  45 'b00000001xx1xx1000010010000001xx1xx10001000010;
	cfgsin21[0:44] =  45 'b00010xx1xx0000100001000010xx1xx01000000100000;
	cfgsin22[0:44] =  45 'b01xx1xx1010000001000010xx1xx0000100001000001x;
	cfgsin23[0:44] =  45 'bx1xx0000100001000001xx0xx0001000100000001xx1x;
// BR
	cfgsin31[0:44] =  45 'bx0000100100000100xx0xx1001000000010100xx0xx00;
	cfgsin30[0:44] =  45 'b10000100000001xx0xx1010000000100100xx0xx11000;
	cfgsin29[0:44] =  45 'b00000100100xx0xx0000001001000010xx1xx10100000;
	cfgsin28[0:44] =  45 'b10000001xx0xx1001000001000100xx1xx10010001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat99; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx1001010000010000010x000;
	cfgsin1[0:44] =  45 'b00000010010000010x00000010000010000100x000000;
	cfgsin2[0:44] =  45 'b01000100000100x10100000010100000001x001001000;
	cfgsin3[0:44] =  45 'b00100000001x01000010000100000001x000001000001;
	cfgsin4[0:44] =  45 'b00000100x01000010000100000100x010000100001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin6[0:44] =  45 'b00x00000010000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x00000100000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000001000010x000000100001;
	cfgsin12[0:44] =  45 'b00000001x01000000010100000100x100000100001000;
	cfgsin11[0:44] =  45 'b00100x01000100000100000001x000000010000010000;
	cfgsin10[0:44] =  45 'b01x01000010000001000010x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000100x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000100x01xx0000100001000100x00xx00010;
	cfgsin19[0:44] =  45 'b00000010001x00xx1010000001000010x00xx10010000;
	cfgsin20[0:44] =  45 'b01000010x00xx0010000100000010x00xx01000000010;
	cfgsin21[0:44] =  45 'b00001x00xx1100000001000001x00xx10001000000011;
	cfgsin22[0:44] =  45 'b00x00xx1000010001000100x00xx1000010001000100x;
	cfgsin23[0:44] =  45 'b00xx1010000100000010x00xx1010000010000010x01x;
// BR
	cfgsin31[0:44] =  45 'bx1000010000001100x10xx0010000001000010x10xx00;
	cfgsin30[0:44] =  45 'b10000010000001x01xx1010000000001001x00xx10100;
	cfgsin29[0:44] =  45 'b00000001001x01xx1100000000001010x00xx00010001;
	cfgsin28[0:44] =  45 'b00000001x00xx0010000000010010x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin26[0:44] =  45 'b00x00xx1010000100000100x00xx1010000100000100x;
	cfgsin25[0:44] =  45 'b00xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000001x01x0;
end
endtask
task get_wl_pat98; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000001xx0000100000100000100x101;
	cfgsin1[0:44] =  45 'b00010000100000001x10000010000100000010x100000;
	cfgsin2[0:44] =  45 'b00010100000100x10000010000100000001x100000100;
	cfgsin3[0:44] =  45 'b00100000001x10000010000100000001x100001000001;
	cfgsin4[0:44] =  45 'b00000100x10000010000100000100x100000100001000;
	cfgsin5[0:44] =  45 'b00100x10000010000100000100x100000100001000001;
	cfgsin6[0:44] =  45 'b00x10000010000100000100x10000100000100000100x;
	cfgsin7[0:44] =  45 'b10000100000100000100x10000010000100000100x100;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x10000100000100000100x100000;
	cfgsin14[0:44] =  45 'b10000100000100x10000010000100000100x100000000;
	cfgsin13[0:44] =  45 'b10100000100x10000100000100000001x100000100001;
	cfgsin12[0:44] =  45 'b00000001x10000100000000001001x100001000000000;
	cfgsin11[0:44] =  45 'b01001x10000010000001000010x100000100000000011;
	cfgsin10[0:44] =  45 'b00x10000000010100000100x10000010000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00001010000001000001x000100100;
	cfgsin19[0:44] =  45 'b00000001100x11000000010100000100x000000000101;
	cfgsin20[0:44] =  45 'b00000100x01001010000100000100x000010100000010;
	cfgsin21[0:44] =  45 'b00100x00000010000001000100x010001000000100000;
	cfgsin22[0:44] =  45 'b10x00000010000001000001x00100010000010000001x;
	cfgsin23[0:44] =  45 'b00000001000010000100x01000010000010000001x000;
// BR
	cfgsin31[0:44] =  45 'b00010000100000001x00000001000000010001x010101;
	cfgsin30[0:44] =  45 'b00000100000010x00000010000010000010x000000010;
	cfgsin29[0:44] =  45 'b00001000010x00000010000001000010x000010000100;
	cfgsin28[0:44] =  45 'b10000001x01000000010000100001x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin26[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin25[0:44] =  45 'b01000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001010000100000100xx00x;
end
endtask
task get_wl_pat97; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000000100010x000;
	cfgsin1[0:44] =  45 'b10100000000001001x10000100000010000100x100000;
	cfgsin2[0:44] =  45 'b01000001000010x00000100000000001001x000001000;
	cfgsin3[0:44] =  45 'b00100000100x10000100000100000100x100000100001;
	cfgsin4[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000100000100x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000100000100x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000001x10000100000010000100x010001000001;
	cfgsin12[0:44] =  45 'b00000100x10000100000000001010x010000000100000;
	cfgsin11[0:44] =  45 'b01010x00000010000100000100x010000100000000011;
	cfgsin10[0:44] =  45 'b00x00000010000001000010x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100000;
	cfgsin18[0:44] =  45 'b10000100000100x10000000010001000010x100000001;
	cfgsin19[0:44] =  45 'b00001000010x10000010000000001001x100000100000;
	cfgsin20[0:44] =  45 'b00001001x10000010000000001001x110000000100010;
	cfgsin21[0:44] =  45 'b00010x10000001000001000010x100000100001000000;
	cfgsin22[0:44] =  45 'b01x10000001000001000010x10000100000001000010x;
	cfgsin23[0:44] =  45 'b10000010000000001001x10000010000000001100x100;
// BR
	cfgsin31[0:44] =  45 'b00010000001000010x10101000010010000100x100000;
	cfgsin30[0:44] =  45 'b10000100000100x10000100000100000100x100001000;
	cfgsin29[0:44] =  45 'b00100000100x10000000010001000010x101000100000;
	cfgsin28[0:44] =  45 'b10000001x10000100000000001100x100001000001000;
	cfgsin27[0:44] =  45 'b00100x10000010000100000100x100000100001000001;
	cfgsin26[0:44] =  45 'b00x10100010000100000100x10100010000100000100x;
	cfgsin25[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat96; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000001000010x100;
	cfgsin1[0:44] =  45 'b01100000000100001x10001100000000100001x010000;
	cfgsin2[0:44] =  45 'b00010000100100x00000000001001000010x000001000;
	cfgsin3[0:44] =  45 'b00000001001x00000100000000001001x000000100001;
	cfgsin4[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000100000100x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000100000100x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000001000;
	cfgsin13[0:44] =  45 'b00000100100x00000100000001000001x000000000100;
	cfgsin12[0:44] =  45 'b10000001x00000100000001000001x100000100000001;
	cfgsin11[0:44] =  45 'b00100x00001010000000001001x000000100000010001;
	cfgsin10[0:44] =  45 'b00x10000010000001000001x10000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000100000001000010x010000100;
	cfgsin19[0:44] =  45 'b00001000010x00000010000001000001x010000100000;
	cfgsin20[0:44] =  45 'b00010010x10000010000100000001x000000100000010;
	cfgsin21[0:44] =  45 'b00010x01000010000001000010x000000100000100000;
	cfgsin22[0:44] =  45 'b01x01000100000001000010x00000010000100000100x;
	cfgsin23[0:44] =  45 'b01000010000100000010x00000001000000010010x100;
// BR
	cfgsin31[0:44] =  45 'b00100000010000100x00000100000001000001x000000;
	cfgsin30[0:44] =  45 'b00010000001100x00000000001000001010x010000100;
	cfgsin29[0:44] =  45 'b00000010100x00000001000100000001x000000010001;
	cfgsin28[0:44] =  45 'b00000100x00001001000000001010x000000100001000;
	cfgsin27[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin26[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat95; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000001000001x000;
	cfgsin1[0:44] =  45 'b00100000010000010x01000100000000001001x000001;
	cfgsin2[0:44] =  45 'b00000010000100x00000100000100000001x000001000;
	cfgsin3[0:44] =  45 'b00000001001x00001000001100000001x000000100001;
	cfgsin4[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000100000100x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000100000100x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00010100000001000100x001000010001;
	cfgsin12[0:44] =  45 'b00000001x00000100000000100010x000000100001000;
	cfgsin11[0:44] =  45 'b00010x00000010000100000100x000000000100100000;
	cfgsin10[0:44] =  45 'b10x00000010000001000001x10000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000100000001000100x100000100;
	cfgsin19[0:44] =  45 'b00000010001x10000010000000010001x000000100000;
	cfgsin20[0:44] =  45 'b01000001x00000000001100000001x000000100000010;
	cfgsin21[0:44] =  45 'b00010x00000010000001000010x000000100000001000;
	cfgsin22[0:44] =  45 'b01x00000010000000100100x10000010000001000010x;
	cfgsin23[0:44] =  45 'b10000010000100000001x01000010000010000100x000;
// BR
	cfgsin31[0:44] =  45 'b00000010000100001x00100000010000100100x000000;
	cfgsin30[0:44] =  45 'b00001000010001x00001010000000001100x000000000;
	cfgsin29[0:44] =  45 'b10010000100x00000010000001000001x000000100000;
	cfgsin28[0:44] =  45 'b01000001x00100000010010000001x100000100001000;
	cfgsin27[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin26[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat94; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000001001001010000001000010x000;
	cfgsin1[0:44] =  45 'b00001000010000001x00000100000001000001x100000;
	cfgsin2[0:44] =  45 'b01000100000100x00001000001000001001x110100010;
	cfgsin3[0:44] =  45 'b00100000100x10000001000001000001x000000010001;
	cfgsin4[0:44] =  45 'b00000100x00000001000100000100x000000010001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000100000100x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000010100;
	cfgsin13[0:44] =  45 'b00000001100x01000010000001000010x000000010000;
	cfgsin12[0:44] =  45 'b00001001x01000100000000001010x000011000000000;
	cfgsin11[0:44] =  45 'b01100x00000010000100000100x000000010000000010;
	cfgsin10[0:44] =  45 'b01x00000010000001000010x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000000000010010000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000100000001000010x000000100;
	cfgsin19[0:44] =  45 'b00001000010x00100001000001000010x100100000100;
	cfgsin20[0:44] =  45 'b00100100x00000010000100000001x000001000000010;
	cfgsin21[0:44] =  45 'b00010x00000100000001000010x000100100000000100;
	cfgsin22[0:44] =  45 'b01x00010000010001000100x10000010000001000100x;
	cfgsin23[0:44] =  45 'b00000010000010000001x00000010000000100100x000;
// BR
	cfgsin31[0:44] =  45 'b00000010100000010x10000001000100000010x100000;
	cfgsin30[0:44] =  45 'b10000000100010x10000010000000010010x000000100;
	cfgsin29[0:44] =  45 'b00000010100x01000010000001000001x000000100000;
	cfgsin28[0:44] =  45 'b01000010x10000000001100000010x000000100001000;
	cfgsin27[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin26[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat93; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx0100000010000100x01x;
	cfgsin1[0:44] =  45 'bx0100000100000010x00xx0010000010000100x00xx10;
	cfgsin2[0:44] =  45 'b01000001000010x01xx0001000010000010x00xx00001;
	cfgsin3[0:44] =  45 'b00000001001x01xx0000100001000100x01xx10010001;
	cfgsin4[0:44] =  45 'b00000100x01xx1001000100000100x01xx10010001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1001000100000100x01xx1010000100000100x;
	cfgsin7[0:44] =  45 'b01xx1010000100000100x01xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100x01xx1010000100000100x01xx10;
	cfgsin14[0:44] =  45 'b10000100000100x01xx1010000100000100x01xx00100;
	cfgsin13[0:44] =  45 'b00001000001x00xx0100000100000001x00xx10010001;
	cfgsin12[0:44] =  45 'b00000100x00xx1010000001000100x01xx00100000010;
	cfgsin11[0:44] =  45 'b00010x01xx0010000001000010x01xx10010000100001;
	cfgsin10[0:44] =  45 'b00x01xx1100000100000100x01xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100000000100000100000100x000;
	cfgsin17[0:44] =  45 'b00010000100000100x00000100000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00001010000001000010x000001000;
	cfgsin19[0:44] =  45 'b00001000010x00000100000100000001x010001000001;
	cfgsin20[0:44] =  45 'b00000010x10000100000000001001x000000010000000;
	cfgsin21[0:44] =  45 'b01010x00101001000100000010x010000001000010000;
	cfgsin22[0:44] =  45 'b01x00000000010001000001x10000010000001000010x;
	cfgsin23[0:44] =  45 'b00001100000000001010x00000010000000001100x110;
// BR
	cfgsin31[0:44] =  45 'b00001000100000100x00010010000000010100x010010;
	cfgsin30[0:44] =  45 'b10000001000001x01000010000000001010x010000000;
	cfgsin29[0:44] =  45 'b10000001100x10000010000001000010x010000100000;
	cfgsin28[0:44] =  45 'b10000001x00000010000000001100x110000010001000;
	cfgsin27[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin26[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000001000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000010100001000000010000x;
end
endtask
task get_wl_pat92; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000001xx0xx1001000010000001x00x;
	cfgsin1[0:44] =  45 'bx1010000100000100x01xx1000001010000010x01xx10;
	cfgsin2[0:44] =  45 'b01000001000001x00xx0001000000001100x01xx00001;
	cfgsin3[0:44] =  45 'b00000010010x00xx0000100000001010x01xx10010001;
	cfgsin4[0:44] =  45 'b00000100x01xx1001000100000100x01xx10010001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1001000100000100x01xx1010000100000100x;
	cfgsin7[0:44] =  45 'b01xx1010000100000100x01xx0010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx0010000100000100x01xx1010000100000100x01xx10;
	cfgsin14[0:44] =  45 'b10000100000100x00xx1010000100000100x00xx10100;
	cfgsin13[0:44] =  45 'b00001000010x01xx1000010100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000010x01xx1000010001000001x01xx10100000010;
	cfgsin11[0:44] =  45 'b00001x01xx1100000100000001x01xx11000000000100;
	cfgsin10[0:44] =  45 'b10x01xx1010000100000001x01xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x1xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000100x01xx0010000100000100x01xx10100;
	cfgsin19[0:44] =  45 'b00010000100x00xx1010000010000010x00xx00100000;
	cfgsin20[0:44] =  45 'b00100100x01xx1010000010000001x01xx10010001000;
	cfgsin21[0:44] =  45 'b00010x00xx0001000100000010x00xx01000000100001;
	cfgsin22[0:44] =  45 'b00x11xx0001000000100100x01xx1000100100000100x;
	cfgsin23[0:44] =  45 'b01xx0000001010000001x00xx1000001001000100x00x;
// BR
	cfgsin31[0:44] =  45 'bx1100000000001001x00xx0000001001000010x00xx01;
	cfgsin30[0:44] =  45 'b00000001000100x10xx0100000001000100x10xx11000;
	cfgsin29[0:44] =  45 'b00001000010x00xx1010000100000001x00xx10000100;
	cfgsin28[0:44] =  45 'b01000010x00xx1010000001000001x00xx10010001000;
	cfgsin27[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin26[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin25[0:44] =  45 'b01xx1001000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx00100001000001000x1x0;
end
endtask
task get_wl_pat91; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100xx0000010000001000010xx01;
	cfgsin1[0:44] =  45 'b00100000000001001xx0000000100010000001xx00000;
	cfgsin2[0:44] =  45 'b01000001000100xx1010010000010000001xx00000010;
	cfgsin3[0:44] =  45 'b00100000001xx0100000010001000001xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000100000100000100xx0001100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx10000010;
	cfgsin13[0:44] =  45 'b00001000100xx0000000001100000010xx00000100001;
	cfgsin12[0:44] =  45 'b00000001xx0000010000001000001xx00000010000010;
	cfgsin11[0:44] =  45 'b00100xx0000000001001000001xx00001000000000100;
	cfgsin10[0:44] =  45 'b01xx0000100000100000010xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100xx1xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000100x01xx0100000100000001x01xx10000;
	cfgsin19[0:44] =  45 'b01001000001x01xx1010000000100100x01xx10100000;
	cfgsin20[0:44] =  45 'b01000001x01xx0010000010000001x00xx00010001000;
	cfgsin21[0:44] =  45 'b00010x00xx0001000000010010x10xx00100001000000;
	cfgsin22[0:44] =  45 'b10x00xx1001000000001010x00xx0100000100000001x;
	cfgsin23[0:44] =  45 'b00xx0010000000001100x01xx1100000001000001x01x;
// BR
	cfgsin31[0:44] =  45 'bx0100000010000010x00xx1001000001000001x00xx00;
	cfgsin30[0:44] =  45 'b10000001000010x01xx0001000001000001x01xx00100;
	cfgsin29[0:44] =  45 'b00001000001x00xx1000001001000100x00xx00100001;
	cfgsin28[0:44] =  45 'b00000100x01xx0100000001000010x01xx10010001000;
	cfgsin27[0:44] =  45 'b00100x00xx1010000100000100x00xx10100001000001;
	cfgsin26[0:44] =  45 'b00x01xx1010000100000100x00xx1010000100000100x;
	cfgsin25[0:44] =  45 'b00xx1001000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000001xx1xx;
end
endtask
task get_wl_pat90; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000000001001000010xx00;
	cfgsin1[0:44] =  45 'b00001000000001001xx0000001000100000001xx00000;
	cfgsin2[0:44] =  45 'b01000001000100xx0000000100010000001xx00000010;
	cfgsin3[0:44] =  45 'b00010000001xx0000010000001000001xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b10100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0100100000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00001000100xx0000001000000001010xx00000010001;
	cfgsin12[0:44] =  45 'b00000001xx0000000100100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000000001001xx00000001000010000;
	cfgsin10[0:44] =  45 'b01xx0000000001001000010xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0010000010100000010xx00000100;
	cfgsin19[0:44] =  45 'b00010000010xx0000001000000010001xx00000000010;
	cfgsin20[0:44] =  45 'b00100100xx0001010000010000001xx10001000001000;
	cfgsin21[0:44] =  45 'b00010xx1001100000100000010xx00010100000001000;
	cfgsin22[0:44] =  45 'b10xx1000000010001000010xx1001000001001000010x;
	cfgsin23[0:44] =  45 'bx1000010000000010001xx0000001000000001100xx00;
// BR
	cfgsin31[0:44] =  45 'b10000001000100001xx0100001000001000100xx10010;
	cfgsin30[0:44] =  45 'b01000000010001xx0000000100001000001xx00000010;
	cfgsin29[0:44] =  45 'b00001000100xx0100100000100000010xx10010000010;
	cfgsin28[0:44] =  45 'b00010001xx0000100000001000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx1000100000100000100xx10001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx1000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat89; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx001x001xx1000010000xx010x010xx00;
	cfgsin1[0:44] =  45 'b00100000xx001x001xx0000010000xx010x010xx00000;
	cfgsin2[0:44] =  45 'b01000xx001x010xx0000100000xx010x100xx00100100;
	cfgsin3[0:44] =  45 'b00xx100x010xx0001100000xx001x100xx0000100000x;
	cfgsin4[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin5[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin6[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin7[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin14[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00000010;
	cfgsin13[0:44] =  45 'b00xx010x100xx0000100000xx010x010xx0000100000x;
	cfgsin12[0:44] =  45 'bx010x001xx0000001000xx100x010xx0000001000xx10;
	cfgsin11[0:44] =  45 'b0x100xx0000100000xx001x001xx0000000010xx010x0;
	cfgsin10[0:44] =  45 'b01xx0000100000xx010x010xx0000100000xx100x100x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000001000000100010xx00000000;
	cfgsin19[0:44] =  45 'b01100000001xx0000000100100000100xx00000100001;
	cfgsin20[0:44] =  45 'b00000001xx0000010000100000001xx00101000000100;
	cfgsin21[0:44] =  45 'b00010xx0000100000010000100xx01000010000000010;
	cfgsin22[0:44] =  45 'b01xx0000100000000001010xx0000000010000001010x;
	cfgsin23[0:44] =  45 'bx0000000001100000001xx0000000100001000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000001000001xx0000010000001000100xx00000;
	cfgsin30[0:44] =  45 'b00100001000100xx0000000010001000100xx00001000;
	cfgsin29[0:44] =  45 'b00001000100xx0000000010100000001xx00000001001;
	cfgsin28[0:44] =  45 'b00000100xx0010010000001000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0100100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat88; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx001x001x00000100000xx100x0011x00;
	cfgsin1[0:44] =  45 'b00000001xx001x1001x0000010000xx010x0011x00000;
	cfgsin2[0:44] =  45 'b01000xx100x0011x0000010000xx001x0101x00000000;
	cfgsin3[0:44] =  45 'b01xx001x1001x0000001000xx010x0011x0000100000x;
	cfgsin4[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin5[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin6[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin7[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin14[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00000010;
	cfgsin13[0:44] =  45 'b00xx100x0101x0000000001xx010x1001x0000100000x;
	cfgsin12[0:44] =  45 'bx001x0101x0000001000xx100x0101x0000001000xx10;
	cfgsin11[0:44] =  45 'b0x0101x0000000001xx001x1001x0010000010xx001x0;
	cfgsin10[0:44] =  45 'b101x0000100000xx010x0011x0000100000xx100x1000;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000100000xx010x001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx100x100xx0000100000xx010x010xx00000001;
	cfgsin19[0:44] =  45 'b00xx010x100xx0000001000xx001x010xx0000000001x;
	cfgsin20[0:44] =  45 'bx001x010xx0000010000xx010x001xx0000100000xx01;
	cfgsin21[0:44] =  45 'b0x010xx0000000001xx001x001xx0000000010xx010x1;
	cfgsin22[0:44] =  45 'b00xx0000010000xx010x100xx0000100000xx100x010x;
	cfgsin23[0:44] =  45 'bx0010000010xx010x100xx0000001000xx010x010xx00;
// BR
	cfgsin31[0:44] =  45 'b00000010xx001x100xx0000001000xx100x010xx00000;
	cfgsin30[0:44] =  45 'b01000xx010x010xx0010001000xx001x010xx00100010;
	cfgsin29[0:44] =  45 'b00xx100x001xx0000000100xx001x100xx0000000001x;
	cfgsin28[0:44] =  45 'bx100x010xx0000001000xx001x001xx0000100000xx10;
	cfgsin27[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin26[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
end
endtask
task get_wl_pat87; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b001000000000000000000001000000000000000000000;
	cfgsin2[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000100000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000001000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000001000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000001000010000000000;
	cfgsin10[0:44] =  45 'b000000011000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin18[0:44] =  45 'b00000xx100x1000x0000100000xx010x0011x00000100;
	cfgsin19[0:44] =  45 'b00xx010x0011x0100000001xx001x1001x0000000001x;
	cfgsin20[0:44] =  45 'bx001x1001x0000010000xx001x0101x0000001000xx10;
	cfgsin21[0:44] =  45 'b0x0101x0000001000xx100x0011x0000000001xx001x1;
	cfgsin22[0:44] =  45 'b001x0000000001xx010x1001x0000000001xx010x1001;
	cfgsin23[0:44] =  45 'bx0000010000xx001x0101x0000001000xx100x0101x00;
// BR
	cfgsin31[0:44] =  45 'b00000001xx001x1001x0001001000xx100x0011x00000;
	cfgsin30[0:44] =  45 'b01000xx100x0011x0001001000xx100x0101x00000010;
	cfgsin29[0:44] =  45 'b00xx100x0101x0010100000xx010x0011x0000000001x;
	cfgsin28[0:44] =  45 'bx001x1001x0000001000xx100x0101x0000100000xx10;
	cfgsin27[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin26[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin25[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx100x001x0000;
end
endtask
task get_wl_pat86; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010000000000001000000000;
	cfgsin1[0:44] =  45 'b010000010000000000010000010010100010000110010;
	cfgsin2[0:44] =  45 'b000000000000000000000000000100000000001000001;
	cfgsin3[0:44] =  45 'b000000000000001000000000000000000010000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000010000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000010000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000100000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000010000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000100000000000000000000;
	cfgsin20[0:44] =  45 'b000000001000000000000000000000000000001000010;
	cfgsin21[0:44] =  45 'b000100000000001000000100100000000000000000000;
	cfgsin22[0:44] =  45 'b000000001001000000001000000000000000000000000;
	cfgsin23[0:44] =  45 'b000010000000000000000000000001000000000100010;
// BR
	cfgsin31[0:44] =  45 'b000000000000000001000000000000000000000000000;
	cfgsin30[0:44] =  45 'b010000000000101010001000000000000000000100000;
	cfgsin29[0:44] =  45 'b000000000000100000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000001000000000x;
end
endtask
task get_wl_pat85; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001100xx110x0101x0010010101x;
	cfgsin1[0:44] =  45 'bx000x0100x0110010100xx100x0000x0000001000xx01;
	cfgsin2[0:44] =  45 'b0x0110x0110001101xx110x0101x0010010100xx110x0;
	cfgsin3[0:44] =  45 'b000x0110010100xx110x0110x0110001100xx110x0110;
	cfgsin4[0:44] =  45 'bx0110001101xx110x0110x0010001101xx110x0110x01;
	cfgsin5[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin6[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin7[0:44] =  45 'b01xx110x0110x0110001101xx110x1010x0110001101x;
// TR
	cfgsin15[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001100xx11;
	cfgsin14[0:44] =  45 'b0x0110x0110001100xx110x0110x0110001101xx110x0;
	cfgsin13[0:44] =  45 'b101x0110010101xx110x0110x0110001101xx110x1010;
	cfgsin12[0:44] =  45 'bx0110001101xx010x0110x0101001101xx101x0101x01;
	cfgsin11[0:44] =  45 'b01010101xx001x0110x0101001100xx000x0110x01010;
	cfgsin10[0:44] =  45 'b01100xx000x0110x0110001101xx110x0110x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000101000000000100000000010000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000010000000001;
	cfgsin20[0:44] =  45 'b000000000000101000000010000000000000000000000;
	cfgsin21[0:44] =  45 'b000001000000000010000000000000100000001000000;
	cfgsin22[0:44] =  45 'b010000000000001000000000000010000101100000000;
	cfgsin23[0:44] =  45 'b000000000000000000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b100000000000000000001000000000000000000010010;
	cfgsin30[0:44] =  45 'b000000000000000000000000010000000000010000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat84; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x000000010000000x0110x10100000100;
	cfgsin1[0:44] =  45 'b0000x0101x010000000000000x0110x00010000100001;
	cfgsin2[0:44] =  45 'b0x0100x101000000000000x0110x001000010001000x0;
	cfgsin3[0:44] =  45 'b100x011000110000000x0001x010100100000010x0110;
	cfgsin4[0:44] =  45 'bx010100110000010x0110x011000110000010x0110x01;
	cfgsin5[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin6[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin7[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
// TR
	cfgsin15[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin14[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin13[0:44] =  45 'b110x011000110000010x0010x011000110000010x0110;
	cfgsin12[0:44] =  45 'bx011000110000000x0010x011000110000010x0110x01;
	cfgsin11[0:44] =  45 'b1000110000010x0101x010100110000001x0110x01100;
	cfgsin10[0:44] =  45 'b0110000010x0100x001000110000010x0110x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx000x0110x1000010011xx010x0;
	cfgsin19[0:44] =  45 'b110x0110010100xx110x1000x0110010100xx110x0100;
	cfgsin20[0:44] =  45 'bx0110001001xx000x0110x0010001101xx110x0010x00;
	cfgsin21[0:44] =  45 'b01000001xx101x0000x0100000101xx010x0100x01100;
	cfgsin22[0:44] =  45 'b00101xx100x0000x0100001101xx001x0000x00010011;
	cfgsin23[0:44] =  45 'b01xx010x1010x0101110001xx101x0001x0101000100x;
// BR
	cfgsin31[0:44] =  45 'bx001x0101x0101010000xx010x0110x1010001010xx00;
	cfgsin30[0:44] =  45 'b0x1001x0110000000xx000x1000x0110001100xx001x0;
	cfgsin29[0:44] =  45 'b110x0101001001xx010x0110x0110001101xx110x1010;
	cfgsin28[0:44] =  45 'bx1010001011xx110x0110x0110001101xx110x0110x01;
	cfgsin27[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin26[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x0001010011xx;
end
endtask
task get_wl_pat83; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000100100010000001000000000000010000;
	cfgsin1[0:44] =  45 'b000100000000000100100001000000001000000000000;
	cfgsin2[0:44] =  45 'b000010000001000000000100000001000010000000100;
	cfgsin3[0:44] =  45 'b001000000000000000101000000000001000000000000;
	cfgsin4[0:44] =  45 'b000000000000100000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000100000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000100000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000001000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x1001x10010100000001;
	cfgsin18[0:44] =  45 'b0x1010x011000110000001x0101x011000010000001x0;
	cfgsin19[0:44] =  45 'b100x001000110000110x0101x010101010000000x0000;
	cfgsin20[0:44] =  45 'bx010000100000010x1000x010001010000001x1000x01;
	cfgsin21[0:44] =  45 'b0001000000001x0110x011000110000010x1010x10100;
	cfgsin22[0:44] =  45 'b1000000100x0110x011000100000010x0100x01100010;
	cfgsin23[0:44] =  45 'b0000000x0110x001001010000000x1000x00100001000;
// BR
	cfgsin31[0:44] =  45 'b0000x0100x010100010000000x0100x00010001000001;
	cfgsin30[0:44] =  45 'b0x0101x000000010000000x0000x010010100000000x0;
	cfgsin29[0:44] =  45 'b000x010000110000001x1000x001001010000010x0101;
	cfgsin28[0:44] =  45 'bx011000110000010x0000x011000110000010x0110x01;
	cfgsin27[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin26[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin25[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100000x;
end
endtask
task get_wl_pat82; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000010000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000001000000010000000000000010001010;
	cfgsin2[0:44] =  45 'b000000000000001010000000000000000000010000000;
	cfgsin3[0:44] =  45 'b000000000000001000000000000000000001000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000010000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000010000000000100000000010000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000010000000;
	cfgsin19[0:44] =  45 'b000001000000000000000000000000000000000101000;
	cfgsin20[0:44] =  45 'b000010000100000000010000100000001000000000000;
	cfgsin21[0:44] =  45 'b100000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000100000000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000000100000000000000000000100000010000010000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000100000000000000000000;
	cfgsin30[0:44] =  45 'b000000100000000000000100000000000000000001000;
	cfgsin29[0:44] =  45 'b110000100000000000000000100000000000010000000;
	cfgsin28[0:44] =  45 'b000000000000000001000000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000100000000000000000000x;
end
endtask
task get_wl_pat81; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx1xx0001000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1000010100000100xx1xx0010000001000100xx0xx00;
	cfgsin2[0:44] =  45 'b10000001000100xx0xx1001000001000100xx0xx00010;
	cfgsin3[0:44] =  45 'b00001000100xx0xx1000100000001100xx0xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx0010000100000100xx1xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1010000001000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1001000010000100xx1xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx0xx1010000001000100xx0xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000100000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000100000000000;
	cfgsin19[0:44] =  45 'b001000000000001000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b100000000010000000000000000000000000000001000;
	cfgsin21[0:44] =  45 'b000001000000000000000000000010010000000000000;
	cfgsin22[0:44] =  45 'b001000000000000000000001000000000001000000001;
	cfgsin23[0:44] =  45 'b000000000000001000000010000000001000000000010;
// BR
	cfgsin31[0:44] =  45 'b010100000100000010010000000001010000010000000;
	cfgsin30[0:44] =  45 'b000000000100010000000001001000001000000010000;
	cfgsin29[0:44] =  45 'b000000000000000000000000100000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000100000000100000000000010000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000010000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000000000000000000010000;
end
endtask
task get_wl_pat80; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000010000100xx0xx1001000100000100xx1x;
	cfgsin1[0:44] =  45 'bx1010000001000010xx1xx0000010001000001xx1xx11;
	cfgsin2[0:44] =  45 'b00000001000001xx0xx0100000001000001xx1xx11000;
	cfgsin3[0:44] =  45 'b00001000001xx1xx1100000000010001xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1100000001000001xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1100000000001100xx1xx11000000001001;
	cfgsin10[0:44] =  45 'b00xx1xx1100000001000001xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000010000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000001000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000001000100xx0xx10100;
	cfgsin19[0:44] =  45 'b00001000100xx0xx0001000000001010xx1xx10010000;
	cfgsin20[0:44] =  45 'b00010010xx0xx1001000100000100xx0xx10100000010;
	cfgsin21[0:44] =  45 'b00100xx1xx1010000010000010xx0xx00100000010001;
	cfgsin22[0:44] =  45 'b00xx1xx0010000100000100xx1xx1010000100000100x;
	cfgsin23[0:44] =  45 'bx1xx1001000001000100xx0xx1000010000010010xx0x;
// BR
	cfgsin31[0:44] =  45 'bx0001000000001100xx0xx1100000000100100xx1xx10;
	cfgsin30[0:44] =  45 'b00100010000100xx1xx1100000010000100xx1xx00010;
	cfgsin29[0:44] =  45 'b00001000010xx1xx1000010100000100xx1xx01000000;
	cfgsin28[0:44] =  45 'b00001100xx1xx0000100001000100xx1xx00100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx0010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat79; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000010000100x01000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00100000000001010xx0001100000001000001xx00000;
	cfgsin2[0:44] =  45 'b10000001000001xx0100010000001000001xx00000100;
	cfgsin3[0:44] =  45 'b00001000001xx0000010000100000010xx00000100001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin5[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin6[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin7[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin14[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin13[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin12[0:44] =  45 'b00000100xx0000010000001000001xx00000100001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000010000100xx00000100001000001;
	cfgsin10[0:44] =  45 'b00xx0000010000001000001xx0000010000100000100x;
	cfgsin9[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001010000010000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx0001000001000001xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000001000001xx1xx10100;
	cfgsin19[0:44] =  45 'b00000100001xx1xx0100000001000001xx1xx00000100;
	cfgsin20[0:44] =  45 'b01000100xx1xx0100000100000100xx1xx00000010010;
	cfgsin21[0:44] =  45 'b00001xx1xx1010000000100100xx1xx11000000010000;
	cfgsin22[0:44] =  45 'b01xx0xx1010000100000010xx0xx1000010100000010x;
	cfgsin23[0:44] =  45 'bx0xx0100000001000001xx0xx0000100001000100xx1x;
// BR
	cfgsin31[0:44] =  45 'bx0100000000100100xx1xx0010000000100010xx0xx01;
	cfgsin30[0:44] =  45 'b00000001000010xx0xx1010000000001010xx0xx11000;
	cfgsin29[0:44] =  45 'b00001000100xx0xx0010000000100010xx0xx10100001;
	cfgsin28[0:44] =  45 'b00000001xx1xx1100000001000001xx0xx10100001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0100000001000100xx1xx;
end
endtask
task get_wl_pat78; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000010000001xx0000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00000010100000100xx0000001000001000100xx00000;
	cfgsin2[0:44] =  45 'b00010001000100xx0000001000001000100xx00000010;
	cfgsin3[0:44] =  45 'b00001000100xx0000000100100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000001000001xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000001000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000001000001xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000010000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x00000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0001100000001000010xx00000;
	cfgsin18[0:44] =  45 'b10000100000100xx0000100000001000001xx00001000;
	cfgsin19[0:44] =  45 'b00001000001xx0001000010001000100xx00001000000;
	cfgsin20[0:44] =  45 'b01000001xx0001010000100000100xx00011000000010;
	cfgsin21[0:44] =  45 'b00010xx0000100000000100001xx00000100000010000;
	cfgsin22[0:44] =  45 'b10xx0000100000100000010xx0000100000001000010x;
	cfgsin23[0:44] =  45 'bx0001001000000100001xx0101100000001000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00000100010000001xx0000000100000010010xx00000;
	cfgsin30[0:44] =  45 'b00010001000001xx1000000100001000001xx00000010;
	cfgsin29[0:44] =  45 'b00001000001xx1001100000100000010xx10000000101;
	cfgsin28[0:44] =  45 'b00000010xx0000000010100000001xx10000100001000;
	cfgsin27[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin26[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin25[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
end
endtask
task get_wl_pat77; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000010000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000010xx0000000010001000001xx00000;
	cfgsin2[0:44] =  45 'b01000001000010xx0010001000001000001xx00000010;
	cfgsin3[0:44] =  45 'b00001000001xx0000100000100000001xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000000001001000001xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000010000100xx00000010000001001;
	cfgsin10[0:44] =  45 'b00xx0000001000001000001xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000010000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000000010001000001xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000001000001xx00000010;
	cfgsin19[0:44] =  45 'b00001000001xx0000001000001000001xx00000000100;
	cfgsin20[0:44] =  45 'b01000001xx0000000010001000100xx00000000100001;
	cfgsin21[0:44] =  45 'b00010xx0000001000001000010xx00000010000010000;
	cfgsin22[0:44] =  45 'b01xx0100000100010000010xx0100000001010000100x;
	cfgsin23[0:44] =  45 'bx0100000010001000100xx0000000010001000010xx00;
// BR
	cfgsin31[0:44] =  45 'b10000100100000001xx0001000100010000010xx10100;
	cfgsin30[0:44] =  45 'b00100001000100xx0000001000001000100xx10000000;
	cfgsin29[0:44] =  45 'b10001000100xx0000001000100000100xx00000100001;
	cfgsin28[0:44] =  45 'b00000100xx0000001000001000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
end
endtask
task get_wl_pat76; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000010000100x00000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00001000000100001xx0000000010010000001xx00000;
	cfgsin2[0:44] =  45 'b01000010000001xx0000001000000100010xx00000010;
	cfgsin3[0:44] =  45 'b00000100010xx0000010000000001010xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000001000001xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000001xx00000010000010000;
	cfgsin10[0:44] =  45 'b01xx0000001000001000001xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000010000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000001000001xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000001000001xx00000010;
	cfgsin19[0:44] =  45 'b00001000100xx0000000100001000001xx00010010001;
	cfgsin20[0:44] =  45 'b00000001xx0000001000100000100xx00000010000010;
	cfgsin21[0:44] =  45 'b00100xx0000000010000100001xx00000000100010000;
	cfgsin22[0:44] =  45 'b01xx0000001000100000010xx0000001000100000010x;
	cfgsin23[0:44] =  45 'bx0000010000001000001xx0000000001000001001xx00;
// BR
	cfgsin31[0:44] =  45 'b00000100010000100xx0000001000000001100xx00000;
	cfgsin30[0:44] =  45 'b00010001000001xx0000000001000001010xx00000100;
	cfgsin29[0:44] =  45 'b00001000010xx0000000100100000010xx00000010001;
	cfgsin28[0:44] =  45 'b00000010xx0000001000000010001xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
end
endtask
task get_wl_pat75; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000010000100xx0000000010100000100xx00;
	cfgsin1[0:44] =  45 'b00010000100000010xx0000000100001000100xx00010;
	cfgsin2[0:44] =  45 'b01000001000100xx0000010000001000100xx00100100;
	cfgsin3[0:44] =  45 'b00001000100xx0000001000000010001xx01000010001;
	cfgsin4[0:44] =  45 'b00000100xx0001001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000001000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000000100010000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000001000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000010000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000000010001000001xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000001000100xx00000010;
	cfgsin19[0:44] =  45 'b00001000010xx0000000100001000001xx00000100000;
	cfgsin20[0:44] =  45 'b01000001xx0000000010000001100xx00000000100010;
	cfgsin21[0:44] =  45 'b00001xx0000001000000100001xx00000010000010000;
	cfgsin22[0:44] =  45 'b01xx0000001000001000100xx0000010000000100010x;
	cfgsin23[0:44] =  45 'bx0000001000000010001xx0000001000000100001xx10;
// BR
	cfgsin31[0:44] =  45 'b00001000000010010xx1000000010001000100xx00000;
	cfgsin30[0:44] =  45 'b00100000001001xx0000000100000010001xx00000010;
	cfgsin29[0:44] =  45 'b00001000001xx0000000010000010001xx00000010000;
	cfgsin28[0:44] =  45 'b10000010xx0000010000000001001xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
end
endtask
task get_wl_pat74; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000010000001xx1000000010100000100xx00;
	cfgsin1[0:44] =  45 'b00001000100000100xx0000000100001000001xx10000;
	cfgsin2[0:44] =  45 'b00100001000001xx0000001000001000001xx01000010;
	cfgsin3[0:44] =  45 'b00001000001xx0000001000100000100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx1000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000000010001000001xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0001001000010000100xx00000000101000001;
	cfgsin10[0:44] =  45 'b00xx0000000010001000001xx1000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001001000010000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000001000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000000100001000100xx00001000;
	cfgsin19[0:44] =  45 'b00001000100xx0000000100001000010xx00000010000;
	cfgsin20[0:44] =  45 'b01000010xx0000001000100000100xx00000000101000;
	cfgsin21[0:44] =  45 'b00100xx0000100000100000100xx00000001000010001;
	cfgsin22[0:44] =  45 'b00xx0000001000100000100xx0000100000000010010x;
	cfgsin23[0:44] =  45 'bx0000000010001000010xx0000100000000001010xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000001000001xx0000000100100000100xx00000;
	cfgsin30[0:44] =  45 'b00100001000010xx0010000100000100010xx00000001;
	cfgsin29[0:44] =  45 'b00001000010xx0000001000000001001xx10000010001;
	cfgsin28[0:44] =  45 'b00000010xx0000001000001000001xx01000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
end
endtask
task get_wl_pat73; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000100x00xx1000010100000100xx1x;
	cfgsin1[0:44] =  45 'bx1000010001000001xx1xx1000010100000001xx0xx00;
	cfgsin2[0:44] =  45 'b01000100000001xx1xx1000100100000001xx0xx00001;
	cfgsin3[0:44] =  45 'b00010000001xx1xx1001000001000010xx0xx10010001;
	cfgsin4[0:44] =  45 'b00000100xx0xx0001000100000100xx1xx10010001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1001000100000001xx1xx10010001000;
	cfgsin11[0:44] =  45 'b00100xx1xx0000100100000100xx1xx10001001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1001000100000001xx0xx1001000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0001001000001000001xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0001100000001000001xx00001000;
	cfgsin19[0:44] =  45 'b00001000001xx0001000100001000100xx00000010000;
	cfgsin20[0:44] =  45 'b01000100xx0001001000100000100xx00011000000010;
	cfgsin21[0:44] =  45 'b00001xx0000001000010000001xx00000001000010000;
	cfgsin22[0:44] =  45 'b01xx0000001000100000010xx0000001000100000100x;
	cfgsin23[0:44] =  45 'bx0100000001001000100xx0000000100100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b01100000010000010xx0001001000000001001xx00000;
	cfgsin30[0:44] =  45 'b10000001000100xx0000000001000001100xx01100001;
	cfgsin29[0:44] =  45 'b00001000100xx0000000100100000010xx00000010000;
	cfgsin28[0:44] =  45 'b00001100xx1000010000100000100xx00000010001000;
	cfgsin27[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin26[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
end
endtask
task get_wl_pat72; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000001x00xx0100000100000100x00x;
	cfgsin1[0:44] =  45 'bx0100000001000010x10xx0001000100000001x00xx10;
	cfgsin2[0:44] =  45 'b00100000001001x00xx0001000000100001x11xx10010;
	cfgsin3[0:44] =  45 'b00100000001x10xx1010000001000010x00xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1010000100000100x01xx1100000100000100x;
	cfgsin7[0:44] =  45 'b01xx1100000100000100x01xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx10;
	cfgsin14[0:44] =  45 'b10000100000100x01xx1010000100000100x01xx10100;
	cfgsin13[0:44] =  45 'b00100000100x01xx1010000100000100x01xx10100001;
	cfgsin12[0:44] =  45 'b00000100x01xx1010000100000001x01xx10100001000;
	cfgsin11[0:44] =  45 'b00100x01xx1010000100000010x00xx10100001000001;
	cfgsin10[0:44] =  45 'b00x01xx1001000100000001x00xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100x01xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx0001000000001001xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx0001000010000001xx1xx10010;
	cfgsin19[0:44] =  45 'b00010000001xx1xx0000100100000001xx1xx10010001;
	cfgsin20[0:44] =  45 'b00000001xx1xx0001000100000100xx1xx00001000000;
	cfgsin21[0:44] =  45 'b01001xx1xx1000100100000010xx1xx10001000000100;
	cfgsin22[0:44] =  45 'b01xx1xx1000010001000010xx1xx1000100001000001x;
	cfgsin23[0:44] =  45 'bx0xx1000100010000001xx1xx1001000100000001xx0x;
// BR
	cfgsin31[0:44] =  45 'bx0000010000010100xx0xx0000100000001100xx1xx10;
	cfgsin30[0:44] =  45 'b00010000100001xx1xx0000010000001001xx0xx00010;
	cfgsin29[0:44] =  45 'b00100000001xx1xx1010000001000100xx0xx10010000;
	cfgsin28[0:44] =  45 'b01000010xx0xx1001000000010010xx0xx10010001000;
	cfgsin27[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin26[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat71; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx1001100000100000100x010;
	cfgsin1[0:44] =  45 'b01010000100000010x00101000010100000001x000000;
	cfgsin2[0:44] =  45 'b01000100000001x00100000010100000001x000001000;
	cfgsin3[0:44] =  45 'b00010000001x01000010000000001010x001001000001;
	cfgsin4[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin6[0:44] =  45 'b00x00000010000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x00000100000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000001x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000001x01000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000100x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000010x01xx10;
	cfgsin18[0:44] =  45 'b10000100000100x01xx1000010010000100x00xx10000;
	cfgsin19[0:44] =  45 'b10001000100x00xx1100000100000100x00xx10010001;
	cfgsin20[0:44] =  45 'b00000010x00xx1010000100000010x01xx11000000001;
	cfgsin21[0:44] =  45 'b00001x00xx1000010000010010x01xx00100001000000;
	cfgsin22[0:44] =  45 'b10x00xx0010000001000100x11xx1000010001000100x;
	cfgsin23[0:44] =  45 'b00xx1100000010000010x00xx1000010000100010x00x;
// BR
	cfgsin31[0:44] =  45 'bx1010000000001001x00xx1010000000100010x00xx10;
	cfgsin30[0:44] =  45 'b00100001000100x00xx1010000001000100x01xx10100;
	cfgsin29[0:44] =  45 'b00000010001x01xx1000001001000010x01xx10000010;
	cfgsin28[0:44] =  45 'b01000010x01xx1010000000010001x01xx11000001000;
	cfgsin27[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin26[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000001x01x0;
end
endtask
task get_wl_pat70; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001xx0000100000100000100x100;
	cfgsin1[0:44] =  45 'b00000100001000010x10000010000100000001x101000;
	cfgsin2[0:44] =  45 'b10000100000001x10010010000100000001x100000100;
	cfgsin3[0:44] =  45 'b00010000001x10000100000001000010x100001000001;
	cfgsin4[0:44] =  45 'b00000100x10000010000100000100x100000100001000;
	cfgsin5[0:44] =  45 'b00100x10000010000100000100x100000100001000001;
	cfgsin6[0:44] =  45 'b00x10000010000100000100x10000100000100000100x;
	cfgsin7[0:44] =  45 'b10000100000100000100x10000010000100000100x100;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x10000100000100000100x100000;
	cfgsin14[0:44] =  45 'b10000100000100x10000010000100000100x100000100;
	cfgsin13[0:44] =  45 'b00100000100x10000010000100000100x100000100001;
	cfgsin12[0:44] =  45 'b00000100x10000010000100000001x100000100001000;
	cfgsin11[0:44] =  45 'b00100x10000100000000001001x100000010001000001;
	cfgsin10[0:44] =  45 'b00x10000010000100000001x10000010000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000100000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000010000010000010x000000010;
	cfgsin19[0:44] =  45 'b00010000010x01000100000100000010x000000000101;
	cfgsin20[0:44] =  45 'b00000100x01000000010100000100x000000000101000;
	cfgsin21[0:44] =  45 'b00010x01000010000001000100x000010100001000001;
	cfgsin22[0:44] =  45 'b00x01001010000001000001x00000010000100000001x;
	cfgsin23[0:44] =  45 'b00000001000010000100x01000010000100000100x000;
// BR
	cfgsin31[0:44] =  45 'b00000100100000010x01000100000001000001x000000;
	cfgsin30[0:44] =  45 'b10000001000010x01000010000001000010x000000100;
	cfgsin29[0:44] =  45 'b00100000001x00000010000010000010x000000100000;
	cfgsin28[0:44] =  45 'b01000010x00000000001010000001x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin26[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001010000100000100xx00x;
end
endtask
task get_wl_pat69; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00000001100000100xx0000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000001000010x00000000010000001010x000000;
	cfgsin2[0:44] =  45 'b01000000100010x00000100000000001001x000001000;
	cfgsin3[0:44] =  45 'b00000001001x00000100000000001010x000000100001;
	cfgsin4[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000100000100x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000100000100x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin12[0:44] =  45 'b00000100x00000100000000100001x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000000001010x010000100000000010;
	cfgsin10[0:44] =  45 'b10x00000010000100000001x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000000001100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000010000000010001x100000;
	cfgsin18[0:44] =  45 'b10000100000100x10000010000100000001x100000100;
	cfgsin19[0:44] =  45 'b00100000001x10000010000010000001x100000100000;
	cfgsin20[0:44] =  45 'b00001001x10000100000010000001x100000100000100;
	cfgsin21[0:44] =  45 'b00100x10000100000000100001x100000100000000010;
	cfgsin22[0:44] =  45 'b01x10000000010001000010x10000000001001000010x;
	cfgsin23[0:44] =  45 'b10100010000001000001x10000010000000001001x100;
// BR
	cfgsin31[0:44] =  45 'b00001000010000100x10000000100100000100x100000;
	cfgsin30[0:44] =  45 'b10000010000001x10000010000010000001x100000100;
	cfgsin29[0:44] =  45 'b00100000001x10000010000001000010x100000100000;
	cfgsin28[0:44] =  45 'b01000010x10000010000000010001x100001000001000;
	cfgsin27[0:44] =  45 'b00100x10000010000100000100x100000100001000001;
	cfgsin26[0:44] =  45 'b00x10000010000100000100x10000010000100000100x;
	cfgsin25[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat68; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000000100100x00000100000001000001x000001;
	cfgsin2[0:44] =  45 'b00000001000001x00000100000001000010x000001000;
	cfgsin3[0:44] =  45 'b00000100010x00000100000000001100x000000100001;
	cfgsin4[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000100000100x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000100000100x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin12[0:44] =  45 'b00000100x00000100000000010010x100000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000000100100x000100100000001001;
	cfgsin10[0:44] =  45 'b00x00000010000000100001x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000001x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000100000010000001x010000100;
	cfgsin19[0:44] =  45 'b00001000001x00000010000100000001x010000100000;
	cfgsin20[0:44] =  45 'b10000100x00000010000000010100x000000100001000;
	cfgsin21[0:44] =  45 'b00001x00000000010001000010x000000100001000000;
	cfgsin22[0:44] =  45 'b01x00000100000001000010x00000100000001000010x;
	cfgsin23[0:44] =  45 'b00000010000000100010x00000010000001000001x110;
// BR
	cfgsin31[0:44] =  45 'b00010000001000100x00000100000010000010x101000;
	cfgsin30[0:44] =  45 'b01000100000010x00000000001000010010x000000100;
	cfgsin29[0:44] =  45 'b00100000001x00000010000001000100x000000000010;
	cfgsin28[0:44] =  45 'b01000100x10000100000000100100x000000100001000;
	cfgsin27[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin26[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat67; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000001000010x00000100000100000001x001001;
	cfgsin2[0:44] =  45 'b00000000001001x00000000100100000001x000000000;
	cfgsin3[0:44] =  45 'b10010000001x00000000001000010100x000000100001;
	cfgsin4[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000100000100x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000100000100x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin12[0:44] =  45 'b00000100x00000100000100000010x100000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000010x000000100001000000;
	cfgsin10[0:44] =  45 'b01x10000010000100000100x10000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000001x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000100000000100100x100010100;
	cfgsin19[0:44] =  45 'b00000100001x00000100000100000001x000010000100;
	cfgsin20[0:44] =  45 'b01000010x00000000100001000010x100001000000010;
	cfgsin21[0:44] =  45 'b00001x00000010000000010010x000000100001000000;
	cfgsin22[0:44] =  45 'b01x00000010000001000010x00000010000000001100x;
	cfgsin23[0:44] =  45 'b00010010000000010001x00000010000000100010x000;
// BR
	cfgsin31[0:44] =  45 'b00100000000100010x11000001000000010100x001011;
	cfgsin30[0:44] =  45 'b00000000010001x00001100000100000001x000000000;
	cfgsin29[0:44] =  45 'b01100000001x01000000001010000010x000000100001;
	cfgsin28[0:44] =  45 'b00000010x00100001000100000010x000000100001000;
	cfgsin27[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin26[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat66; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100001000001000100000100x001;
	cfgsin1[0:44] =  45 'b00000001001000010x10100000100100000100x100000;
	cfgsin2[0:44] =  45 'b00001000001100x00100001000000001010x100000010;
	cfgsin3[0:44] =  45 'b00000001100x10000001000000001010x000000001001;
	cfgsin4[0:44] =  45 'b00000100x00000001000100000100x000000010001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000100000100x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000010001;
	cfgsin12[0:44] =  45 'b00000100x00000000010000001001x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00001100000000001100x000000100000000011;
	cfgsin10[0:44] =  45 'b00x00000001000000001001x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000001x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000000010010000001x000000000;
	cfgsin19[0:44] =  45 'b10001000010x10000000010100000001x000001000001;
	cfgsin20[0:44] =  45 'b00000100x00000100000100000100x000010100000000;
	cfgsin21[0:44] =  45 'b10001x00010100000001000001x100001000001000000;
	cfgsin22[0:44] =  45 'b01x00000010000001000010x00000010000001000100x;
	cfgsin23[0:44] =  45 'b00000000010100000001x00000100000001000010x000;
// BR
	cfgsin31[0:44] =  45 'b00010000000100100x00000010000001000001x000000;
	cfgsin30[0:44] =  45 'b00100001000001x01000000100000100100x000000100;
	cfgsin29[0:44] =  45 'b00010000001x00000001000001000010x000000000010;
	cfgsin28[0:44] =  45 'b01000010x00000000001001000001x000000100001000;
	cfgsin27[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin26[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100x0000;
end
endtask
task get_wl_pat65; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000001000x0xx1001000100000100x00x;
	cfgsin1[0:44] =  45 'bx1001000010000100x00xx1000100100000010x00xx10;
	cfgsin2[0:44] =  45 'b01000010000010x00xx1001000100000100x01xx10000;
	cfgsin3[0:44] =  45 'b10100000010x01xx1000100001000001x01xx10001001;
	cfgsin4[0:44] =  45 'b00000100x01xx1001000100000100x01xx10010001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1001000100000100x01xx1010000100000100x;
	cfgsin7[0:44] =  45 'b01xx1010000100000100x01xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100x01xx1010000100000100x01xx10;
	cfgsin14[0:44] =  45 'b10000100000100x01xx1010000100000100x01xx10100;
	cfgsin13[0:44] =  45 'b00100000100x01xx1010000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000100x01xx1010000010000100x01xx10100001000;
	cfgsin11[0:44] =  45 'b00100x01xx0010000001000010x01xx00100000010000;
	cfgsin10[0:44] =  45 'b10x01xx1010000010000100x01xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100000000100000100000100x000;
	cfgsin17[0:44] =  45 'b00010000100000100x00001100000100000001x000010;
	cfgsin18[0:44] =  45 'b10000100000100x00001010000010000001x000000100;
	cfgsin19[0:44] =  45 'b00010000001x00010010000000001001x000000000101;
	cfgsin20[0:44] =  45 'b00000001x00001010000000001100x000000010001000;
	cfgsin21[0:44] =  45 'b00010x00000001000001000001x100000100000000010;
	cfgsin22[0:44] =  45 'b01x00000001000001000010x00001010000001000100x;
	cfgsin23[0:44] =  45 'b00000100000000001100x10000010000001000100x000;
// BR
	cfgsin31[0:44] =  45 'b01100000000001100x00000010000001000010x100000;
	cfgsin30[0:44] =  45 'b00001000001010x00000010000001000100x000000000;
	cfgsin29[0:44] =  45 'b01000001001x00000010000001000100x010000010000;
	cfgsin28[0:44] =  45 'b01000010x10000001000000001100x110000010001000;
	cfgsin27[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin26[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000001000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000010100000000010010000x;
end
endtask
task get_wl_pat64; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1100000100000001xx0xx1001000100000100x00x;
	cfgsin1[0:44] =  45 'bx1001000000010001x01xx0000100000100001x00xx00;
	cfgsin2[0:44] =  45 'b01000100000001x01xx1001000000001001x00xx10010;
	cfgsin3[0:44] =  45 'b00000001001x01xx1000100000010100x01xx10001001;
	cfgsin4[0:44] =  45 'b00000100x01xx1001000100000100x01xx10010001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1001000100000100x01xx1010000100000100x;
	cfgsin7[0:44] =  45 'b01xx1010000100000100x01xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100x01xx1010000100000100x01xx10;
	cfgsin14[0:44] =  45 'b10000100000100x01xx1010000100000100x01xx10100;
	cfgsin13[0:44] =  45 'b00100000100x00xx1010000100000100x00xx10010001;
	cfgsin12[0:44] =  45 'b00000100x00xx1010000010000010x00xx10100001000;
	cfgsin11[0:44] =  45 'b00100x01xx1000010001000001x01xx10100000010000;
	cfgsin10[0:44] =  45 'b01x01xx1010000010000010x01xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x1xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx0100000100000001x01xx00;
	cfgsin18[0:44] =  45 'b10000100000100x01xx0100000100000100x01xx01000;
	cfgsin19[0:44] =  45 'b00100000100x01xx0010000010000001x01xx00100000;
	cfgsin20[0:44] =  45 'b01000010x01xx0010000001000001x01xx00010001000;
	cfgsin21[0:44] =  45 'b00001x01xx0001000001000010x01xx10100001000000;
	cfgsin22[0:44] =  45 'b01x01xx1001000100000001x01xx0010000100000001x;
	cfgsin23[0:44] =  45 'b11xx0000001000001010x01xx1010000000010010x01x;
// BR
	cfgsin31[0:44] =  45 'bx0000001001000001x00xx1001000100000100x00xx00;
	cfgsin30[0:44] =  45 'b01000000010100x00xx0000010100000001x01xx10100;
	cfgsin29[0:44] =  45 'b00100000001x00xx1010000100000010x00xx10000010;
	cfgsin28[0:44] =  45 'b00100001x00xx1000001001000010x00xx10010001000;
	cfgsin27[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin26[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin25[0:44] =  45 'b01xx1001000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx00100001000001000x1x0;
end
endtask
task get_wl_pat63; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000001xx0000100000100000100xx01;
	cfgsin1[0:44] =  45 'b00000001100000010xx0001100000100000001xx00100;
	cfgsin2[0:44] =  45 'b10000010000001xx0000100000100000001xx10001000;
	cfgsin3[0:44] =  45 'b00100000001xx0000010000100000001xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx10001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000010000010000001xx10001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000001000100xx00000010000010001;
	cfgsin10[0:44] =  45 'b00xx0000001000010000001xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100xx1xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx0100000100000001x01xx00;
	cfgsin18[0:44] =  45 'b10000100000100x01xx1010000000001010x01xx10100;
	cfgsin19[0:44] =  45 'b00000001010x01xx0010000100000001x01xx00100000;
	cfgsin20[0:44] =  45 'b00100100x01xx0010000001000010x00xx00010000000;
	cfgsin21[0:44] =  45 'b01001x00xx0001000100000100x01xx10100001000000;
	cfgsin22[0:44] =  45 'b01x01xx1001000000010100x00xx1010000001000010x;
	cfgsin23[0:44] =  45 'b01xx0010000000010001x01xx0010000100000001x00x;
// BR
	cfgsin31[0:44] =  45 'bx0001000001000010x10xx1000010001000001x00xx00;
	cfgsin30[0:44] =  45 'b10000010000001x00xx0010000000100010x11xx10100;
	cfgsin29[0:44] =  45 'b00000010001x10xx0010000000010001x01xx00100000;
	cfgsin28[0:44] =  45 'b00001100x01xx1010000010000001x11xx10010001000;
	cfgsin27[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin26[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin25[0:44] =  45 'b01xx1001000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000001xx1xx;
end
endtask
task get_wl_pat62; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin1[0:44] =  45 'b00000100010000010xx0000001000100000001xx00000;
	cfgsin2[0:44] =  45 'b01000010000010xx0000010000100000001xx00000100;
	cfgsin3[0:44] =  45 'b00100000001xx0000100000001000010xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx1000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0100100000010000001xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010000010001;
	cfgsin10[0:44] =  45 'b00xx0000100000010000001xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0001100000100000001xx00011;
	cfgsin18[0:44] =  45 'b00000100000100xx0000001000100000001xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0001100000000010001xx00100000010;
	cfgsin20[0:44] =  45 'b00010001xx0001001000001000100xx00001000001000;
	cfgsin21[0:44] =  45 'b00100xx1000100000100000010xx00001000001000000;
	cfgsin22[0:44] =  45 'b01xx0000100000100000010xx0000000001000010100x;
	cfgsin23[0:44] =  45 'bx0001000001010000001xx0000100000000100010xx00;
// BR
	cfgsin31[0:44] =  45 'b10001000000001100xx1000001000001000100xx10000;
	cfgsin30[0:44] =  45 'b00010001000001xx0000001000010000100xx00000100;
	cfgsin29[0:44] =  45 'b00000100001xx1001000100010000010xx00001000000;
	cfgsin28[0:44] =  45 'b10000010xx0000001000000001001xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat61; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000xx001x001xx1000100000xx100x100xx00;
	cfgsin1[0:44] =  45 'b00100000xx100x100xx0000000010xx100x100xx01000;
	cfgsin2[0:44] =  45 'b00010xx010x100xx0000001000xx010x100xx00000010;
	cfgsin3[0:44] =  45 'b00xx010x100xx0000000001xx010x100xx0000100000x;
	cfgsin4[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin5[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin6[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin7[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin14[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin13[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin12[0:44] =  45 'bx100x100xx0000010000xx010x001xx0000100000xx10;
	cfgsin11[0:44] =  45 'b0x100xx0000001000xx100x100xx0000001000xx010x1;
	cfgsin10[0:44] =  45 'b00xx0000010000xx010x001xx0000100000xx100x100x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000010000001xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000010000000100001xx00000010;
	cfgsin19[0:44] =  45 'b00000100001xx0000100000000001001xx00001000000;
	cfgsin20[0:44] =  45 'b10000001xx0000001000010000100xx01001000000010;
	cfgsin21[0:44] =  45 'b00100xx0000001000010000010xx00001000000100000;
	cfgsin22[0:44] =  45 'b01xx0000000100000001010xx0100000001000001010x;
	cfgsin23[0:44] =  45 'bx0000000100100000001xx0000001000010000010xx10;
// BR
	cfgsin31[0:44] =  45 'b00001000001000001xx0000000001001000100xx00010;
	cfgsin30[0:44] =  45 'b00100000001001xx0000001000000001010xx00000100;
	cfgsin29[0:44] =  45 'b00010000100xx0000001000100000100xx00010010000;
	cfgsin28[0:44] =  45 'b00100010xx0000100000001000100xx00001000001000;
	cfgsin27[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat60; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx001x100x00000100000xx100x1000x00;
	cfgsin1[0:44] =  45 'b00000001xx010x1001x0000000001xx001x1001x00000;
	cfgsin2[0:44] =  45 'b10000xx001x0101x0000100000xx001x0101x00001000;
	cfgsin3[0:44] =  45 'b00xx001x0101x0000001000xx100x0101x0000100000x;
	cfgsin4[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin5[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin6[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin7[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin14[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin13[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin12[0:44] =  45 'bx100x1000x0000010000xx001x0101x0000100000xx10;
	cfgsin11[0:44] =  45 'b0x1000x0000001000xx100x0101x0000001000xx100x0;
	cfgsin10[0:44] =  45 'b101x0000010000xx001x0101x0000100000xx100x1000;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000100000xx001x001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x001xx00001;
	cfgsin18[0:44] =  45 'b00000xx100x100xx0000100000xx001x001xx00000000;
	cfgsin19[0:44] =  45 'b01xx001x010xx0000100000xx010x001xx0000000100x;
	cfgsin20[0:44] =  45 'bx100x001xx0000001000xx100x100xx0001000001xx10;
	cfgsin21[0:44] =  45 'b0x010xx0010001000xx100x100xx0000100000xx010x0;
	cfgsin22[0:44] =  45 'b01xx0000100000xx010x010xx0000000100xx010x001x;
	cfgsin23[0:44] =  45 'bx0000000001xx100x010xx0010100000xx100x001xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000xx010x010xx0000001000xx001x001xx00001;
	cfgsin30[0:44] =  45 'b00000xx010x100xx0101001000xx001x001xx00000001;
	cfgsin29[0:44] =  45 'b00xx010x010xx0000001000xx100x001xx0000000010x;
	cfgsin28[0:44] =  45 'bx001x100xx0000100000xx010x010xx0000100000xx10;
	cfgsin27[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin26[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
end
endtask
task get_wl_pat59; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000000000100001000000000000001010000000000;
	cfgsin2[0:44] =  45 'b000000000000000100000000000000000000000010000;
	cfgsin3[0:44] =  45 'b000000000000000000100000000000000010000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000010000000000000;
	cfgsin10[0:44] =  45 'b000001100000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000000001xx001x1001x00001;
	cfgsin18[0:44] =  45 'b00000xx100x1000x0000000001xx001x1001x00000100;
	cfgsin19[0:44] =  45 'b00xx001x1001x0000100000xx001x0101x0010000001x;
	cfgsin20[0:44] =  45 'bx001x1001x0000001000xx100x0101x0000000001xx00;
	cfgsin21[0:44] =  45 'b1x1001x0010000001xx010x0011x0000100000xx001x0;
	cfgsin22[0:44] =  45 'b101x0001000001xx010x1001x0000000001xx010x1001;
	cfgsin23[0:44] =  45 'bx1000001000xx001x0101x1000000001xx010x1001x00;
// BR
	cfgsin31[0:44] =  45 'b00001000xx100x0101x0001001000xx100x0011x00000;
	cfgsin30[0:44] =  45 'b00010xx001x0101x0001100000xx010x0011x00000100;
	cfgsin29[0:44] =  45 'b00xx001x0101x0000000001xx010x1001x0010000100x;
	cfgsin28[0:44] =  45 'bx010x0011x0000001000xx100x0101x0000100000xx10;
	cfgsin27[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin26[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin25[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx010x001x0000;
end
endtask
task get_wl_pat58; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000010010000000001000000000;
	cfgsin1[0:44] =  45 'b000000000000001000001000000000000000000010010;
	cfgsin2[0:44] =  45 'b000000010000000000010000000000000000000000000;
	cfgsin3[0:44] =  45 'b001000000000001010000000000000000000001000000;
	cfgsin4[0:44] =  45 'b000000000010000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000010000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000010000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000001000000000000000001000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000001000001000100000000000000000;
	cfgsin21[0:44] =  45 'b000000000000011000000000001000000000000010100;
	cfgsin22[0:44] =  45 'b000000000000000000000001000000000100000000000;
	cfgsin23[0:44] =  45 'b000000001000010000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000100000001000000000000000000000000001;
	cfgsin30[0:44] =  45 'b001000000100000000000000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000000000000000000000000000000000100000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000001000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000001000000000x;
end
endtask
task get_wl_pat57; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001100xx001x0110x0001010101x;
	cfgsin1[0:44] =  45 'bx101x0110x0100000000xx101x1010x0000001100xx01;
	cfgsin2[0:44] =  45 'b0x0110x0010001001xx010x0110x0101001101xx001x0;
	cfgsin3[0:44] =  45 'b100x0101001100xx000x0110x0110001100xx100x0110;
	cfgsin4[0:44] =  45 'bx0110001100xx110x0110x0110001101xx110x0110x01;
	cfgsin5[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin6[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin7[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// TR
	cfgsin15[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin14[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin13[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin12[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin11[0:44] =  45 'b10001101xx001x0101x0101010101xx001x0110x01010;
	cfgsin10[0:44] =  45 'b01100xx010x0110x0110001100xx110x0110x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000010000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000010000100010;
	cfgsin21[0:44] =  45 'b000000000000000001000000000000001000000000000;
	cfgsin22[0:44] =  45 'b000000000000001000000000000000000000000000000;
	cfgsin23[0:44] =  45 'b000001000000000000000000010010000000100000010;
// BR
	cfgsin31[0:44] =  45 'b010100100000010000000001000100000010000010000;
	cfgsin30[0:44] =  45 'b000000000000000000000000000000000000001000000;
	cfgsin29[0:44] =  45 'b000000000000000100000000000000000001000000000;
	cfgsin28[0:44] =  45 'b000000000000000000010000000000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat56; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx0010x0110x010000010011000x0000x01000001001;
	cfgsin1[0:44] =  45 'b1000x1000x000000110000001x0000x00000001000000;
	cfgsin2[0:44] =  45 'b1x0010x001000001000001x0100x010000100000000x0;
	cfgsin3[0:44] =  45 'b100x011000110001000x0000x010000110000010x0110;
	cfgsin4[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin5[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin6[0:44] =  45 'b0110000010x0110x010100110000010x0110x01100011;
	cfgsin7[0:44] =  45 'b0000010x0110x011000110000010x0110x01010011000;
// TR
	cfgsin15[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin14[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin13[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin12[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin11[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin10[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x1001x0110010101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx001x0101x0101010101xx101x0;
	cfgsin19[0:44] =  45 'b101x0101010001xx101x1001x0100010101xx010x0110;
	cfgsin20[0:44] =  45 'bx0110001101xx110x0010x0010000011xx010x0010x00;
	cfgsin21[0:44] =  45 'b01010101xx000x0000x0110001001xx100x0110x00000;
	cfgsin22[0:44] =  45 'b01101xx010x0100x0110001001xx110x0001x01100101;
	cfgsin23[0:44] =  45 'b00xx100x0010x0010001100xx001x0010x0100001100x;
// BR
	cfgsin31[0:44] =  45 'bx000x0000x0100010001xx000x0010x0100010100xx10;
	cfgsin30[0:44] =  45 'b0x0001x0100010101xx010x0110x0101001100xx101x0;
	cfgsin29[0:44] =  45 'b110x0101001101xx001x1010x0101001100xx000x0110;
	cfgsin28[0:44] =  45 'bx0110001101xx110x0100x0110001100xx110x0110x01;
	cfgsin27[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin26[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x0001010011xx;
end
endtask
task get_wl_pat55; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000100000000000100100000100010000;
	cfgsin1[0:44] =  45 'b000100010010100000000000000110000100010000000;
	cfgsin2[0:44] =  45 'b000000001000010000000000010000100000100000100;
	cfgsin3[0:44] =  45 'b010000000000000000101010000100000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x0110x011000110000010x0110x011000110000001x0;
	cfgsin19[0:44] =  45 'b101x000100100000010x1000x011000110000000x0000;
	cfgsin20[0:44] =  45 'bx001000000000001x0101x010000010000001x0110x01;
	cfgsin21[0:44] =  45 'b1000110000010x0010x010000110000010x0001x01010;
	cfgsin22[0:44] =  45 'b0110000000x0101x010100110000000x0110x01100011;
	cfgsin23[0:44] =  45 'b0000000x0000x001000110000000x0010x10000100000;
// BR
	cfgsin31[0:44] =  45 'b0001x1010x001000010000010x0000x01000010000000;
	cfgsin30[0:44] =  45 'b1x0010x010000100000100x1000x010001010000001x0;
	cfgsin29[0:44] =  45 'b000x000100110000000x0010x011000010000001x0110;
	cfgsin28[0:44] =  45 'bx001000010000000x0010x000000110010001x0110x01;
	cfgsin27[0:44] =  45 'b1000100000010x0110x011000110000001x0110x01100;
	cfgsin26[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin25[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat54; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000100000000000010000000000000;
	cfgsin1[0:44] =  45 'b000000000000000000000000000000001000000000000;
	cfgsin2[0:44] =  45 'b001000000000000010100000000000000000010000000;
	cfgsin3[0:44] =  45 'b000000000000010000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000010000000000000000000010000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000010000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000010000;
	cfgsin20[0:44] =  45 'b001001000000000000000000100000000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000100000010000000000001000000000;
	cfgsin22[0:44] =  45 'b000001000100000000000000000000100000000000000;
	cfgsin23[0:44] =  45 'b000000100100000000000000000000000000000001000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000010000000001001000000000000000;
	cfgsin30[0:44] =  45 'b000000000100001000001000000000100000000000000;
	cfgsin29[0:44] =  45 'b001001000000000000101000000000010000000000000;
	cfgsin28[0:44] =  45 'b010001000000001000100001100000000000000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000100000000000000000000x;
end
endtask
task get_wl_pat53; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1000100100000100xx0xx0010000001000010xx0x;
	cfgsin1[0:44] =  45 'bx0100000001000100xx1xx1010000001000100xx1xx10;
	cfgsin2[0:44] =  45 'b00010001000100xx0xx0010000001000100xx0xx10010;
	cfgsin3[0:44] =  45 'b00001000100xx0xx0100000100000100xx1xx10001001;
	cfgsin4[0:44] =  45 'b00000100xx0xx1010000100000100xx0xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx0xx1010000100000100xx1xx1010000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000001000000100000000001000000000000000010001;
	cfgsin20[0:44] =  45 'b000000000110000000000000000010000000000000000;
	cfgsin21[0:44] =  45 'b000000000000000000000000000010000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000001000000000000000000;
	cfgsin23[0:44] =  45 'b000000000001001000000000100101000000010000010;
// BR
	cfgsin31[0:44] =  45 'b000000000001000000010000000000000100001010100;
	cfgsin30[0:44] =  45 'b001000000000000000000000000100000000010010000;
	cfgsin29[0:44] =  45 'b100000000000001000000000000000000000100000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000010000000000;
	cfgsin27[0:44] =  45 'b000001000000000000000000000000000000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000010000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000000000000000000000000;
end
endtask
task get_wl_pat52; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1010000100000100xx0xx0100000001000100xx1x;
	cfgsin1[0:44] =  45 'bx1001000001000001xx0xx0100000001000001xx1xx11;
	cfgsin2[0:44] =  45 'b00000000001001xx1xx1001000001000001xx0xx01000;
	cfgsin3[0:44] =  45 'b00001000001xx0xx0010000000001010xx0xx10100001;
	cfgsin4[0:44] =  45 'b00000010xx1xx1010000100000100xx1xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10100001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00001000100xx1xx1001000000010100xx1xx11000000;
	cfgsin20[0:44] =  45 'b00001100xx0xx1001000100000100xx1xx10100000010;
	cfgsin21[0:44] =  45 'b00100xx1xx1001000001000100xx0xx10100000010001;
	cfgsin22[0:44] =  45 'b00xx0xx1010000010000010xx0xx1001000000010010x;
	cfgsin23[0:44] =  45 'bx1xx1010000000010100xx1xx0000100000010100xx0x;
// BR
	cfgsin31[0:44] =  45 'bx1000010000010010xx0xx1010000100000001xx0xx00;
	cfgsin30[0:44] =  45 'b00100000100001xx1xx0000010001000100xx0xx00010;
	cfgsin29[0:44] =  45 'b00010000010xx0xx1010000001000100xx1xx00010000;
	cfgsin28[0:44] =  45 'b01000100xx1xx1010000001000010xx0xx00100000000;
	cfgsin27[0:44] =  45 'b10100xx1xx1010000000010100xx1xx11000000000100;
	cfgsin26[0:44] =  45 'b10xx1xx1001000000010010xx1xx0010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat51; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000100x01010001000100000001xx00;
	cfgsin1[0:44] =  45 'b00100000001000001xx0000010000001000001xx00000;
	cfgsin2[0:44] =  45 'b10000001000001xx0000100000001000001xx01000000;
	cfgsin3[0:44] =  45 'b01001000001xx1000000010100000010xx10001000001;
	cfgsin4[0:44] =  45 'b00000010xx0000010000100000100xx00000100001000;
	cfgsin5[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin6[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin7[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin14[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin13[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin12[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin10[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin9[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00010000100000100xx0001010000100000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10010;
	cfgsin19[0:44] =  45 'b00001000001xx1xx0010000001000010xx1xx00010000;
	cfgsin20[0:44] =  45 'b01000001xx1xx1100000000100001xx0xx11000000010;
	cfgsin21[0:44] =  45 'b00001xx0xx1100000001000010xx0xx01000000010000;
	cfgsin22[0:44] =  45 'b01xx1xx1010000010000010xx0xx1100000001000100x;
	cfgsin23[0:44] =  45 'bx1xx1100000001000010xx1xx1010000100000010xx1x;
// BR
	cfgsin31[0:44] =  45 'bx0100000100000100xx1xx1100000000010010xx0xx11;
	cfgsin30[0:44] =  45 'b00000010000010xx0xx0100000000001001xx0xx11000;
	cfgsin29[0:44] =  45 'b00000100100xx1xx0000010001000001xx1xx01000000;
	cfgsin28[0:44] =  45 'b01000010xx0xx1100000001000100xx0xx10000100000;
	cfgsin27[0:44] =  45 'b01010xx0xx0100000001000010xx0xx10100000010001;
	cfgsin26[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
end
endtask
task get_wl_pat50; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000000001100xx0000001000001000100xx00;
	cfgsin1[0:44] =  45 'b00001000001000100xx0010100000001000100xx00000;
	cfgsin2[0:44] =  45 'b00010001000010xx0000001000001000010xx00000010;
	cfgsin3[0:44] =  45 'b00001000100xx0000000010100000010xx00000010001;
	cfgsin4[0:44] =  45 'b00000010xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x00000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000100000100xx0000010000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00001000010xx0001100000001000001xx00010010000;
	cfgsin20[0:44] =  45 'b01000010xx0000001000010000100xx10000000100000;
	cfgsin21[0:44] =  45 'b10001xx1000001000001000001xx10000100000010000;
	cfgsin22[0:44] =  45 'b01xx0000100000010000100xx0000010000001000001x;
	cfgsin23[0:44] =  45 'bx0000001000000001001xx0000100000100000001xx00;
// BR
	cfgsin31[0:44] =  45 'b01010000001000001xx0000001000100000100xx10000;
	cfgsin30[0:44] =  45 'b01000000010100xx0001010000000100010xx01000100;
	cfgsin29[0:44] =  45 'b00010000010xx0000100000000010001xx00100100000;
	cfgsin28[0:44] =  45 'b01000001xx1000000010000010001xx01001000001000;
	cfgsin27[0:44] =  45 'b00001xx0000000100010000001xx10000000100000010;
	cfgsin26[0:44] =  45 'b01xx0000100000100000001xx0000010000100000100x;
	cfgsin25[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
end
endtask
task get_wl_pat49; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00000100100000100x00000000010001000001xx00;
	cfgsin1[0:44] =  45 'b00001000000001001xx0100001000001000010xx00001;
	cfgsin2[0:44] =  45 'b00000001000001xx0000100000001000100xx00100010;
	cfgsin3[0:44] =  45 'b00001000001xx0010001000000001001xx00000010001;
	cfgsin4[0:44] =  45 'b00000010xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000100000100x000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00001000001xx0000001000001000001xx00001000000;
	cfgsin20[0:44] =  45 'b01000001xx0000001000001000010xx00000010000100;
	cfgsin21[0:44] =  45 'b00001xx0000010000001000001xx00000000100010000;
	cfgsin22[0:44] =  45 'b01xx0000001000100000010xx0100000010001000001x;
	cfgsin23[0:44] =  45 'bx0000001000001000100xx0000000001000001100xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000000001100xx0000010000010000010xx00000;
	cfgsin30[0:44] =  45 'b10000000001001xx0000001000001000100xx00000000;
	cfgsin29[0:44] =  45 'b10100000100xx0001001000001000010xx00000000100;
	cfgsin28[0:44] =  45 'b01000100xx0000000010001000100xx00000001000100;
	cfgsin27[0:44] =  45 'b00100xx1001001000001000001xx00000010000010000;
	cfgsin26[0:44] =  45 'b01xx0000000100010000010xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
end
endtask
task get_wl_pat48; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000010000100x00001000010010000010xx00;
	cfgsin1[0:44] =  45 'b00001000000100001xx0000000001001000001xx00010;
	cfgsin2[0:44] =  45 'b01000001000100xx0000001000001000001xx00000010;
	cfgsin3[0:44] =  45 'b00000100010xx0000001000000001100xx00000010000;
	cfgsin4[0:44] =  45 'b00001100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000100000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00001000001xx0000000100001000001xx00000010000;
	cfgsin20[0:44] =  45 'b00001001xx0000001000000100100xx00000000010010;
	cfgsin21[0:44] =  45 'b00001xx0000000001001000001xx00010010000010000;
	cfgsin22[0:44] =  45 'b01xx0000001000010000010xx0000001000001000001x;
	cfgsin23[0:44] =  45 'bx0000000010001000001xx0000000010100000010xx00;
// BR
	cfgsin31[0:44] =  45 'b00000010001000010xx0000000010001000001xx00000;
	cfgsin30[0:44] =  45 'b00001000100100xx1000000010000010010xx00000010;
	cfgsin29[0:44] =  45 'b00000001001xx0000010000001000001xx00000100000;
	cfgsin28[0:44] =  45 'b10000001xx0000001000001000001xx00000010001000;
	cfgsin27[0:44] =  45 'b00001xx0000001000001000001xx00000010000010000;
	cfgsin26[0:44] =  45 'b01xx0000001000100000010xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
end
endtask
task get_wl_pat47; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000100000010xx0000000010001000001xx10;
	cfgsin1[0:44] =  45 'b00010000001000100xx0000001000001000100xx10000;
	cfgsin2[0:44] =  45 'b00010001000100xx0000000100001000100xx00000100;
	cfgsin3[0:44] =  45 'b00001000100xx0000000100000001100xx00000010001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0000001000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00001000001xx0000010000001000001xx00000001000;
	cfgsin20[0:44] =  45 'b01000100xx0000001000000100001xx00000000100010;
	cfgsin21[0:44] =  45 'b00010xx0000001000001000001xx00000010000010000;
	cfgsin22[0:44] =  45 'b01xx0000001000010000010xx0000010000001000001x;
	cfgsin23[0:44] =  45 'bx0000010000001000001xx0000001000010000010xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000000100010xx0000100000000001100xx10000;
	cfgsin30[0:44] =  45 'b00100001000100xx0000010000001000001xx00000100;
	cfgsin29[0:44] =  45 'b00000010010xx0000000010001000001xx00000010000;
	cfgsin28[0:44] =  45 'b00100001xx0000000100100000010xx01000100000000;
	cfgsin27[0:44] =  45 'b01010xx0000010000001000001xx00000100000010000;
	cfgsin26[0:44] =  45 'b01xx0000010000100000010xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
end
endtask
task get_wl_pat46; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000001000100000100xx1000000010001000100xx00;
	cfgsin1[0:44] =  45 'b10000010001000001xx0000001000001000001xx00000;
	cfgsin2[0:44] =  45 'b00010001000001xx1000001000001000001xx10000001;
	cfgsin3[0:44] =  45 'b00001000001xx0100000010000001010xx00000010001;
	cfgsin4[0:44] =  45 'b00000010xx0100001000100000100xx00000010001000;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000001000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000001000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000001000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000001000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00001000100000100xx0001001000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000001;
	cfgsin19[0:44] =  45 'b00001000100xx0000000100001000010xx00000001000;
	cfgsin20[0:44] =  45 'b01000010xx0000100000000001001xx00000001000010;
	cfgsin21[0:44] =  45 'b00010xx0000001000001000100xx00000010000010001;
	cfgsin22[0:44] =  45 'b00xx0000001000010000100xx0000001000001000010x;
	cfgsin23[0:44] =  45 'bx0000001000001000100xx0000001000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000000100010xx0000001000000010100xx00000;
	cfgsin30[0:44] =  45 'b00100100000100xx0000010000100000100xx00000010;
	cfgsin29[0:44] =  45 'b00001000010xx1000001000001000010xx00000010000;
	cfgsin28[0:44] =  45 'b01000010xx0010001000001000100xx00000001000000;
	cfgsin27[0:44] =  45 'b01001xx0000001000001000100xx01000001000010000;
	cfgsin26[0:44] =  45 'b10xx0000001000100000001xx0000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
end
endtask
task get_wl_pat45; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1001000100000010x00xx0001000100000010xx0x;
	cfgsin1[0:44] =  45 'bx0001000100000001xx1xx1001000010000001xx0xx00;
	cfgsin2[0:44] =  45 'b01000010000001xx0xx1000010010000001xx0xx10001;
	cfgsin3[0:44] =  45 'b00001000001xx0xx1001000001000010xx1xx10000100;
	cfgsin4[0:44] =  45 'b01000010xx0xx1001000100000100xx1xx10010001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx10010;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1001000100000100xx1xx10010001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1001000100000100xx1xx10010001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1001000100000100xx1xx10010001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1001000100000100xx1xx1001000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00010010;
	cfgsin19[0:44] =  45 'b00001000001xx0000001000001000100xx00000001000;
	cfgsin20[0:44] =  45 'b00001100xx0001000100010000100xx10000001000010;
	cfgsin21[0:44] =  45 'b00001xx0000000010001000010xx00100010000010000;
	cfgsin22[0:44] =  45 'b01xx0010001000010000010xx0010001000001000100x;
	cfgsin23[0:44] =  45 'bx0100001000001000001xx0000001000100000010xx00;
// BR
	cfgsin31[0:44] =  45 'b00000100001000100xx0100100000100000010xx00100;
	cfgsin30[0:44] =  45 'b01000000100001xx0100001000001000010xx00010000;
	cfgsin29[0:44] =  45 'b10010000100xx0000001000001000001xx10000000100;
	cfgsin28[0:44] =  45 'b01000100xx0100001000001000001xx00000010001000;
	cfgsin27[0:44] =  45 'b00010xx0000001000001000001xx00000001000000011;
	cfgsin26[0:44] =  45 'b00xx1000001000100000010xx1000001000100000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
end
endtask
task get_wl_pat44; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x1100000100000001x01xx1001000000001001x00x;
	cfgsin1[0:44] =  45 'bx1100000100000001x01xx1000100000001001x00xx01;
	cfgsin2[0:44] =  45 'b00000000010001x10xx0100000000100001x00xx10010;
	cfgsin3[0:44] =  45 'b00100000001x10xx1100000000100010x01xx11000000;
	cfgsin4[0:44] =  45 'b01000010x01xx1010000100000100x01xx10100001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1010000100000100x01xx1100000100000100x;
	cfgsin7[0:44] =  45 'b01xx1100000100000100x01xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx10;
	cfgsin14[0:44] =  45 'b10000100000100x01xx1010000100000100x01xx10100;
	cfgsin13[0:44] =  45 'b00100000100x01xx1010000100000100x01xx10100001;
	cfgsin12[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin11[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin10[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0100000100000001x01x0;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100x01xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx1xx1001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000100xx1xx1001000100000100xx1xx00001;
	cfgsin19[0:44] =  45 'b00000001001xx1xx1000100000001001xx1xx10010000;
	cfgsin20[0:44] =  45 'b00010001xx1xx0001000010000010xx0xx10000101000;
	cfgsin21[0:44] =  45 'b00100xx1xx1001000001000001xx1xx00010001000000;
	cfgsin22[0:44] =  45 'b01xx1xx0001000001000010xx1xx0001000100000001x;
	cfgsin23[0:44] =  45 'bx0xx1000100001000010xx1xx1001000001000010xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1001000100000001xx0xx1001000001000100xx0xx00;
	cfgsin30[0:44] =  45 'b00100001000100xx0xx1000010000100001xx1xx00001;
	cfgsin29[0:44] =  45 'b00001000010xx0xx1001000100000100xx0xx10000010;
	cfgsin28[0:44] =  45 'b00100001xx0xx0001000100000010xx0xx11000000000;
	cfgsin27[0:44] =  45 'b01100xx1xx1001000100000010xx0xx10010000100000;
	cfgsin26[0:44] =  45 'b01xx0xx1001000100000100xx0xx1001000100000100x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat43; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000100xx0000100000000001001x001;
	cfgsin1[0:44] =  45 'b00000100100000001x00000100000010000001x001011;
	cfgsin2[0:44] =  45 'b00000010000001x10000100000010000001x001001000;
	cfgsin3[0:44] =  45 'b00001000001x01000010000001000010x000000100000;
	cfgsin4[0:44] =  45 'b01000010x00000010000100000100x000000100001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin6[0:44] =  45 'b00x00000010000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x00000100000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000100001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00001100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000100x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000100x01xx1010000100000100x01xx10100;
	cfgsin19[0:44] =  45 'b00100000010x01xx1100000100000010x00xx10100001;
	cfgsin20[0:44] =  45 'b00000100x00xx1010000100000010x01xx10000100100;
	cfgsin21[0:44] =  45 'b00100x10xx1001000100000010x00xx10100001000000;
	cfgsin22[0:44] =  45 'b10x01xx1010000001000100x01xx1010000100000100x;
	cfgsin23[0:44] =  45 'b00xx1000010010000010x00xx0000010001000001x01x;
// BR
	cfgsin31[0:44] =  45 'bx0000100000010001x00xx1010000010000010x00xx00;
	cfgsin30[0:44] =  45 'b10000000001001x00xx0010000010000010x00xx10100;
	cfgsin29[0:44] =  45 'b00001000010x00xx1000100000001001x01xx10100000;
	cfgsin28[0:44] =  45 'b10000001x00xx1001000010000001x00xx11000000010;
	cfgsin27[0:44] =  45 'b00100x01xx1010000001000100x01xx10100000100000;
	cfgsin26[0:44] =  45 'b10x01xx1010000001000100x01xx1010000100000100x;
	cfgsin25[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000001x01x0;
end
endtask
task get_wl_pat42; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000000010010xx0000010000100000001x100;
	cfgsin1[0:44] =  45 'b00010000100000001x10000010000010000001x100000;
	cfgsin2[0:44] =  45 'b10000010000001x10100010000010000001x100000100;
	cfgsin3[0:44] =  45 'b00001000001x10000100000001000010x100001000000;
	cfgsin4[0:44] =  45 'b01000010x10000010000100000100x100000100001000;
	cfgsin5[0:44] =  45 'b00100x10000010000100000100x100000100001000001;
	cfgsin6[0:44] =  45 'b00x10000010000100000100x10000100000100000100x;
	cfgsin7[0:44] =  45 'b10000100000100000100x10000010000100000100x100;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x10000100000100000100x100000;
	cfgsin14[0:44] =  45 'b10000100000100x10000010000100000100x100000100;
	cfgsin13[0:44] =  45 'b00100000100x10000010000100000100x100000100001;
	cfgsin12[0:44] =  45 'b00000100x10000010000100000100x100000100001000;
	cfgsin11[0:44] =  45 'b00100x10000010000100000100x100000100001000001;
	cfgsin10[0:44] =  45 'b00x10000010000100000100x10000010000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x10000100000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000100x000000010001;
	cfgsin20[0:44] =  45 'b00000010x01000000010000001100x000001000001000;
	cfgsin21[0:44] =  45 'b00001x00000000010000010100x010000001001000001;
	cfgsin22[0:44] =  45 'b00x00000010000001000001x00000010000100000010x;
	cfgsin23[0:44] =  45 'b00100001000000001100x01010010000001000100x000;
// BR
	cfgsin31[0:44] =  45 'b01010000100000100x00000000010000010001x010100;
	cfgsin30[0:44] =  45 'b00010000001010x00010000001100000100x101000100;
	cfgsin29[0:44] =  45 'b00001000001x00000010000100000001x000000100000;
	cfgsin28[0:44] =  45 'b10000001x00100010000000001001x001000100000001;
	cfgsin27[0:44] =  45 'b00001x10000010000000001010x000000100000100001;
	cfgsin26[0:44] =  45 'b00x00000010000000001001x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001010000100000100xx00x;
end
endtask
task get_wl_pat41; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00001000100000010xx0000000100000001001x000;
	cfgsin1[0:44] =  45 'b00100000000100001x00000100000010000100x100001;
	cfgsin2[0:44] =  45 'b00000010000001x00001100000000001010x100001000;
	cfgsin3[0:44] =  45 'b00000001001x00000100000100000001x000000100001;
	cfgsin4[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000100000100x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000100000100x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin12[0:44] =  45 'b00000100x00000100000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100000;
	cfgsin18[0:44] =  45 'b10000100000100x10000010000100000100x100000100;
	cfgsin19[0:44] =  45 'b00000100001x10000010000000100001x100000100000;
	cfgsin20[0:44] =  45 'b10000001x10000100000100000001x100000100000010;
	cfgsin21[0:44] =  45 'b00010x10100010000000001001x100000100000000010;
	cfgsin22[0:44] =  45 'b01x10000010000001000010x10000010000010000001x;
	cfgsin23[0:44] =  45 'b10000010000100000001x10000010000001000010x100;
// BR
	cfgsin31[0:44] =  45 'b00010000001000010x10000001000100000100x100000;
	cfgsin30[0:44] =  45 'b00001010000100x10000010000000001001x100000000;
	cfgsin29[0:44] =  45 'b01000001100x10100010000100000001x100000100000;
	cfgsin28[0:44] =  45 'b10000001x10000010000100000001x100001000000010;
	cfgsin27[0:44] =  45 'b00010x10000010000010000001x100000100001000000;
	cfgsin26[0:44] =  45 'b01x10000010000001000010x10000010000100000100x;
	cfgsin25[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat40; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000100000100x00000100000100000010x000;
	cfgsin1[0:44] =  45 'b00100000000001010x00000100000000010001x000001;
	cfgsin2[0:44] =  45 'b00000100000001x01000100000100000001x000000000;
	cfgsin3[0:44] =  45 'b10010000010x00000001000010000001x000000100000;
	cfgsin4[0:44] =  45 'b01000100x00000010000100000100x000000100001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000100000100x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000100000100x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin12[0:44] =  45 'b00000100x00000100000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000100000100000100x000000100;
	cfgsin19[0:44] =  45 'b00100000001x00000010000100000001x010000100001;
	cfgsin20[0:44] =  45 'b00000001x00000010000000001001x100001000001000;
	cfgsin21[0:44] =  45 'b00001x00000010000000100001x000000100001000001;
	cfgsin22[0:44] =  45 'b00x00000010000001000010x00000010000100000001x;
	cfgsin23[0:44] =  45 'b00000010000010000001x00000000001001000010x000;
// BR
	cfgsin31[0:44] =  45 'b00010000000010001x00100100000000001100x000000;
	cfgsin30[0:44] =  45 'b00100000010100x00100010000000001001x000000100;
	cfgsin29[0:44] =  45 'b00000001010x00000010000100000001x000000010000;
	cfgsin28[0:44] =  45 'b10000001x00000100000100000001x000001000000010;
	cfgsin27[0:44] =  45 'b00010x00000001000001000001x000000100000100000;
	cfgsin26[0:44] =  45 'b01x00000100000001000010x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat39; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000000100100000010x00000100000100000100x000;
	cfgsin1[0:44] =  45 'b00100000001000001x00000000100100000001x000011;
	cfgsin2[0:44] =  45 'b00000010000001x00000001000000010001x000100010;
	cfgsin3[0:44] =  45 'b00001000001x00000100000001000001x000000100000;
	cfgsin4[0:44] =  45 'b01000100x00000010000100000100x000000100001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000100000100x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000100000100x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin12[0:44] =  45 'b00000100x00000100000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x00000100000100000100x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000100000100000100x000000100;
	cfgsin19[0:44] =  45 'b00100000001x00000010000100000001x000001000000;
	cfgsin20[0:44] =  45 'b01000001x00000010000001000010x000010010000000;
	cfgsin21[0:44] =  45 'b10001x00100000010010000010x000000100000010000;
	cfgsin22[0:44] =  45 'b01x00000010000001000010x00001100000100000001x;
	cfgsin23[0:44] =  45 'b00000010000000010001x00000010000001000010x000;
// BR
	cfgsin31[0:44] =  45 'b00010000000010001x00000000010001000001x000001;
	cfgsin30[0:44] =  45 'b00000100000010x10000000001001000100x000000100;
	cfgsin29[0:44] =  45 'b00001000100x00000010000100000001x010000100001;
	cfgsin28[0:44] =  45 'b00000100x10000000010010000001x001000100000010;
	cfgsin27[0:44] =  45 'b00010x01000100000001000001x000000100000100000;
	cfgsin26[0:44] =  45 'b01x00000010000001000010x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat38; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00100000100000001001001001000000001001x000;
	cfgsin1[0:44] =  45 'b00000001100000100x00001000001000001001x000000;
	cfgsin2[0:44] =  45 'b00100000001001x00001001000010000001x000000001;
	cfgsin3[0:44] =  45 'b00000001010x10100001000001000001x010000010000;
	cfgsin4[0:44] =  45 'b01000010x00000001000100000100x000000010001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000100000100x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00100000100x00000010000100000100x000000010001;
	cfgsin12[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x00000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x00000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000011000001000000010000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000100000100000100x000001000;
	cfgsin19[0:44] =  45 'b00100000001x00000100000100000001x000000100001;
	cfgsin20[0:44] =  45 'b00000001x00000100000010000100x001000000101000;
	cfgsin21[0:44] =  45 'b00001x00000100000100000100x000001000001000000;
	cfgsin22[0:44] =  45 'b01x00000010000001000010x00000010000100000001x;
	cfgsin23[0:44] =  45 'b00000100000010000001x00000100000001000010x000;
// BR
	cfgsin31[0:44] =  45 'b00100000001000010x10100010000000100001x000000;
	cfgsin30[0:44] =  45 'b10000000100100x01000010000000010100x000000000;
	cfgsin29[0:44] =  45 'b01001000001x10000010000000010001x000000100000;
	cfgsin28[0:44] =  45 'b00010001x00000100000100000001x000000010001000;
	cfgsin27[0:44] =  45 'b00010x00000010000001000001x000001000000100000;
	cfgsin26[0:44] =  45 'b01x00000010000001000010x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100x0000;
end
endtask
task get_wl_pat37; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx0x11000001000000100x0xx0000100100000001x01x;
	cfgsin1[0:44] =  45 'bx1001000010000010x01xx0000010000100010x01xx00;
	cfgsin2[0:44] =  45 'b00001100000010x00xx0000001100000100x01xx00010;
	cfgsin3[0:44] =  45 'b00100000100x00xx1001000100000100x00xx10001000;
	cfgsin4[0:44] =  45 'b10000100x01xx1001000100000100x01xx10010001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1001000100000100x01xx1010000100000100x;
	cfgsin7[0:44] =  45 'b01xx1010000100000100x01xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100x01xx1010000100000100x01xx10;
	cfgsin14[0:44] =  45 'b10000100000100x01xx1010000100000100x01xx10100;
	cfgsin13[0:44] =  45 'b00100000100x01xx1010000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin11[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin10[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx01000001000001000x1x0;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100000000100000100000100x000;
	cfgsin17[0:44] =  45 'b00010000100000100x00000100000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000010000100000100x000010100;
	cfgsin19[0:44] =  45 'b00100000001x00010010000100000001x000000001001;
	cfgsin20[0:44] =  45 'b00000001x00101010000000001001x000000010000000;
	cfgsin21[0:44] =  45 'b01001x00000001000000001001x010100001000000010;
	cfgsin22[0:44] =  45 'b01x00000000010001000010x00000000001000001001x;
	cfgsin23[0:44] =  45 'b00000010000000001010x10000010000001000001x000;
// BR
	cfgsin31[0:44] =  45 'b00100000000001010x10000010000000001100x000000;
	cfgsin30[0:44] =  45 'b10000000001100x00000100000000001001x001010010;
	cfgsin29[0:44] =  45 'b00000001010x00001001000100000100x000000010000;
	cfgsin28[0:44] =  45 'b00001010x10100001000000001010x000000010000010;
	cfgsin27[0:44] =  45 'b00001x00000010000000001001x010000100000010000;
	cfgsin26[0:44] =  45 'b01x00000001000001000010x00000010000100000100x;
	cfgsin25[0:44] =  45 'b00000001000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000010100001000000010000x;
end
endtask
task get_wl_pat36; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx1000001100000100xx0xx0000100000100100x01x;
	cfgsin1[0:44] =  45 'bx0001000000100001x01xx0001000010000100x10xx00;
	cfgsin2[0:44] =  45 'b00100000010100x00xx1001000000001010x11xx10001;
	cfgsin3[0:44] =  45 'b00010000001x01xx1001000000010010x01xx10001000;
	cfgsin4[0:44] =  45 'b00100001x01xx1001000100000100x01xx10010001000;
	cfgsin5[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1001000100000100x01xx1010000100000100x;
	cfgsin7[0:44] =  45 'b01xx1010000100000100x01xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100x01xx1010000100000100x01xx10;
	cfgsin14[0:44] =  45 'b10000100000100x01xx1010000100000100x01xx10100;
	cfgsin13[0:44] =  45 'b00100000100x01xx1010000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000100x01xx1010000100000100x01xx10100001000;
	cfgsin11[0:44] =  45 'b00100x01xx1010000100000100x01xx10100001000001;
	cfgsin10[0:44] =  45 'b00x01xx1010000100000100x01xx1010000100000100x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1100000100000100x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xx0000001100000001xx1xx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x1xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000100x01xx1010000100000100x01xx00100;
	cfgsin19[0:44] =  45 'b00100000001x01xx0010000100000001x01xx10100000;
	cfgsin20[0:44] =  45 'b10000100x00xx0000010001000010x00xx00010001000;
	cfgsin21[0:44] =  45 'b00010x00xx1001000100000100x00xx00100000010001;
	cfgsin22[0:44] =  45 'b00x01xx1001000100000010x01xx0010000000001001x;
	cfgsin23[0:44] =  45 'b01xx1000001100000001x01xx1010000100000010x01x;
// BR
	cfgsin31[0:44] =  45 'bx1100000000100100x00xx1001000000010001x01xx10;
	cfgsin30[0:44] =  45 'b00010000010010x00xx1000001010000100x00xx00100;
	cfgsin29[0:44] =  45 'b00000100001x01xx0010000010000001x00xx10010000;
	cfgsin28[0:44] =  45 'b10000001x00xx1010000000010001x00xx10010001000;
	cfgsin27[0:44] =  45 'b00010x10xx1001000100000001x00xx10010000000010;
	cfgsin26[0:44] =  45 'b01x01xx1010000100000010x01xx1010000100000100x;
	cfgsin25[0:44] =  45 'b01xx1001000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx00100001000001000x1x0;
end
endtask
task get_wl_pat35; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000010000010xx1010000001001000001xx00;
	cfgsin1[0:44] =  45 'b01010000010000001xx0000001000000100001xx01001;
	cfgsin2[0:44] =  45 'b00000100000001xx0000100000100000001xx00001000;
	cfgsin3[0:44] =  45 'b00100000001xx0000100000100000001xx00000000010;
	cfgsin4[0:44] =  45 'b10000010xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100xx1xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000100x01xx1010000100000100x01xx10100;
	cfgsin19[0:44] =  45 'b00100000001x01xx0010000100000001x01xx00100000;
	cfgsin20[0:44] =  45 'b00100010x01xx0001000001000100x01xx10010001000;
	cfgsin21[0:44] =  45 'b00100x00xx1001000100000010x00xx10100000010000;
	cfgsin22[0:44] =  45 'b10x01xx1100000010000010x01xx1010000010000001x;
	cfgsin23[0:44] =  45 'b00xx1010000001000001x00xx0010000000010010x01x;
// BR
	cfgsin31[0:44] =  45 'bx0100000000001001x01xx0010000001000010x01xx10;
	cfgsin30[0:44] =  45 'b00100001000001x11xx0010000000010010x01xx01000;
	cfgsin29[0:44] =  45 'b00010000100x01xx0010000010000001x01xx00100000;
	cfgsin28[0:44] =  45 'b00100100x00xx1001000100000100x00xx10010000001;
	cfgsin27[0:44] =  45 'b00010x01xx1010000100000001x01xx10100001000000;
	cfgsin26[0:44] =  45 'b01x01xx1010000010000010x01xx1010000100000100x;
	cfgsin25[0:44] =  45 'b01xx1001000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000001xx1xx;
end
endtask
task get_wl_pat34; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000010000100000100x00000000010010000001xx00;
	cfgsin1[0:44] =  45 'b00100000010000001xx0010100000000100010xx00000;
	cfgsin2[0:44] =  45 'b00001100000001xx1000010000100000100xx00000000;
	cfgsin3[0:44] =  45 'b01100000001xx0000000100100000010xx00001000000;
	cfgsin4[0:44] =  45 'b10000010xx0000100000100000100xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00001000001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000100000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000001xx0001100000000010001xx00000100001;
	cfgsin20[0:44] =  45 'b00000001xx0000001000000100100xx00001000000001;
	cfgsin21[0:44] =  45 'b00001xx0000000010100000001xx10000000100010000;
	cfgsin22[0:44] =  45 'b01xx0000010000010000010xx0000010000100000001x;
	cfgsin23[0:44] =  45 'bx0000100000100000001xx0001100000100000010xx00;
// BR
	cfgsin31[0:44] =  45 'b10100000000010010xx0010001000001000001xx00000;
	cfgsin30[0:44] =  45 'b01000001000100xx0001001000010000100xx00000010;
	cfgsin29[0:44] =  45 'b00000010010xx0000010000001000010xx00101000000;
	cfgsin28[0:44] =  45 'b00010001xx0100010000010000001xx10001000000000;
	cfgsin27[0:44] =  45 'b01001xx0000100000100000001xx00001000000001000;
	cfgsin26[0:44] =  45 'b01xx0000010000000001010xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat33; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx00010000xx100x010xx0000000010xx010x100xx00;
	cfgsin1[0:44] =  45 'b00010000xx100x010xx0000000010xx010x100xx00010;
	cfgsin2[0:44] =  45 'b00100xx010x100xx0000000100xx100x010xx00000010;
	cfgsin3[0:44] =  45 'b00xx010x100xx0000000010xx001x100xx0000010000x;
	cfgsin4[0:44] =  45 'bx100x010xx0000100000xx100x100xx0000100000xx10;
	cfgsin5[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin6[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin7[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin14[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin13[0:44] =  45 'b00xx100x100xx0000100000xx100x100xx0000100000x;
	cfgsin12[0:44] =  45 'bx100x100xx0000100000xx100x100xx0000100000xx10;
	cfgsin11[0:44] =  45 'b0x100xx0000100000xx100x100xx0000100000xx100x1;
	cfgsin10[0:44] =  45 'b00xx0000100000xx100x100xx0000100000xx100x100x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00010000001xx0000100000010000001xx00001000000;
	cfgsin20[0:44] =  45 'b00010001xx0000000001010000100xx00000010000000;
	cfgsin21[0:44] =  45 'b01001xx1000001000010000001xx00001000000100000;
	cfgsin22[0:44] =  45 'b01xx0000010000000001010xx0000010000000010001x;
	cfgsin23[0:44] =  45 'bx0100100000010000001xx1000100000010000010xx00;
// BR
	cfgsin31[0:44] =  45 'b00000001010000010xx0000001000001000100xx00000;
	cfgsin30[0:44] =  45 'b01000001000001xx0000000100100000100xx00011000;
	cfgsin29[0:44] =  45 'b00001000100xx0001100000010000001xx00000001000;
	cfgsin28[0:44] =  45 'b10000001xx0000001000010000001xx00001000000100;
	cfgsin27[0:44] =  45 'b00001xx0000100000000001001xx00001000000100000;
	cfgsin26[0:44] =  45 'b01xx0000010000000010010xx0000100000100000100x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat32; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxx000100000xx001x001x00000010000xx001x0101x00;
	cfgsin1[0:44] =  45 'b00000001xx001x1001x0000000100xx001x0101x10001;
	cfgsin2[0:44] =  45 'b00000xx001x0101x0000000001xx001x1001x00001000;
	cfgsin3[0:44] =  45 'b00xx001x0101x0010000001xx010x1001x0010000001x;
	cfgsin4[0:44] =  45 'bx010x1001x0000100000xx100x1000x0000100000xx10;
	cfgsin5[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin6[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin7[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin14[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin13[0:44] =  45 'b00xx100x1000x0000100000xx100x1000x0000100000x;
	cfgsin12[0:44] =  45 'bx100x1000x0000100000xx100x1000x0000100000xx10;
	cfgsin11[0:44] =  45 'b0x1000x0000100000xx100x1000x0000100000xx100x1;
	cfgsin10[0:44] =  45 'b000x0000100000xx100x1000x0000100000xx100x1000;
	cfgsin9[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x1000x0000100000xx001x001x0000;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin19[0:44] =  45 'b00xx100x001xx0000100000xx100x001xx0010010000x;
	cfgsin20[0:44] =  45 'bx001x001xx0010001000xx100x001xx0000100000xx10;
	cfgsin21[0:44] =  45 'b0x001xx0000100000xx001x001xx0000001000xx001x0;
	cfgsin22[0:44] =  45 'b01xx0000010000xx100x010xx0000010000xx010x001x;
	cfgsin23[0:44] =  45 'bx0000000100xx010x100xx0000001000xx100x100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000xx010x001xx0000001000xx010x010xx00000;
	cfgsin30[0:44] =  45 'b01000xx010x010xx0000001000xx010x010xx00000000;
	cfgsin29[0:44] =  45 'b01xx100x001xx0000000010xx100x100xx0000010000x;
	cfgsin28[0:44] =  45 'bx010x010xx0000001000xx010x100xx0000000010xx10;
	cfgsin27[0:44] =  45 'b0x100xx0000100000xx010x001xx0000100000xx001x0;
	cfgsin26[0:44] =  45 'b01xx0000010000xx100x010xx0000100000xx100x100x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
end
endtask
task get_wl_pat31; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin1[0:44] =  45 'b000000100000100000000000000000000000001000000;
	cfgsin2[0:44] =  45 'b000000000000000000000100000000000000001000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000001000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin18[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00000000;
	cfgsin19[0:44] =  45 'b01xx001x1001x0001000001xx001x1001x0010001000x;
	cfgsin20[0:44] =  45 'bx100x0011x0100001000xx100x0101x0000010000xx00;
	cfgsin21[0:44] =  45 'b1x0101x0001100000xx001x0101x0000001000xx001x0;
	cfgsin22[0:44] =  45 'b101x0000000001xx010x1001x0000010000xx001x0101;
	cfgsin23[0:44] =  45 'bx0000100000xx001x0101x0000000001xx010x1001x00;
// BR
	cfgsin31[0:44] =  45 'b00001000xx001x1001x0001001000xx100x0101x00000;
	cfgsin30[0:44] =  45 'b01000xx100x0101x0000010000xx001x0101x00010010;
	cfgsin29[0:44] =  45 'b00xx100x0101x1000000001xx001x1001x0000000001x;
	cfgsin28[0:44] =  45 'bx001x1001x0010000001xx001x1001x0000000001xx01;
	cfgsin27[0:44] =  45 'b0x1001x0000100000xx001x0101x0000100000xx010x0;
	cfgsin26[0:44] =  45 'b011x0001000001xx010x1001x0000100000xx100x1000;
	cfgsin25[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx001x001x0000;
end
endtask
task get_wl_pat30; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxx000000000000000000000100100100000000000001;
	cfgsin1[0:44] =  45 'b001000010000000000000010000010000000010000010;
	cfgsin2[0:44] =  45 'b000000010100000110100000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000010000000000000000000010000000000;
	cfgsin4[0:44] =  45 'b000000000001000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000001000000101000001000000000000000000000;
	cfgsin21[0:44] =  45 'b000001000000000000010100000000000000000000000;
	cfgsin22[0:44] =  45 'b011000000000000010000001000000000000000000001;
	cfgsin23[0:44] =  45 'b000000000000000000000100000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b010001000000000000000000000000000000000000000;
	cfgsin30[0:44] =  45 'b001000010000000000100000000000000000000000000;
	cfgsin29[0:44] =  45 'b000000000001000000000000000000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000010000000000000000000001000000;
	cfgsin27[0:44] =  45 'b000100000000001000000000000000000001000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat29; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxx110x0110x0110001101xx000x0001x0101010100x;
	cfgsin1[0:44] =  45 'bx100x0000x0100010101xx010x1000x0110000000xx00;
	cfgsin2[0:44] =  45 'b1x1010x0000001000xx000x0110x0101010100xx101x0;
	cfgsin3[0:44] =  45 'b110x0101001100xx001x0110x0101001100xx010x0110;
	cfgsin4[0:44] =  45 'bx0110001100xx110x0110x0110001001xx110x0110x01;
	cfgsin5[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin6[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin7[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// TR
	cfgsin15[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin14[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin13[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin12[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin11[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin10[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000010000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000100000000000000000110000000000000;
	cfgsin21[0:44] =  45 'b000000000000000010000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000010000000001000000000000;
	cfgsin23[0:44] =  45 'b000000000000010010000000000000000001000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000100000001000100000000000000001010;
	cfgsin30[0:44] =  45 'b000000000100001001000000000000000001010000000;
	cfgsin29[0:44] =  45 'b000000000000000010000000000000000001010000000;
	cfgsin28[0:44] =  45 'b000000000010000000000000000000010010000010000;
	cfgsin27[0:44] =  45 'b000000001100000000000000000010010000000000000;
	cfgsin26[0:44] =  45 'b000001000000000000000000010000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat28; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxx000000000000000010x1010x01100101000;
	cfgsin1[0:44] =  45 'b0000x0010x011000000100010x0010x01000101000000;
	cfgsin2[0:44] =  45 'b0x0000x001000100000000x0110x001000110000001x0;
	cfgsin3[0:44] =  45 'b101x011000110000001x0010x010100010000010x0110;
	cfgsin4[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin5[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin6[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin7[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
// TR
	cfgsin15[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin14[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin13[0:44] =  45 'b110x011000110000010x0110x011000110000010x0110;
	cfgsin12[0:44] =  45 'bx011000110000010x0110x011000110000010x0110x01;
	cfgsin11[0:44] =  45 'b1000110000010x0110x011000110000010x0110x01100;
	cfgsin10[0:44] =  45 'b0110000010x0110x011000110000010x0110x01100011;
	cfgsin9[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin8[0:44] =  45 'bxx0010x0110x01100011000xxxxxxx00000000000000x;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx001x0;
	cfgsin19[0:44] =  45 'b101x0101010101xx010x1010x0101001101xx001x1010;
	cfgsin20[0:44] =  45 'bx0110001000xx000x0001x0001010000xx110x0110x01;
	cfgsin21[0:44] =  45 'b01001001xx010x0100x0000001101xx110x0110x01100;
	cfgsin22[0:44] =  45 'b00001xx110x0101x0010000001xx110x0010x01100010;
	cfgsin23[0:44] =  45 'b01xx110x0110x0000001001xx110x1010x0010001101x;
// BR
	cfgsin31[0:44] =  45 'bx001x0010x0100001100xx000x0110x0110001100xx00;
	cfgsin30[0:44] =  45 'b1x0010x0000001000xx001x1010x1001001000xx001x0;
	cfgsin29[0:44] =  45 'b101x0101010000xx010x1010x0110001100xx001x0110;
	cfgsin28[0:44] =  45 'bx0101001100xx000x0110x0110001100xx001x0000x01;
	cfgsin27[0:44] =  45 'b01000100xx010x0010x0110001100xx010x0010x01010;
	cfgsin26[0:44] =  45 'b01100xx010x0110x0110001100xx110x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
end
endtask
task get_wl_pat27; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000000;
	cfgsin1[0:44] =  45 'b000100100000001000100000010000000000000000000;
	cfgsin2[0:44] =  45 'b010000000000001000000000000001000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000100000000010000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000xxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxx0010x0110x011000110000010x0110x01100011000;
	cfgsin17[0:44] =  45 'b0010x0110x011000110000010x0110x01100011000001;
	cfgsin18[0:44] =  45 'b0x0110x011000110000010x0110x011000110000010x0;
	cfgsin19[0:44] =  45 'b110x011000110000010x0100x011000110000010x0100;
	cfgsin20[0:44] =  45 'bx011000110000000x1010x011001010000010x0010x01;
	cfgsin21[0:44] =  45 'b1001010000010x0100x010100110000010x0010x01100;
	cfgsin22[0:44] =  45 'b0100000000x0110x001000010000000x0100x00010101;
	cfgsin23[0:44] =  45 'b0010000x0001x001000010000010x1010x01100101000;
// BR
	cfgsin31[0:44] =  45 'b0001x0100x010101010000000x0000x01100011000000;
	cfgsin30[0:44] =  45 'b0x1000x011001010000000x0010x010001000000000x0;
	cfgsin29[0:44] =  45 'b000x000001010000000x0010x010000010000000x0100;
	cfgsin28[0:44] =  45 'bx000001010000000x0110x010001010010000x0100x01;
	cfgsin27[0:44] =  45 'b1000110000000x0110x011000110000000x0110x01100;
	cfgsin26[0:44] =  45 'b0110000001x0100x010000110000010x0110x01100011;
	cfgsin25[0:44] =  45 'b0000010x0110x011000110000010x0110x01100011000;
	cfgsin24[0:44] =  45 'bxx0010x0110x011000110000001x1001x10010100100x;
end
endtask
task get_wl_pat26; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000000;
	cfgsin1[0:44] =  45 'b010000000000000000000010000000000010000000000;
	cfgsin2[0:44] =  45 'b100000110000000010000100000000000000010000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000000000000100000;
	cfgsin21[0:44] =  45 'b000000000000000001000000000001000010000000000;
	cfgsin22[0:44] =  45 'b000000000100000000000100000001000010100000000;
	cfgsin23[0:44] =  45 'b000000100100100000000000000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000000000000000000000000100000000000000000;
	cfgsin30[0:44] =  45 'b100000000000000001000001000000010000001001000;
	cfgsin29[0:44] =  45 'b110001100000000000100000000100100000000100010;
	cfgsin28[0:44] =  45 'b010000000010000000000000100000000001000000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000001000000000000;
	cfgsin26[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat25; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxxx1100000001000100xx1x;
	cfgsin1[0:44] =  45 'bx0010000010000100xx0xx0100000001000001xx1xx10;
	cfgsin2[0:44] =  45 'b00010100000100xx0xx1100000001000001xx0xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1100000001000001xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1001000001000001xx1xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1100000001000001xx1xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1100000001000001xx1xx1010000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1100000001000001xx1xx1010000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1100000001000001xx1xx1010000100000100xx1xx11;
	cfgsin14[0:44] =  45 'b00000001000001xx1xx1010000100000100xx1xx11000;
	cfgsin13[0:44] =  45 'b00001000001xx1xx1010000100000100xx1xx11000000;
	cfgsin12[0:44] =  45 'b01000001xx1xx1010000100000100xx1xx11000000010;
	cfgsin11[0:44] =  45 'b00001xx1xx1010000100000100xx1xx11000000010000;
	cfgsin10[0:44] =  45 'b01xx1xx1010000100000100xx1xx1100000100000001x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1100000100000001xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xxxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000001000000000000000000001;
	cfgsin20[0:44] =  45 'b000000000000000010000000000000000000000000000;
	cfgsin21[0:44] =  45 'b000000010000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b001000000000000001000000001000000000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000010001000000000000000000000;
// BR
	cfgsin31[0:44] =  45 'b000000001000000000000000010001000000000001000;
	cfgsin30[0:44] =  45 'b000001000000000000010010000000000000100000000;
	cfgsin29[0:44] =  45 'b000000000000010000000100000000000010000000000;
	cfgsin28[0:44] =  45 'b000100000000001000000000000000000000000001000;
	cfgsin27[0:44] =  45 'b000000000000100000000000000010000000000000000;
	cfgsin26[0:44] =  45 'b000010000000001000100000001000000000000000000;
	cfgsin25[0:44] =  45 'b010000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat24; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxxx0010000001000100xx1x;
	cfgsin1[0:44] =  45 'bx0000010010000100xx1xx0010000001000100xx1xx10;
	cfgsin2[0:44] =  45 'b10000100000100xx1xx1010000001000100xx1xx10100;
	cfgsin3[0:44] =  45 'b00100000100xx1xx1010000001000100xx1xx10100001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1010000001000100xx1xx10100001000;
	cfgsin5[0:44] =  45 'b00100xx1xx1010000001000100xx1xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1010000001000100xx1xx1010000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1010000001000100xx1xx1010000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000001000100xx1xx1010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000001000100xx1xx1010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00001000100xx1xx1010000100000100xx1xx10100000;
	cfgsin12[0:44] =  45 'b01000100xx1xx1010000100000100xx1xx10100000010;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100000010001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000100000100xx1xx1010000100000100x;
	cfgsin9[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1010000100000100xx1xxxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1010000001000010xx1xx10010000;
	cfgsin20[0:44] =  45 'b01000010xx1xx1010000000001100xx1xx10100000000;
	cfgsin21[0:44] =  45 'b10100xx0xx1000100100000100xx0xx10100000010001;
	cfgsin22[0:44] =  45 'b00xx1xx1001000001000100xx0xx1010000100000001x;
	cfgsin23[0:44] =  45 'bx0xx1010000000100010xx0xx1000100100000010xx1x;
// BR
	cfgsin31[0:44] =  45 'bx1100000000010010xx1xx1100000000010010xx0xx10;
	cfgsin30[0:44] =  45 'b10000001000100xx0xx0100000000001010xx0xx10100;
	cfgsin29[0:44] =  45 'b00000010100xx0xx1001000001000010xx0xx11000000;
	cfgsin28[0:44] =  45 'b00010100xx0xx1000010001000100xx0xx10100000000;
	cfgsin27[0:44] =  45 'b10010xx1xx1100000100000001xx0xx10100000000100;
	cfgsin26[0:44] =  45 'b10xx0xx1100000100000001xx0xx1010000000010100x;
	cfgsin25[0:44] =  45 'bx0xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000100000100xx1xx;
end
endtask
task get_wl_pat23; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx001000010001000100x000;
	cfgsin1[0:44] =  45 'b00010000010000100x00000000001001000001x000000;
	cfgsin2[0:44] =  45 'b10000100000100x00000010000001000001x000000100;
	cfgsin3[0:44] =  45 'b00001000100x00000010000001000001x000000100001;
	cfgsin4[0:44] =  45 'b00000100x00000100000001000001x000000100001000;
	cfgsin5[0:44] =  45 'b00100x00000010000001000001x000000100001000001;
	cfgsin6[0:44] =  45 'b00x00000010000001000001x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000001000001x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000001000001x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000001000001x00000010000100000100x000000100;
	cfgsin13[0:44] =  45 'b00001000001x00000010000100000100x000000100000;
	cfgsin12[0:44] =  45 'b01000001x00000010000100000100x000000100000010;
	cfgsin11[0:44] =  45 'b00001x00000010000100000100x000000100000010000;
	cfgsin10[0:44] =  45 'b01x00000010000100000100x00000010000100000001x;
	cfgsin9[0:44] =  45 'b00000010000100000100x00000010000100000001x000;
	cfgsin8[0:44] =  45 'bxx00010000100000100x0000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin19[0:44] =  45 'b00100000100xx1xx1100000001000001xx1xx11000000;
	cfgsin20[0:44] =  45 'b01000001xx1xx0001000100000001xx1xx01000000100;
	cfgsin21[0:44] =  45 'b00010xx0xx1100000000100100xx1xx10000100010000;
	cfgsin22[0:44] =  45 'b01xx0xx1100000001000001xx0xx0001000001000100x;
	cfgsin23[0:44] =  45 'bx0xx0010000100000001xx1xx0100000000001100xx0x;
// BR
	cfgsin31[0:44] =  45 'bx1010000001000100xx0xx0001000001000100xx0xx01;
	cfgsin30[0:44] =  45 'b00000000010001xx0xx0000100000010001xx1xx11000;
	cfgsin29[0:44] =  45 'b00100000001xx0xx0000010001000100xx0xx10100000;
	cfgsin28[0:44] =  45 'b00100001xx0xx0010000100000010xx0xx10001000010;
	cfgsin27[0:44] =  45 'b00100xx1xx1100000001000100xx0xx11000000010001;
	cfgsin26[0:44] =  45 'b00xx0xx1010000000010100xx0xx1100000001000010x;
	cfgsin25[0:44] =  45 'bx0xx1010000100000100xx1xx1010000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1010000100000100xx1xx0010000001000100xx1xx;
end
endtask
task get_wl_pat22; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000000100001000100xx00;
	cfgsin1[0:44] =  45 'b01000100010000100xx0001000100100000100xx00000;
	cfgsin2[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin3[0:44] =  45 'b00001000100xx0000001000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000100000100xx00001000000010;
	cfgsin5[0:44] =  45 'b00100xx0000001000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000100000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100xx0000100000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000100000100xx0000100000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00000010001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100xx00000010001000;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00000010001000001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx000010000100000100x00000010000100000100xx00;
	cfgsin17[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin18[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin19[0:44] =  45 'b00100000100xx0000010000001000100xx00000100000;
	cfgsin20[0:44] =  45 'b01000100xx0001100000000100010xx00010100001000;
	cfgsin21[0:44] =  45 'b00001xx0000000100000100010xx00001000000000100;
	cfgsin22[0:44] =  45 'b01xx0000001000001000001xx0101100000001000010x;
	cfgsin23[0:44] =  45 'bx0010100000001000100xx0001010000100000100xx10;
// BR
	cfgsin31[0:44] =  45 'b00000100100000001xx0000100000001000001xx00011;
	cfgsin30[0:44] =  45 'b00000000001010xx1001000010100000100xx00000010;
	cfgsin29[0:44] =  45 'b00010000100xx1000100000001000001xx00000010001;
	cfgsin28[0:44] =  45 'b00000100xx1001100000001000001xx01001000000000;
	cfgsin27[0:44] =  45 'b01001xx0000000100000001010xx10000001000001000;
	cfgsin26[0:44] =  45 'b01xx1000001000000001010xx0000001000000001001x;
	cfgsin25[0:44] =  45 'bx1000010000100000100xx0000010000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00010000100000100xx0001010000001000100x0000;
end
endtask
task get_wl_pat21; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx00000001000001100x000;
	cfgsin1[0:44] =  45 'b00000010010000100x00000000100000001001x000000;
	cfgsin2[0:44] =  45 'b01000100000100x00000001000000001001x000000010;
	cfgsin3[0:44] =  45 'b00001000100x00000001000000001001x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000001000001000001x000001000000010;
	cfgsin5[0:44] =  45 'b00100x00000001000000001001x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000001000000001001x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000001000000001001x00000100000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00001000000001001x00000100000100000100x000000;
	cfgsin14[0:44] =  45 'b01000000001001x00000100000100000100x000000010;
	cfgsin13[0:44] =  45 'b00000001001x00000100000100000100x000000010000;
	cfgsin12[0:44] =  45 'b00001001x00000100000100000100x000000010000000;
	cfgsin11[0:44] =  45 'b01001x00000100000100000100x000000010000000010;
	cfgsin10[0:44] =  45 'b01x00000100000100000100x00000001000000001001x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000001000000001001x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x000xxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000001000001xx00000010000;
	cfgsin20[0:44] =  45 'b01000001xx0000001000001000010xx00000001000010;
	cfgsin21[0:44] =  45 'b00100xx0000001000001000010xx00000010000100000;
	cfgsin22[0:44] =  45 'b01xx0000001000001000001xx0000000100001000001x;
	cfgsin23[0:44] =  45 'bx1000001000010000010xx0000100000100000010xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000001000010xx1010000100001000010xx10000;
	cfgsin30[0:44] =  45 'b01000100000100xx0000010000010000001xx00000010;
	cfgsin29[0:44] =  45 'b00001000010xx0001010000001000100xx10000000100;
	cfgsin28[0:44] =  45 'b01000001xx0000000100001000100xx00000010000010;
	cfgsin27[0:44] =  45 'b00100xx0000001000001000100xx00000010000010001;
	cfgsin26[0:44] =  45 'b00xx0000000100010000001xx1000001000001000001x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000001xx000;
end
endtask
task get_wl_pat20; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000001000000010100x000;
	cfgsin1[0:44] =  45 'b00000001100000100x00000000100010000100x010000;
	cfgsin2[0:44] =  45 'b01000000001100x00000001000100000100x000000010;
	cfgsin3[0:44] =  45 'b00001000100x00000001000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000001000001000100x000001000000010;
	cfgsin5[0:44] =  45 'b00100x00000001000100000100x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000001000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000001000100000100x00000100000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00001000100000100x00000100000100000100x000000;
	cfgsin14[0:44] =  45 'b01000100000100x00000100000100000100x000000010;
	cfgsin13[0:44] =  45 'b00100000100x00000100000100000100x000000010001;
	cfgsin12[0:44] =  45 'b00000100x00000100000100000100x000000010001000;
	cfgsin11[0:44] =  45 'b00100x00000100000100000100x000000010001000001;
	cfgsin10[0:44] =  45 'b00x00000100000100000100x00000001000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000001000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x0000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000001000001xx00000010000;
	cfgsin20[0:44] =  45 'b01000001xx0000010000100000010xx00000010000100;
	cfgsin21[0:44] =  45 'b00100xx0100001000001000001xx00000010000010000;
	cfgsin22[0:44] =  45 'b01xx1000001000001000001xx0000000100001000001x;
	cfgsin23[0:44] =  45 'bx0000000010100000010xx0000100000010000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00000010001000001xx0000000010000001001xx00000;
	cfgsin30[0:44] =  45 'b10000000001010xx0000001000100000100xx00000000;
	cfgsin29[0:44] =  45 'b10001000001xx0000001000001000010xx00000010000;
	cfgsin28[0:44] =  45 'b01000010xx0000001000001000010xx00000010000010;
	cfgsin27[0:44] =  45 'b00001xx0000010000001000001xx00000010000010000;
	cfgsin26[0:44] =  45 'b10xx0000010000100000100xx0000001000001000001x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x000x;
end
endtask
task get_wl_pat19; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx00001000010000100xx00;
	cfgsin1[0:44] =  45 'b00000100000010100xx0000001000001000100xx00010;
	cfgsin2[0:44] =  45 'b00100100000100xx0010001000001000100xx00010010;
	cfgsin3[0:44] =  45 'b00001000100xx0000001000001000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000001000100xx00001000000010;
	cfgsin5[0:44] =  45 'b00100xx0000001000001000100xx00000100001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000001000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000001000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000001000100xx0000100000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000001000100xx0000100000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00001000100xx0000100000100000100xx00000010000;
	cfgsin12[0:44] =  45 'b01000100xx0000100000100000100xx00000010000010;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00000010000010001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx00xxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000001000001xx00000010000;
	cfgsin20[0:44] =  45 'b01000001xx0000000001000010010xx00000100000001;
	cfgsin21[0:44] =  45 'b00100xx0000001000100000100xx00001000000010000;
	cfgsin22[0:44] =  45 'b01xx0000001000001000001xx0000000100001000001x;
	cfgsin23[0:44] =  45 'bx0000000010100000010xx0100100000100000001xx00;
// BR
	cfgsin31[0:44] =  45 'b01010000100000001xx0000010000000001100xx00000;
	cfgsin30[0:44] =  45 'b00010000100001xx0010000010000010100xx00001000;
	cfgsin29[0:44] =  45 'b00000001100xx0000000100001000001xx00101000000;
	cfgsin28[0:44] =  45 'b00100100xx0000000010001000010xx00000100000001;
	cfgsin27[0:44] =  45 'b00001xx1000000010000010001xx00000100001000000;
	cfgsin26[0:44] =  45 'b01xx0000100000000100010xx0000010000001000001x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100x0000;
end
endtask
task get_wl_pat18; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000001000100000100xx00;
	cfgsin1[0:44] =  45 'b00000100010000010xx0000001000001000100xx00000;
	cfgsin2[0:44] =  45 'b01000000001010xx0100001000001000100xx10000010;
	cfgsin3[0:44] =  45 'b00001000001xx0000001000001000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000001000001000100xx00001000000010;
	cfgsin5[0:44] =  45 'b00100xx0000001000001000100xx00000100001000001;
	cfgsin6[0:44] =  45 'b00xx0000001000001000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000001000001000100xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00001000001000100xx0000100000100000100xx00000;
	cfgsin14[0:44] =  45 'b01000001000100xx0000100000100000100xx00000010;
	cfgsin13[0:44] =  45 'b00001000100xx0000100000100000100xx00000010000;
	cfgsin12[0:44] =  45 'b01000100xx0000100000100000100xx00000010000010;
	cfgsin11[0:44] =  45 'b00100xx0000100000100000100xx00000010000010001;
	cfgsin10[0:44] =  45 'b00xx0000100000100000100xx0000001000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000001000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx1000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx0000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx0000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx0000001000001000100xx00000010000;
	cfgsin20[0:44] =  45 'b01000100xx0000000010100000100xx00001000000100;
	cfgsin21[0:44] =  45 'b00100xx0000100000001000100xx00000010000010000;
	cfgsin22[0:44] =  45 'b10xx0000001000001000100xx1000001000001000100x;
	cfgsin23[0:44] =  45 'bx0000000100100000010xx0000100000001000010xx00;
// BR
	cfgsin31[0:44] =  45 'b00001000001000010xx0100000100001000010xx01000;
	cfgsin30[0:44] =  45 'b01000000100010xx0000000100000001100xx00000001;
	cfgsin29[0:44] =  45 'b00000001100xx0000001000001000010xx00000000010;
	cfgsin28[0:44] =  45 'b10000100xx0000001000001000010xx01000010000010;
	cfgsin27[0:44] =  45 'b00010xx0000000100001000100xx00000100001000001;
	cfgsin26[0:44] =  45 'b00xx0000100000001000100xx0000001000001000100x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0000001000001000100xx00x;
end
endtask
task get_wl_pat17; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxxx1001000100000100x01x;
	cfgsin1[0:44] =  45 'bx1001000010000100x01xx1001000100000001x00xx00;
	cfgsin2[0:44] =  45 'b00100100000100x00xx0001000100000001x00xx00010;
	cfgsin3[0:44] =  45 'b00100000100x01xx1001000100000001x01xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1001000100000001x01xx11000001000;
	cfgsin5[0:44] =  45 'b00100x01xx1001000100000001x01xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1001000100000001x01xx1100000100000100x;
	cfgsin7[0:44] =  45 'b01xx1001000100000001x01xx1100000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1001000100000001x01xx1100000100000100x01xx10;
	cfgsin14[0:44] =  45 'b01000100000001x01xx1100000100000100x01xx10010;
	cfgsin13[0:44] =  45 'b00100000001x01xx1100000100000100x01xx10010001;
	cfgsin12[0:44] =  45 'b00000001x01xx1100000100000100x01xx10010001000;
	cfgsin11[0:44] =  45 'b00001x01xx1100000100000100x01xx10010001000000;
	cfgsin10[0:44] =  45 'b01x01xx1100000100000100x01xx1001000100000001x;
	cfgsin9[0:44] =  45 'b01xx1100000100000100x01xx1001000100000001x01x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01xxxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000001000100000100xx00;
	cfgsin17[0:44] =  45 'b00001000100000100xx1000001000100000100xx00000;
	cfgsin18[0:44] =  45 'b01000100000100xx1000001000100000100xx00000010;
	cfgsin19[0:44] =  45 'b00100000100xx1000001000001000001xx00000010000;
	cfgsin20[0:44] =  45 'b01000001xx1000000100100000001xx00000001000100;
	cfgsin21[0:44] =  45 'b00001xx1001001000001000010xx00000001000010001;
	cfgsin22[0:44] =  45 'b00xx1000001000001000001xx0001000100001000010x;
	cfgsin23[0:44] =  45 'bx1000001000100000001xx0000100000001000100xx01;
// BR
	cfgsin31[0:44] =  45 'b00000010000001100xx0000000100001000100xx00100;
	cfgsin30[0:44] =  45 'b00100010000100xx1000001000000001010xx00000010;
	cfgsin29[0:44] =  45 'b00001000001xx1000001000001000100xx10000010000;
	cfgsin28[0:44] =  45 'b00001001xx1000001000000001100xx00000000100010;
	cfgsin27[0:44] =  45 'b00001xx0000010000001000010xx01000000100010000;
	cfgsin26[0:44] =  45 'b01xx0101001000000001010xx0000001000001000001x;
	cfgsin25[0:44] =  45 'bx0000001000100000100xx0000001000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00001000100000100xx0001001000001000001xx000;
end
endtask
task get_wl_pat16; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx0x1100000100000010x11x;
	cfgsin1[0:44] =  45 'bx0000010010000010x00xx1100000100000100x10xx01;
	cfgsin2[0:44] =  45 'b00000100000010x00xx1100000100000100x10xx11000;
	cfgsin3[0:44] =  45 'b00100000001x01xx1100000100000100x11xx11000001;
	cfgsin4[0:44] =  45 'b00000100x01xx1010000100000100x11xx10100001000;
	cfgsin5[0:44] =  45 'b00001x01xx1010000100000100x11xx10100001000001;
	cfgsin6[0:44] =  45 'b00x01xx1010000100000100x11xx1100000100000100x;
	cfgsin7[0:44] =  45 'b01xx1100000100000100x11xx1010000100000100x01x;
// TR
	cfgsin15[0:44] =  45 'bx1100000100000100x11xx1100000100000100x01xx10;
	cfgsin14[0:44] =  45 'b10000100000100x11xx1010000100000100x01xx10100;
	cfgsin13[0:44] =  45 'b00100000100x11xx1010000100000100x01xx10100001;
	cfgsin12[0:44] =  45 'b00000100x11xx1010000100000100x01xx10100001000;
	cfgsin11[0:44] =  45 'b00100x11xx1010000100000100x01xx10100001000001;
	cfgsin10[0:44] =  45 'b00x11xx1010000100000100x01xx1010000100000100x;
	cfgsin9[0:44] =  45 'b11xx1100000100000100x01xx1100000100000100x11x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100x01x0xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100x00xx1001000100000100xx1x;
	cfgsin17[0:44] =  45 'bx1001000100000100xx0xx1001000100000100xx1xx10;
	cfgsin18[0:44] =  45 'b01000100000100xx0xx1001000100000100xx1xx10010;
	cfgsin19[0:44] =  45 'b00100000100xx0xx1000010100000001xx1xx10010001;
	cfgsin20[0:44] =  45 'b00000001xx0xx1001000000010010xx1xx10001000010;
	cfgsin21[0:44] =  45 'b00100xx0xx0001000010000001xx1xx10010001000000;
	cfgsin22[0:44] =  45 'b01xx0xx1001000001000001xx0xx0001000000001001x;
	cfgsin23[0:44] =  45 'bx0xx1001000100000100xx0xx1000100000001100xx0x;
// BR
	cfgsin31[0:44] =  45 'bx0000100100000010xx0xx1001000000100001xx0xx00;
	cfgsin30[0:44] =  45 'b00100000010010xx0xx0000100100000100xx1xx10001;
	cfgsin29[0:44] =  45 'b00100000100xx0xx1010000001000001xx0xx00001001;
	cfgsin28[0:44] =  45 'b00000010xx0xx1000100000010001xx0xx10001001000;
	cfgsin27[0:44] =  45 'b00100xx0xx1100000000010001xx0xx11000001000000;
	cfgsin26[0:44] =  45 'b10xx0xx0000100000010001xx1xx1001000001000010x;
	cfgsin25[0:44] =  45 'bx1xx1001000100000100xx1xx1001000100000100xx1x;
	cfgsin24[0:44] =  45 'bxxx1001000100000100xx1xx0001000100000100x01xx;
end
endtask
task get_wl_pat15; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx00100000100000100xx00;
	cfgsin1[0:44] =  45 'b01000100100000001xx0000100000100000100xx00100;
	cfgsin2[0:44] =  45 'b00010000100001xx0100100000100000100xx10001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin5[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin6[0:44] =  45 'b00xx0000010000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000100000100000100xx0000010000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100xx0000100000100000100xx00000;
	cfgsin14[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin13[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin12[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin10[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx00xxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx0x1100000100000100x01xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1100000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000100x01xx1010000100000100x01xx10100;
	cfgsin19[0:44] =  45 'b00100000100x01xx1100000100000100x01xx10100001;
	cfgsin20[0:44] =  45 'b00000010x01xx1000010001000100x00xx10100000100;
	cfgsin21[0:44] =  45 'b00010x00xx1010000100000010x01xx10100001000001;
	cfgsin22[0:44] =  45 'b00x00xx1010000001000010x01xx1010000100000100x;
	cfgsin23[0:44] =  45 'b01xx1000100001000100x00xx1010000100000100xx0x;
// BR
	cfgsin31[0:44] =  45 'bx1000010000100100x00xx1001000001000100x10xx10;
	cfgsin30[0:44] =  45 'b01000001000001x00xx0010000100000010x00xx00100;
	cfgsin29[0:44] =  45 'b00010000100x00xx1001000010000001x00xx10100000;
	cfgsin28[0:44] =  45 'b00001100x00xx1010000100000001x01xx10000101000;
	cfgsin27[0:44] =  45 'b00010x00xx1001000100000100x00xx10010000010000;
	cfgsin26[0:44] =  45 'b10x00xx1010000000100010x10xx1010000100000100x;
	cfgsin25[0:44] =  45 'b00xx1100000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000001x01x0;
end
endtask
task get_wl_pat14; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000100000000010100xx00;
	cfgsin1[0:44] =  45 'b00100000000010100xx0000010000100000100xx00001;
	cfgsin2[0:44] =  45 'b00000001000100xx0000010000100000100xx00000100;
	cfgsin3[0:44] =  45 'b00100000001xx0000010000100000100xx00001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin5[0:44] =  45 'b00001xx0000010000100000100xx00000100001000001;
	cfgsin6[0:44] =  45 'b00xx0000010000100000100xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100xx0000100000100000100xx00000;
	cfgsin14[0:44] =  45 'b10000100000100xx0000010000100000100xx00000100;
	cfgsin13[0:44] =  45 'b00100000100xx0000010000100000100xx00000100001;
	cfgsin12[0:44] =  45 'b00000100xx0000010000100000100xx00000100001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin10[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000100000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000010x000000100001;
	cfgsin20[0:44] =  45 'b00000100x00000010000001000010x000000010000100;
	cfgsin21[0:44] =  45 'b00100x01000010000100000100x000000100001000000;
	cfgsin22[0:44] =  45 'b01x00000010000001000100x00000010000000100010x;
	cfgsin23[0:44] =  45 'b00000010000100000001x01000010000000001100xx10;
// BR
	cfgsin31[0:44] =  45 'b00010000001000010x00000000100000100010x010000;
	cfgsin30[0:44] =  45 'b10000001000100x01001010000000010001x010100100;
	cfgsin29[0:44] =  45 'b00100000100x00100010000001000001x100000010000;
	cfgsin28[0:44] =  45 'b01000100x00000010000001000001x000001000001000;
	cfgsin27[0:44] =  45 'b00100x00000000010001000010x001000000100000011;
	cfgsin26[0:44] =  45 'b00x10000010000000001001x01000001000000001010x;
	cfgsin25[0:44] =  45 'b01000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00001010000100000100xx00x;
end
endtask
task get_wl_pat13; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx00000001100000010xx00;
	cfgsin1[0:44] =  45 'b00100000001000100xx0100000001100000100xx10001;
	cfgsin2[0:44] =  45 'b00000000100100xx0000100000100000100xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx0000100000100000100xx00000100001;
	cfgsin4[0:44] =  45 'b00000100xx0000010000100000010xx00000100001000;
	cfgsin5[0:44] =  45 'b00100xx0000010000100000100xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000100000100000100xx0000010000100000100x;
	cfgsin7[0:44] =  45 'bx0000010000100000100xx0000010000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100xx0000010000100000100xx00000;
	cfgsin14[0:44] =  45 'b10000100000100xx0000010000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000100xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000100xx0000100000100000100xx00000100001000;
	cfgsin11[0:44] =  45 'b00100xx0000010000100000100xx00000100001000001;
	cfgsin10[0:44] =  45 'b00xx0000010000100000100xx0000010000100000100x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx00xxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100x100;
	cfgsin17[0:44] =  45 'b00100000100000100x10000100000100000100x100000;
	cfgsin18[0:44] =  45 'b10000100000100x10000010000100000100x100000100;
	cfgsin19[0:44] =  45 'b00100000100x10000010000010000001x100000100000;
	cfgsin20[0:44] =  45 'b00001001x10000100000010000001x100001000000000;
	cfgsin21[0:44] =  45 'b10001x10000010000000001001x100000100000010000;
	cfgsin22[0:44] =  45 'b10x10000010000000001001x10000010000010000001x;
	cfgsin23[0:44] =  45 'b10000001000001000010x10000010000100000100xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000010000001x10000010000010000001x100000;
	cfgsin30[0:44] =  45 'b00010001000010x10000010000000001100x100000100;
	cfgsin29[0:44] =  45 'b00100000100x10000010000001000001x100000100001;
	cfgsin28[0:44] =  45 'b00000100x11000010000001000001x100000100000100;
	cfgsin27[0:44] =  45 'b00001x10000010000010000001x100000100000100000;
	cfgsin26[0:44] =  45 'b01x10000001000010000100x10000010000010000001x;
	cfgsin25[0:44] =  45 'b10000100000100000100x10000100000100000100x100;
	cfgsin24[0:44] =  45 'bxx00100000100000100x10000010000100000001xx000;
end
endtask
task get_wl_pat12; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000100000100000100x100;
	cfgsin1[0:44] =  45 'b00100000010000010x00000100000100000100x101001;
	cfgsin2[0:44] =  45 'b00000000100010x00000100000100000100x100001000;
	cfgsin3[0:44] =  45 'b00100000001x00000100000100000100x100000100001;
	cfgsin4[0:44] =  45 'b00000100x00000010000100000001x100000100001000;
	cfgsin5[0:44] =  45 'b00001x00000010000100000100x100001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000100000100x10000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000100000100x10000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000100x10000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000100x10000010000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000100x10000100000100000100x000001000001;
	cfgsin12[0:44] =  45 'b00000100x10000100000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00100x10000010000100000100x000000100001000001;
	cfgsin10[0:44] =  45 'b00x10000010000100000100x00000010000100000100x;
	cfgsin9[0:44] =  45 'b10000100000100000100x00000100000100000100x100;
	cfgsin8[0:44] =  45 'bxx00100000100000100x0000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100xx0000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000100000100000100x000000100;
	cfgsin19[0:44] =  45 'b00100000100x00000010000100000001x000000100001;
	cfgsin20[0:44] =  45 'b00000001x00000010000001000100x110000100001000;
	cfgsin21[0:44] =  45 'b00010x00000010000001000001x000001000000000010;
	cfgsin22[0:44] =  45 'b10x11000010000100000010x10000010000100000001x;
	cfgsin23[0:44] =  45 'b00000100000001000010x00000000001100000001xx00;
// BR
	cfgsin31[0:44] =  45 'b00010000100000001x01000010000001000010x000000;
	cfgsin30[0:44] =  45 'b00001001000100x00000100000001000100x000000010;
	cfgsin29[0:44] =  45 'b00000100010x10000010000100000100x001000010000;
	cfgsin28[0:44] =  45 'b10000100x00000100000100000010x000000100001000;
	cfgsin27[0:44] =  45 'b00001x00100010000100000001x000000100000001000;
	cfgsin26[0:44] =  45 'b01x00100100000100000100x00000010000100000001x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100xx00x;
end
endtask
task get_wl_pat11; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000001000100000001x000;
	cfgsin1[0:44] =  45 'b00100000010000100x00000100000100000001x000001;
	cfgsin2[0:44] =  45 'b00000100000100x00000100000100000001x000001000;
	cfgsin3[0:44] =  45 'b00100000100x00000100000100000001x000000100001;
	cfgsin4[0:44] =  45 'b00000100x00000010000100000100x000000100001000;
	cfgsin5[0:44] =  45 'b00100x00000010000100000001x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000100000001x00000010000100000100x;
	cfgsin7[0:44] =  45 'b00000010000100000001x00000010000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00010000100000001x00000010000100000100x000000;
	cfgsin14[0:44] =  45 'b10000100000001x00000010000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000001x00000100000100000100x000001000001;
	cfgsin12[0:44] =  45 'b00000001x00000100000100000100x000000100001000;
	cfgsin11[0:44] =  45 'b00001x00000010000100000100x000000100001000000;
	cfgsin10[0:44] =  45 'b01x00000010000100000100x00000010000100000001x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000001x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x0000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000100000100000100x000000100;
	cfgsin19[0:44] =  45 'b00100000100x00000100000100000001x000000100001;
	cfgsin20[0:44] =  45 'b00000001x00000100000001000010x000000100000010;
	cfgsin21[0:44] =  45 'b00100x00000000010000001001x000000000100001000;
	cfgsin22[0:44] =  45 'b01x00000000010010000001x00000100000100000001x;
	cfgsin23[0:44] =  45 'b00101010000001000010x00000010000000001100xx00;
// BR
	cfgsin31[0:44] =  45 'b00100000001000001x00000100000100000010x000000;
	cfgsin30[0:44] =  45 'b10000000001010x00001000001010000010x000000000;
	cfgsin29[0:44] =  45 'b01010000100x00000000001000010001x000000010000;
	cfgsin28[0:44] =  45 'b00100010x00000001000010000001x000000000100000;
	cfgsin27[0:44] =  45 'b01100x10000100000000100100x100000010000010000;
	cfgsin26[0:44] =  45 'b10x10000001000000001100x00000100000100000001x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000001x0000;
end
endtask
task get_wl_pat10; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx000000011000000010000;
	cfgsin1[0:44] =  45 'b000010000000011000000000000010000010010000000;
	cfgsin2[0:44] =  45 'b000011000000010010000010001000001000000000010;
	cfgsin3[0:44] =  45 'b001000000010000000010001000001000000000010001;
	cfgsin4[0:44] =  45 'b000001000000000010000000010010000000010001000;
	cfgsin5[0:44] =  45 'b000010000000100001000001000000000100001000001;
	cfgsin6[0:44] =  45 'b000000000010001000001000000000100001000001000;
	cfgsin7[0:44] =  45 'b000000100001000001000000000100001000001000000;
// TR
	cfgsin15[0:44] =  45 'b000100001000001000000000100001000001000000000;
	cfgsin14[0:44] =  45 'b100001000001000000000100001000001000000000100;
	cfgsin13[0:44] =  45 'b001000001000000000100001000001000000000010001;
	cfgsin12[0:44] =  45 'b000001000000000100001000001000000000100001000;
	cfgsin11[0:44] =  45 'b001000000000100001000001000000000100001000001;
	cfgsin10[0:44] =  45 'b000000000100001000001000000000100001000001000;
	cfgsin9[0:44] =  45 'b000001000001000001000000001000001000001000000;
	cfgsin8[0:44] =  45 'bxx001000001000001000000xxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100x000;
	cfgsin17[0:44] =  45 'b00100000100000100x00000010000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000100000100000100x000000100;
	cfgsin19[0:44] =  45 'b00100000100x00000010000100000001x000000100001;
	cfgsin20[0:44] =  45 'b00000001x00000010000001000010x000001000000100;
	cfgsin21[0:44] =  45 'b00100x00000100000000001001x000010000101000001;
	cfgsin22[0:44] =  45 'b00x00000100000001000001x00100010000100000001x;
	cfgsin23[0:44] =  45 'b00000010000001000010x00000010000000001100x000;
// BR
	cfgsin31[0:44] =  45 'b00010000000001001x00000000001000100001x000001;
	cfgsin30[0:44] =  45 'b00000001000010x00000010000010000010x010000100;
	cfgsin29[0:44] =  45 'b00000010100x00000001000000001010x000000100000;
	cfgsin28[0:44] =  45 'b00100100x01000001000001000100x000001000000000;
	cfgsin27[0:44] =  45 'b01001x00000001000001000001x000001000000010000;
	cfgsin26[0:44] =  45 'b01x00000010000100000100x00000001000100000001x;
	cfgsin25[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x00000100000100000100x0000;
end
endtask
task get_wl_pat9; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx0x10010000100000100x1x;
	cfgsin1[0:44] =  45 'bx10000011000000100x1xx10010000100000100x0xx10;
	cfgsin2[0:44] =  45 'b010000100001000x0xx10010001000001000x1xx10010;
	cfgsin3[0:44] =  45 'b001000001000x1xx10010001000001000x1xx10010001;
	cfgsin4[0:44] =  45 'b000001000x1xx10010001000001000x1xx10010001000;
	cfgsin5[0:44] =  45 'b001000x1xx10100001000001000x1xx10100001000001;
	cfgsin6[0:44] =  45 'b000x1xx10010001000001000x1xx10100001000001000;
	cfgsin7[0:44] =  45 'bx1xx10100001000001000x1xx10100001000001000x1x;
// TR
	cfgsin15[0:44] =  45 'bx10100001000001000x1xx10100001000001000x1xx10;
	cfgsin14[0:44] =  45 'b100001000001000x1xx10100001000001000x1xx10100;
	cfgsin13[0:44] =  45 'b001000001000x1xx10100001000001000x1xx10010001;
	cfgsin12[0:44] =  45 'b000001000x1xx10100001000001000x1xx10100001000;
	cfgsin11[0:44] =  45 'b001000x1xx10100001000001000x1xx10100001000001;
	cfgsin10[0:44] =  45 'b000x1xx10100001000001000x1xx10100001000001000;
	cfgsin9[0:44] =  45 'bx1xx11000001000001000x1xx11000001000001000x1x;
	cfgsin8[0:44] =  45 'bxxx11000001000001000x1x0xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000100000100000000100000100000100x000;
	cfgsin17[0:44] =  45 'b00010000100000100x00000100000100000100x000000;
	cfgsin18[0:44] =  45 'b10000100000100x00000010000100000100x000000100;
	cfgsin19[0:44] =  45 'b00100000100x00000000010000001001x000001000000;
	cfgsin20[0:44] =  45 'b00001001x00000010000001000010x000000001000000;
	cfgsin21[0:44] =  45 'b01100x00001001000000001010x000000010000100000;
	cfgsin22[0:44] =  45 'b01x00000001000000001001x00001001000100000001x;
	cfgsin23[0:44] =  45 'b00000010000001000010x010000010001000001000000;
// BR
	cfgsin31[0:44] =  45 'b00100000001000100x10000001000000010001x001100;
	cfgsin30[0:44] =  45 'b00100001000010x01000010000000100100x000000100;
	cfgsin29[0:44] =  45 'b00000001100x00100010000001000001x001000100000;
	cfgsin28[0:44] =  45 'b00010010x00000001000001000001x001000010001000;
	cfgsin27[0:44] =  45 'b00001x00100001000000001100x001000010000000010;
	cfgsin26[0:44] =  45 'b10x00001010000100000100x10010010000000001001x;
	cfgsin25[0:44] =  45 'b01000001000100000100x00000100000100000100x000;
	cfgsin24[0:44] =  45 'bxx00100000100000100x000010100001000000010000x;
end
endtask
task get_wl_pat8; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxxx0100000010000100xx1x;
	cfgsin1[0:44] =  45 'bx1000010100000001xx1xx1001000010000100xx1xx00;
	cfgsin2[0:44] =  45 'b01000010000010xx1xx1001000100000100xx1xx10010;
	cfgsin3[0:44] =  45 'b00100000001xx0xx1001000100000100xx0xx10010001;
	cfgsin4[0:44] =  45 'b00000100xx1xx1001000100000001xx1xx10010001000;
	cfgsin5[0:44] =  45 'b00001xx1xx1010000100000100xx1xx10100001000001;
	cfgsin6[0:44] =  45 'b00xx1xx1001000100000100xx1xx1010000100000100x;
	cfgsin7[0:44] =  45 'bx1xx1010000100000100xx1xx1010000100000100xx1x;
// TR
	cfgsin15[0:44] =  45 'bx1010000100000100xx1xx1010000100000100xx1xx10;
	cfgsin14[0:44] =  45 'b10000100000100xx1xx1010000100000100xx1xx10100;
	cfgsin13[0:44] =  45 'b00100000100xx1xx1010000100000100xx1xx10010001;
	cfgsin12[0:44] =  45 'b00000100xx1xx1010000100000100xx1xx10100001000;
	cfgsin11[0:44] =  45 'b00100xx1xx1010000100000100xx1xx10100001000001;
	cfgsin10[0:44] =  45 'b00xx1xx1010000100000100xx1xx1000100100000100x;
	cfgsin9[0:44] =  45 'bx1xx1100000100000100xx1xx1000100100000100xx1x;
	cfgsin8[0:44] =  45 'bxxx1100000100000100xx1xxxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx0x11000001000001000x1xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000100x01xx1010000100000100x01xx10100;
	cfgsin19[0:44] =  45 'b00100000100x01xx1010000100000001x01xx10100000;
	cfgsin20[0:44] =  45 'b00001001x01xx1010000100000100x01xx10000011000;
	cfgsin21[0:44] =  45 'b00001x01xx0000010001000100x01xx00100000010000;
	cfgsin22[0:44] =  45 'b10x01xx1000100001000010x00xx0010000000001001x;
	cfgsin23[0:44] =  45 'b00xx0010000000010010x00xx10100000100001000x1x;
// BR
	cfgsin31[0:44] =  45 'bx1100000001000010x01xx1000100001000100x00xx00;
	cfgsin30[0:44] =  45 'b10000000100100x00xx0010000000001001x00xx10100;
	cfgsin29[0:44] =  45 'b00001000001x00xx1001000000001010x00xx10100000;
	cfgsin28[0:44] =  45 'b01000100x00xx1000001001000100x00xx10001001000;
	cfgsin27[0:44] =  45 'b00010x00xx1010000100000010x00xx10100001000001;
	cfgsin26[0:44] =  45 'b00x11xx0010000000010001x01xx0010000100000001x;
	cfgsin25[0:44] =  45 'b00xx1001000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx00100001000001000x1x0;
end
endtask
task get_wl_pat7; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx001100000010000100xx00;
	cfgsin1[0:44] =  45 'b00100000100000100xx0000010000010000001xx00010;
	cfgsin2[0:44] =  45 'b10000010000010xx0000100000100000001xx00001000;
	cfgsin3[0:44] =  45 'b00100000100xx1000100000100000001xx10001000001;
	cfgsin4[0:44] =  45 'b00000100xx0000000001100000001xx00001000001000;
	cfgsin5[0:44] =  45 'b00100xx0000100000100000001xx00001000001000001;
	cfgsin6[0:44] =  45 'b00xx0000100000100000001xx0000100000100000100x;
	cfgsin7[0:44] =  45 'bx0000100000100000001xx0000100000100000100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000100000001xx0000100000100000100xx00001;
	cfgsin14[0:44] =  45 'b00000100000001xx0000100000100000100xx00001000;
	cfgsin13[0:44] =  45 'b00100000001xx0000100000100000100xx00001000001;
	cfgsin12[0:44] =  45 'b00000001xx0000100000100000100xx00001000001000;
	cfgsin11[0:44] =  45 'b00001xx0000100000100000100xx00001000001000000;
	cfgsin10[0:44] =  45 'b01xx0000100000100000100xx0000100000100000001x;
	cfgsin9[0:44] =  45 'bx0000100000100000100xx0000100000100000001xx00;
	cfgsin8[0:44] =  45 'bxx00100000100000100xx000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxxx1100000100000100xx1xx1100000100000100x01x;
	cfgsin17[0:44] =  45 'bx1010000100000100x01xx1100000100000100x01xx10;
	cfgsin18[0:44] =  45 'b10000100000100x01xx1010000100000100x01xx10100;
	cfgsin19[0:44] =  45 'b00100000100x01xx1010000010000001x01xx10100000;
	cfgsin20[0:44] =  45 'b10000001x01xx0010000100000001x00xx10010000010;
	cfgsin21[0:44] =  45 'b00010x00xx0000100001000100x01xx10100000010001;
	cfgsin22[0:44] =  45 'b00x01xx1000010001000100x01xx0010000010000001x;
	cfgsin23[0:44] =  45 'b00xx0010000100000010x00xx1010000000100010x11x;
// BR
	cfgsin31[0:44] =  45 'bx0100000100000010x00xx1010000000100010x00xx00;
	cfgsin30[0:44] =  45 'b01000100000001x00xx0010000001000010x01xx00000;
	cfgsin29[0:44] =  45 'b01001000010x00xx0010000000010100x01xx10000010;
	cfgsin28[0:44] =  45 'b01000001x01xx0010000000100010x01xx00001000001;
	cfgsin27[0:44] =  45 'b00100x01xx1010000000100001x01xx10100000001000;
	cfgsin26[0:44] =  45 'b10x01xx1010000001000010x01xx1010000100000001x;
	cfgsin25[0:44] =  45 'b01xx1001000100000100x01xx1100000100000100x01x;
	cfgsin24[0:44] =  45 'bxxx1100000100000100x01xx0010000100000001xx1xx;
end
endtask
task get_wl_pat6; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000000001010000001x000;
	cfgsin1[0:44] =  45 'b00001000000100001x00000100000010000100x000000;
	cfgsin2[0:44] =  45 'b10000100000100x00000100000100000100x000001000;
	cfgsin3[0:44] =  45 'b00100000001x00000100000100000100x000001000001;
	cfgsin4[0:44] =  45 'b00000100x00000100000100000001x000001000001000;
	cfgsin5[0:44] =  45 'b00001x00000100000100000100x000001000001000001;
	cfgsin6[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin7[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
// TR
	cfgsin15[0:44] =  45 'b00100000100000100x00000100000100000100x000001;
	cfgsin14[0:44] =  45 'b00000100000100x00000100000100000100x000001000;
	cfgsin13[0:44] =  45 'b00100000100x00000100000100000100x000001000001;
	cfgsin12[0:44] =  45 'b00000100x00000100000100000100x000001000001000;
	cfgsin11[0:44] =  45 'b00100x00000100000100000100x000001000001000001;
	cfgsin10[0:44] =  45 'b00x00000100000100000100x00000100000100000100x;
	cfgsin9[0:44] =  45 'b00000100000100000100x00000100000100000100x000;
	cfgsin8[0:44] =  45 'bxx00100000100000100x0000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100xx0000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000010000010000001xx00000100000;
	cfgsin20[0:44] =  45 'b10000001xx0001001000100000010xx00000010000010;
	cfgsin21[0:44] =  45 'b00100xx1000001000001000010xx00000000010100000;
	cfgsin22[0:44] =  45 'b01xx0000001000001000001xx0001010000010000001x;
	cfgsin23[0:44] =  45 'bx0000100000000001010xx1000010000010000100x100;
// BR
	cfgsin31[0:44] =  45 'b00100000000100001xx1000000001000010001xx10000;
	cfgsin30[0:44] =  45 'b00010001000010xx0000000010001000001xx00000010;
	cfgsin29[0:44] =  45 'b00001000100xx1001000100010000001xx00000010001;
	cfgsin28[0:44] =  45 'b00000010xx0000100000000010001xx00000010000000;
	cfgsin27[0:44] =  45 'b01001xx0000010000000010001xx00000000100000100;
	cfgsin26[0:44] =  45 'b10xx0000001000100000100xx0000100000100000001x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0001100000100000001xx000;
end
endtask
task get_wl_pat5; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx00010000xx100x100xx00;
	cfgsin1[0:44] =  45 'b00100000xx100x100xx0000000001xx001x001xx00001;
	cfgsin2[0:44] =  45 'b00000xx100x010xx0000100000xx001x001xx00001000;
	cfgsin3[0:44] =  45 'b00xx100x100xx0000100000xx001x001xx0000100000x;
	cfgsin4[0:44] =  45 'bx100x100xx0000100000xx001x001xx0000100000xx10;
	cfgsin5[0:44] =  45 'b0x100xx0000100000xx001x001xx0000100000xx100x1;
	cfgsin6[0:44] =  45 'b00xx0000100000xx001x001xx0000100000xx100x100x;
	cfgsin7[0:44] =  45 'bx0000100000xx001x001xx0000100000xx100x100xx00;
// TR
	cfgsin15[0:44] =  45 'b00100000xx001x001xx0000100000xx100x100xx00001;
	cfgsin14[0:44] =  45 'b00000xx001x001xx0000100000xx100x100xx00001000;
	cfgsin13[0:44] =  45 'b00xx001x001xx0000100000xx100x100xx0000100000x;
	cfgsin12[0:44] =  45 'bx001x001xx0000100000xx100x100xx0000100000xx00;
	cfgsin11[0:44] =  45 'b1x001xx0000100000xx100x100xx0000100000xx001x0;
	cfgsin10[0:44] =  45 'b01xx0000100000xx100x100xx0000100000xx001x001x;
	cfgsin9[0:44] =  45 'bx0000100000xx100x100xx0000100000xx001x001xx00;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100xx00xxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000100000100x00000100000100000100xx00;
	cfgsin17[0:44] =  45 'b00100000100000100xx0000100000100000100xx00001;
	cfgsin18[0:44] =  45 'b00000100000100xx0000100000100000100xx00001000;
	cfgsin19[0:44] =  45 'b00100000100xx0000010000000100001xx00000100001;
	cfgsin20[0:44] =  45 'b00000001xx0000000100000010010xx01000010000100;
	cfgsin21[0:44] =  45 'b00100xx0000001000010000001xx00001000000000010;
	cfgsin22[0:44] =  45 'b01xx0000100000010000001xx0000010000100000001x;
	cfgsin23[0:44] =  45 'bx0100100000001000010xx0000010000010000001x100;
// BR
	cfgsin31[0:44] =  45 'b01000010000001001xx0000010000100000001xx00101;
	cfgsin30[0:44] =  45 'b00000010000100xx0000001000001000100xx00010010;
	cfgsin29[0:44] =  45 'b00001000010xx0000001000100000001xx00000000100;
	cfgsin28[0:44] =  45 'b01000100xx0001000100001000001xx00010001000100;
	cfgsin27[0:44] =  45 'b00001xx0000001000000001001xx00000000010100000;
	cfgsin26[0:44] =  45 'b10xx0000000001001000100xx0000100000010000001x;
	cfgsin25[0:44] =  45 'bx0000100000100000100xx0000100000100000100xx00;
	cfgsin24[0:44] =  45 'bxx00100000100000100xx0000100000100000001x0000;
end
endtask
task get_wl_pat4; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxx000010000xx001x100x000;
	cfgsin1[0:44] =  45 'b00100000xx100x010x00000010000xx100x010x000000;
	cfgsin2[0:44] =  45 'b10000xx100x001x00000100000xx100x100x000001000;
	cfgsin3[0:44] =  45 'b00xx100x001x00000100000xx100x100x00000100000x;
	cfgsin4[0:44] =  45 'bx100x100x00000100000xx100x010x00000100000xx10;
	cfgsin5[0:44] =  45 'b0x001x00000100000xx100x100x00000100000xx100x1;
	cfgsin6[0:44] =  45 'b00x00000100000xx100x100x00000100000xx100x100x;
	cfgsin7[0:44] =  45 'b00000100000xx100x100x00000100000xx100x100x000;
// TR
	cfgsin15[0:44] =  45 'b00100000xx100x100x00000100000xx100x100x000001;
	cfgsin14[0:44] =  45 'b00000xx100x100x00000100000xx100x100x000001000;
	cfgsin13[0:44] =  45 'b00xx100x100x00000100000xx100x100x00000100000x;
	cfgsin12[0:44] =  45 'bx100x100x00000100000xx100x100x00000100000xx10;
	cfgsin11[0:44] =  45 'b0x100x00000100000xx100x100x00000100000xx100x1;
	cfgsin10[0:44] =  45 'b00x00000100000xx100x100x00000100000xx100x100x;
	cfgsin9[0:44] =  45 'b00000100000xx100x100x00000100000xx100x100x000;
	cfgsin8[0:44] =  45 'bxx00100000xx100x100x0000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxx00100000xx100x100xx0000100000xx100x100xx00;
	cfgsin17[0:44] =  45 'b00100000xx100x100xx0000100000xx100x100xx00001;
	cfgsin18[0:44] =  45 'b00000xx100x100xx0000100000xx100x100xx00001000;
	cfgsin19[0:44] =  45 'b00xx100x100xx0000010000xx010x001xx0000010000x;
	cfgsin20[0:44] =  45 'bx010x001xx0000100000xx100x010xx0000001000xx01;
	cfgsin21[0:44] =  45 'b0x100xx0001100000xx010x100xx0000001000xx010x0;
	cfgsin22[0:44] =  45 'b01xx0000001000xx001x001xx0000010000xx100x001x;
	cfgsin23[0:44] =  45 'bx0010100000xx100x010xx0000100000xx001x010x100;
// BR
	cfgsin31[0:44] =  45 'b00100000xx001x010xx0000000100xx100x100xx00000;
	cfgsin30[0:44] =  45 'b00010xx100x001xx1010000010xx001x010xx00000010;
	cfgsin29[0:44] =  45 'b00xx010x001xx0000100000xx100x010xx0000001000x;
	cfgsin28[0:44] =  45 'bx001x001xx0000010000xx100x100xx0000000010xx10;
	cfgsin27[0:44] =  45 'b0x010xx0000000010xx010x010xx0000001000xx010x1;
	cfgsin26[0:44] =  45 'b00xx0000001000xx001x001xx0000100000xx010x001x;
	cfgsin25[0:44] =  45 'bx0000100000xx100x100xx0000100000xx100x100xx00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x100xx0000100000xx100x001xx00x;
end
endtask
task get_wl_pat3; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000000;
	cfgsin1[0:44] =  45 'b100000000000000000000010000000000000000000010;
	cfgsin2[0:44] =  45 'b000000000000000000100000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx000000000000000000000xxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxx000100000xx100x100x00000100000xx100x1000x00;
	cfgsin17[0:44] =  45 'b00100000xx100x1000x0000100000xx100x1000x00001;
	cfgsin18[0:44] =  45 'b00000xx100x1000x0000100000xx100x1000x00001000;
	cfgsin19[0:44] =  45 'b00xx100x1000x0000010000xx001x0101x0000010000x;
	cfgsin20[0:44] =  45 'bx001x0101x0000000001xx010x1001x0000001000xx10;
	cfgsin21[0:44] =  45 'b0x0101x0000001000xx001x0101x0100000001xx001x1;
	cfgsin22[0:44] =  45 'b001x0100001000xx001x0101x0000000001xx001x1001;
	cfgsin23[0:44] =  45 'bx0000000001xx010x1001x0000010000xx100x100x100;
// BR
	cfgsin31[0:44] =  45 'b00100000xx010x0011x0000000001xx001x0101x00000;
	cfgsin30[0:44] =  45 'b00001xx010x0011x0000001000xx100x0101x00000010;
	cfgsin29[0:44] =  45 'b00xx100x0101x0100000001xx001x1001x0100001000x;
	cfgsin28[0:44] =  45 'bx100x0101x0010000001xx010x0011x0100000001xx00;
	cfgsin27[0:44] =  45 'b1x1001x0000000010xx001x0101x0001000010xx001x0;
	cfgsin26[0:44] =  45 'b101x0000001000xx100x0011x0001100000xx001x0101;
	cfgsin25[0:44] =  45 'bx0000100000xx100x1000x0000100000xx100x1000x00;
	cfgsin24[0:44] =  45 'bxx00100000xx100x1000x0000100000xx001x001x0000;
end
endtask
task get_wl_pat2; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000000;
	cfgsin1[0:44] =  45 'b001000000000100000000000000000000000000000001;
	cfgsin2[0:44] =  45 'b000000000100000000000000000000000000000000000;
	cfgsin3[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin4[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin5[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin6[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin7[0:44] =  45 'b000000000000000000000000000000000000000000000;
// TR
	cfgsin15[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin14[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin13[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin12[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin11[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin10[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin9[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin8[0:44] =  45 'bxx0000000000000000000000xxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000000000000000000000001000000000000;
	cfgsin21[0:44] =  45 'b000001000010000001000000001000000000000000100;
	cfgsin22[0:44] =  45 'b001000000000000010000000000000001000000000000;
	cfgsin23[0:44] =  45 'b000000000000000000010000000000000000100000000;
// BR
	cfgsin31[0:44] =  45 'b000100000000000000000000000000000100000000000;
	cfgsin30[0:44] =  45 'b000000000000000000000010000000001000000000100;
	cfgsin29[0:44] =  45 'b000000000000000000000000100000000000000000000;
	cfgsin28[0:44] =  45 'b000000000000000000000000000000000000001000000;
	cfgsin27[0:44] =  45 'b000000000000000000000000000000000001000000000;
	cfgsin26[0:44] =  45 'b000000000000000000010000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx000000000000000000000000000000000000000000x;
end
endtask
task get_wl_pat1; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxxx110x1010x0110001101x;
	cfgsin1[0:44] =  45 'bx000x1010x1000001011xx010x1010x1010001011xx00;
	cfgsin2[0:44] =  45 'b0x0110x0100001101xx010x0110x0110001101xx110x0;
	cfgsin3[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin4[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin5[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin6[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin7[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
// TR
	cfgsin15[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin14[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin13[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin12[0:44] =  45 'bx0110001101xx110x0110x0110001101xx110x0110x01;
	cfgsin11[0:44] =  45 'b10001101xx110x0110x0110001101xx110x0110x01100;
	cfgsin10[0:44] =  45 'b01101xx110x0110x0110001101xx110x0110x01100011;
	cfgsin9[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin8[0:44] =  45 'bxxx110x0110x0110001101xxxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxx000000000000000000000000000000000000000000;
	cfgsin17[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin18[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin19[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin20[0:44] =  45 'b000000000000010100000100000000100000000000000;
	cfgsin21[0:44] =  45 'b010000000000000000000000000000000000000000000;
	cfgsin22[0:44] =  45 'b000000000000000000000000110001000000000000000;
	cfgsin23[0:44] =  45 'b001000001000000000000110000001000000000000001;
// BR
	cfgsin31[0:44] =  45 'b000000100000000000010100000000000000010000000;
	cfgsin30[0:44] =  45 'b010010000000100001000000000001000001000100000;
	cfgsin29[0:44] =  45 'b010001100000000100000000000000000000010000000;
	cfgsin28[0:44] =  45 'b000000000000000000100000000000000011000001000;
	cfgsin27[0:44] =  45 'b100000000000010000000000000000000000010000000;
	cfgsin26[0:44] =  45 'b000001010000000000000000000000000000000000000;
	cfgsin25[0:44] =  45 'b000000000000000000000000000000000000000000000;
	cfgsin24[0:44] =  45 'bxx0000000000000000000000100000000000000000000;
end
endtask
task get_wl_pat0; // - to load all shift register with data
begin
// TL
	cfgsin0[0:44] =  45 'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000000000000;
	cfgsin1[0:44] =  45 'bxxxxxxx00000000000000xxxxxxx00000000000000xxx;
	cfgsin2[0:44] =  45 'bxxxx00000000000000xxxxxxx00000000000000xxxxxx;
	cfgsin3[0:44] =  45 'bx00000000000000xxxxxxx00000000000000xxxxxxx00;
	cfgsin4[0:44] =  45 'b000000000000xxxxxxx00000000000000xxxxxxx00000;
	cfgsin5[0:44] =  45 'b000000000xxxxxxx00000000000000xxxxxxx00000000;
	cfgsin6[0:44] =  45 'b000000xxxxxxx00000000000000xxxxxxx00000000000;
	cfgsin7[0:44] =  45 'b000xxxxxxx00000000000000xxxxxxx00000000000000;
// TR
	cfgsin15[0:44] =  45 'bxxxxxxx00000000000000xxxxxxx00000000000000xxx;
	cfgsin14[0:44] =  45 'bxxxx00000000000000xxxxxxx00000000000000xxxxxx;
	cfgsin13[0:44] =  45 'bx00000000000000xxxxxxx00000000000000xxxxxxx00;
	cfgsin12[0:44] =  45 'b000000000000xxxxxxx00000000000000xxxxxxx00000;
	cfgsin11[0:44] =  45 'b000000000xxxxxxx00000000000000xxxxxxx00000000;
	cfgsin10[0:44] =  45 'b000000xxxxxxx00000000000000xxxxxxx00000000000;
	cfgsin9[0:44] =  45 'b000xxxxxxx00000000000000xxxxxxx00000000000000;
	cfgsin8[0:44] =  45 'bxxxxxxxxx00000000000000xxxxxxxxxxxxxxxxxxxxxx;
// BL
	cfgsin16[0:44] =  45 'bxxxx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin17[0:44] =  45 'bx110x0110x0110001101xx110x0110x0110001101xx11;
	cfgsin18[0:44] =  45 'b0x0110x0110001101xx110x0110x0110001101xx110x0;
	cfgsin19[0:44] =  45 'b110x0110001101xx110x0110x0110001101xx110x0110;
	cfgsin20[0:44] =  45 'bx0110001101xx000x0110x0001001000xx101x0110x01;
	cfgsin21[0:44] =  45 'b00001001xx010x0100x0110001000xx110x0110x01000;
	cfgsin22[0:44] =  45 'b01000xx110x0110x0010001000xx100x0001x01100101;
	cfgsin23[0:44] =  45 'b00xx110x0010x0101000000xx110x0010x0100001100x;
// BR
	cfgsin31[0:44] =  45 'bx100x0010x0110001100xx001x1010x0100000101xx11;
	cfgsin30[0:44] =  45 'b0x0000x0110000100xx100x1010x0000001001xx000x0;
	cfgsin29[0:44] =  45 'b100x0000001100xx010x1000x0110001100xx001x1010;
	cfgsin28[0:44] =  45 'bx0101001101xx010x0010x0110001100xx000x0000x01;
	cfgsin27[0:44] =  45 'b00001101xx101x0010x0101001101xx010x0000x01100;
	cfgsin26[0:44] =  45 'b01100xx010x0101x0100010101xx010x0110x01100011;
	cfgsin25[0:44] =  45 'b01xx110x0110x0110001101xx110x0110x0110001101x;
	cfgsin24[0:44] =  45 'bxxx110x0110x0110001101xx001x1001x1001010011xx;
end
endtask
